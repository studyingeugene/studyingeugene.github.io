<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>컴공 학부생이 군대에서 공부하는 법</title>
    <url>/etc/cs-study-in-army/</url>
    <content><![CDATA[<h2 id="개요"><a class="markdownIt-Anchor" href="#개요"></a> 개요</h2>
<p>저는 현재 전역전 휴가를 한달 앞두고 있는 현역 육군 병장입니다. 지금부터 제가 하는 이야기는 제가 약 1년 반동안 군대에서 어떻게 공부를 했는지에 관한 것입니다. 저처럼 군대에서 공부를 해보려는 사람들에게 유용한 참고자료가 되었으면 좋겠습니다.</p>
<h2 id="군대의-환경변수"><a class="markdownIt-Anchor" href="#군대의-환경변수"></a> 군대의 환경변수</h2>
<p>당연하게도 군대는 공부를 하기에 적합한 환경은 아닙니다. 매일같이 근무와 일과에 시달리다가 훈련이라도 하는 날에는 몇일동안 사지방에 출입하지도 못합니다. 이런 외적인 요인을 제외하고도 사지방에는 자체적으로 많은 제약이 걸려 있습니다.</p>
<ol>
<li>
<p>작업한 파일을 로컬 저장소에 저장할 수 없습니다. (재부팅하면 초기화되기 때문에)</p>
</li>
<li>
<p>HamoniKR OS를 사용하기 때문에 윈도우용 응용프로그램들을 사용할 수 없습니다.</p>
</li>
<li>
<p>그렇다고 리눅스 응용프로그램이 설치가 되는 것도 아닙니다.</p>
</li>
<li>
<p>리눅스기반 OS이면서도 apt-get을 막아놔서 Node.js 조차 설치할 수 없습니다.</p>
</li>
</ol>
<p>하지만 그럼에도 불구하고 아무것도 할 수 없는 것은 아닙니다. 환경변수가 좋지 않다고 해서 공부를 멈출 수는 없습니다. 악조건 속에서도 우리는 할 수 있는 것을 해야만 합니다.</p>
<p><img data-src="/img/etc/we-will-find-an-answer.jpg" alt="영화 인터스텔라의 명대사" /></p>
<h2 id="1-자기개발-지원금"><a class="markdownIt-Anchor" href="#1-자기개발-지원금"></a> 1. 자기개발 지원금</h2>
<p><img data-src="/img/etc/self-development.png" alt="군 자기개발 지원정책 공고문" /></p>
<p>현재 국방부에서는 매년마다 12만원의 자기개발 지원금을 지원해주고 있습니다. 다양한 활용 방법이 있겠지만, 저는 이 지원금으로 도서를 구입하는 것을 추천합니다. 복학후 수강하게될 강의의 강의계획서를 보면 어떤 책을 사용하는지 알 수 있습니다. 어차피 사야 할 전공책이라면 나라의 지원을 받아서 사는 것이 좋습니다. 또, 전공책이 아니더라도 좋은 책들은 많습니다. 아래는 제가 군대에서 구입한 도서의 목록입니다.</p>
<ul>
<li>컴퓨터 프로그램의 구조와 해석 (마법사책)</li>
<li>운영체제 (공룡책)</li>
<li>클린 코드</li>
<li>파이썬 머신러닝</li>
<li>윤성우의 열혈 C++</li>
</ul>
<p>위의 책들은 제 군생활 공부에 큰 영향을 주었습니다. 개인 정비 시간이 아니더라도 일과중에 시간이 생기면 틈틈히 읽을 수 있는 것도 책의 장점 중 하나입니다.</p>
<p><a href="https://docs.google.com/spreadsheets/d/1sQQmSalRUcPXFz8uJodAcxrad_19oHAlvCSj35VVX3c/edit?usp=sharing">양질의 도서 목록</a></p>
<h2 id="2-구름ide를-이용한-깃허브-블로그-만들기"><a class="markdownIt-Anchor" href="#2-구름ide를-이용한-깃허브-블로그-만들기"></a> 2. 구름IDE를 이용한 깃허브 블로그 만들기</h2>
<p>저는 아직 학부생인데다가 그렇게 많은 지식을 가지고 있지도 않습니다. 그런 저에게 있어서 깃허브 블로그를 만드는 것은 그 자체로 좋은 프로젝트였습니다. 구름IDE를 이용하면 로컬 저장소를 사용하지 않고도 블로그를 만들 수 있습니다. 지금 쓰고 있는 이 글도 구름IDE를 이용해서 작성하고 있습니다.</p>
<p><img data-src="/img/etc/posting-in-goorm.png" alt="구를IDE에서 쓰고 있는 본문" /></p>
<p>이 블로그는 Node.js를 기반으로 한 Hexo로 만들어 졌습니다. 익숙하지 않은 환경에서 필요한 기술 스택들을 설치하고, 블로그를 만들기 위해서 공식 문서들을 읽는 것 그 자체로 저에게는 많은 도움이 되었습니다.</p>
<h2 id="3-sicp"><a class="markdownIt-Anchor" href="#3-sicp"></a> 3. SICP</h2>
<p><img data-src="/img/sicp/review/sicp-book-cover.jpg" alt="마법사책" /></p>
<p>흔히들 마법사책이라고 불리는 SICP는 컴퓨터과학계의 고전 중 하나입니다. 책의 난이도가 쉽지는 않았습니다. 익숙하지 않은 언어인 Scheme을 사용하는데다, 책에는 자세히 설명되어 있지 않은 수학적 지식을 요구하기도 합니다. 국내 커뮤니티에서 잘 다뤄지지 않기 때문에 질 좋은 해설을 찾고 싶으면 영어 커뮤니티를 가야 하기도 합니다. 하지만 이 모든 역경을 딛고 모든 연습문제를 곱씹어 풀다 보면, 컴퓨터 과학의 전반에 걸쳐서 넓은 지식을 얻을 수 있는 책입니다. 복학 후의 학교 수업을 이해하는 데에 많은 도움을 줄 것 같습니다.</p>
<h2 id="4-코딩테스트"><a class="markdownIt-Anchor" href="#4-코딩테스트"></a> 4. 코딩테스트</h2>
<p>인터넷 브라우저만 있다면 할 수 있는 공부가 있습니다. 아마도 잘 알고계시는 코딩 테스트입니다. 잘 알려진 사이트로는 <a href="https://www.acmicpc.net/">백준</a>이 있습니다. 사실 저는 군대에서 코딩테스트를 따로 공부하지는 않았습니다. 아직 코딩테스트를 공부할만할 단계가 아니라고 생각했기 때문입니다. 하지만 코딩테스트를 연습할만한 단계에 오르신 분이라면 좋은 공부법이 될 것 같습니다.</p>
]]></content>
      <categories>
        <category>미분류</category>
      </categories>
  </entry>
  <entry>
    <title>expmod 모듈러 지수화 알고리즘 친절한 설명</title>
    <url>/algorithm/expmod/</url>
    <content><![CDATA[<h2 id="모듈러-지수화-알고리즘이란"><a class="markdownIt-Anchor" href="#모듈러-지수화-알고리즘이란"></a> 모듈러 지수화 알고리즘이란</h2>
<p>모듈러 지수화 알고리즘이란,<br />
어떤 수를 지수연산한 결과를 다른 수로 나누어 나머지를 구하는 알고리즘입니다.<br />
지수연산이 다 끝나기 전에 연산하는 수의 크기를 크게 줄여줘서 메모리 친화적인 알고리즘입니다.</p>
<p>아래의 식이 모듈러 지수화 알고리즘의 핵심인 모듈러 곱셈입니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>a</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">ab\mod{m}=[(a\mod{m})(b\mod{m})]\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span style="color:#8fbc8f">(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">a \mod b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span>)는 a를 b로 나눈 나머지를 뜻합니다.</span></p>
<p>놀랍지 않습니까?<br />
(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">ab</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span></span></span>의 나머지)를 구하려고 하는데,<br />
이 값은 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>의 나머지)와 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>의 나머지)의 곱의 나머지와 같습니다.</p>
<h2 id="모듈러-곱셈-증명"><a class="markdownIt-Anchor" href="#모듈러-곱셈-증명"></a> 모듈러 곱셈 증명</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>a</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">ab\mod{m}=[(a\mod{m})(b\mod{m})]\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span>을 증명하겠습니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>m</mi><mo>×</mo><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">a=m\times q&#x27;+r&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>m</mi><mo>×</mo><msup><mi>q</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>+</mo><msup><mi>r</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">b=m\times q&#x27;&#x27;+r&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">q&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>q</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">q&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>는 몫, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">r&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>r</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">r&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>는 나머지)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">ab\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mi>m</mi><mo>×</mo><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>m</mi><mo>×</mo><msup><mi>q</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>+</mo><msup><mi>r</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">=(m\times q&#x27;+r&#x27;)(m\times q&#x27;&#x27;+r&#x27;&#x27;)\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>m</mi><mn>2</mn></msup><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup><msup><mi>q</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>+</mo><mi>m</mi><msup><mi>q</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>r</mi><mo>+</mo><mi>m</mi><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup><msup><mi>r</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>+</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><msup><mi>r</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">=(m^2q&#x27;q&#x27;&#x27;+mq&#x27;&#x27;r+mq&#x27;r&#x27;&#x27;+r&#x27;r&#x27;&#x27;)\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span></p>
<p>여기서 m을 인수로 포함한 항은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">\mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span>에 의해 지워집니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">ab\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><msup><mi>r</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">=r&#x27;r&#x27;&#x27;\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo><mi>a</mi><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>a</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">∴ ab\mod{m}=[(a\mod{m})(b\mod{m})]\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span></p>
<h2 id="모듈러-곰셈을-이용한-expmod"><a class="markdownIt-Anchor" href="#모듈러-곰셈을-이용한-expmod"></a> 모듈러 곰셈을 이용한 expmod</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>b</mi><mi>n</mi></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">b^n\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span>을 계산한다고 합시다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn><mi>k</mi></mrow><annotation encoding="application/x-tex">n=2k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>라면, (짝수라면)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>b</mi><mrow><mn>2</mn><mi>k</mi></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">b^{2k}\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">=[(b^k\mod{m})(b^k\mod{m})]\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">=(b^k\mod{m})^2\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=2k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>이라면, (홀수라면)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>b</mi><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">b^{2k+1}\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mrow><mn>2</mn><mi>k</mi></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">=[(b\mod{m})(b^{2k}\mod{m})]\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>b</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mrow><mn>2</mn><mi>k</mi></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">=b(b^{2k}\mod{m})\mod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span><br />
(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>m</mi><mi>q</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">b=mq+r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>로 놓고 계산해 보면 m이 포함된 부분을 결국 사라지므로, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>b</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(b\mod{m})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>로 대체 가능하다.)</p>
<p>위의 알고리즘을 사용한다면, 메모리를 초과하지 않고도 지수연산의 결과에 모듈러 연산을 할 수 있습니다.<br />
구현된 프로시저를 스킴으로 나타내면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br><span class="line">                    m))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br></pre></td></tr></table></figure>
<p>긴 글 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>알고리즘</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
      </tags>
  </entry>
  <entry>
    <title>유클리드 호제법 GCD 알고리즘 친절한 증명</title>
    <url>/algorithm/gcd/</url>
    <content><![CDATA[<h2 id="유클리드의-사기성"><a class="markdownIt-Anchor" href="#유클리드의-사기성"></a> 유클리드의 사기성</h2>
<p>유클리드는 롤로 치면 잭스같은 캐릭터입니다.<br />
잭스는 롤 초창기에 만들어진 원년멤버이면서 스킬셋도 지금까지 안바뀌고 유지되고 있습니다.<br />
그럼에도 불구하고 웬만한 OP챔피언들은 다 씹어먹으며, 탑의 국밥으로 군림하고 있습니다.</p>
<p>유클리드가 그렇습니다.<br />
무려 기원전 4세기의 사람이 만든 알고리즘이 지금까지도 가장 효율적인 알고리즘입니다.</p>
<h2 id="gcd-알고리즘이란"><a class="markdownIt-Anchor" href="#gcd-알고리즘이란"></a> GCD 알고리즘이란</h2>
<p>GCD 알고리즘은 최대 공약수를 구하는 알고리즘입니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">GCD(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>를 a와 b의 최대 공약수라고 하겠습니다.<br />
이때, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">GCD(a,b)=GCD(b,a\bmod b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>가 성립합니다.<br />
<span style="color:#8fbc8f">여기서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">a\bmod b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>는 a를 b로 나눈 나머지를 뜻한다.</span><br />
또한 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">b=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">GCD(a,b)=a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>입니다.</p>
<p>이를 응용하면 이렇게 됩니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mn>391</mn><mo separator="true">,</mo><mn>85</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">GCD(391,85)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord">3</span><span class="mord">9</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mord">5</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mn>85</mn><mo separator="true">,</mo><mn>51</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=GCD(85,51)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord">8</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mn>51</mn><mo separator="true">,</mo><mn>34</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=GCD(51,34)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord">5</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">4</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mn>34</mn><mo separator="true">,</mo><mn>17</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=GCD(34,17)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord">3</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mn>17</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=GCD(17,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>17</mn></mrow><annotation encoding="application/x-tex">=17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span></span></span></span></p>
<p>391과 85라는 계산하기에 너무 더러운 숫자도 손쉽게 최대공약수를 구할 수 있게 되는것입니다!!</p>
<h2 id="gcd-증명"><a class="markdownIt-Anchor" href="#gcd-증명"></a> GCD 증명</h2>
<p>GCD알고리즘의 사기성을 알았으니 증명을 한번 해봅시다.</p>
<p>GCD알고리즘에 따르면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>의 최대공약수는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">a\bmod b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>의 최대 공약수와 같습니다.</p>
<p>이때  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>b</mi><mo>=</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">a\bmod b=r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>이라고 한다면,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi><mo>×</mo><mi>q</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">a=b\times q+r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>이 성립합니다. (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>로 나눈 몫)</p>
<p>즉, 우리는 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>의 최대공약수)가 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>의 최대공약수)와 같음을 증명해야 합니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>를 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>의 최대공약수)라고 하겠습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>k</mi><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">a=kn&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>k</mi><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">b=kn&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> 	<br />
(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">n&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>은 서로소)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>b</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">r=a-bq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>k</mi><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><mi>k</mi><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi></mrow><annotation encoding="application/x-tex">=kn&#x27;-kn&#x27;&#x27;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>k</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=k(n&#x27;-n&#x27;&#x27;q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>의 최대공약수가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>이기 위해서는, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n&#x27;-n&#x27;&#x27;q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>가 서로소여야 합니다.</p>
<p>이를 증명하기 위해서 역으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n&#x27;-n&#x27;&#x27;q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>가 서로소가 아니라고 가정해 봅시다.<br />
만약 위의 가정에서 모순이 도출된다면, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n&#x27;-n&#x27;&#x27;q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>는 서로소인 것이 증명됩니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n&#x27;-n&#x27;&#x27;q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>의 최대공약수를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>이라 하겠습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>=</mo><mi>m</mi><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;=mt&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi><mo>=</mo><mi>m</mi><msup><mi>t</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;-n&#x27;&#x27;q=mt&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">t&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">t&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>은 서로소)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><mi>m</mi><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup><mi>q</mi><mo>=</mo><mi>m</mi><msup><mi>t</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;-mt&#x27;q=mt&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>=</mo><mi>m</mi><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">\because n&#x27;&#x27;=mt&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>)<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mi>m</mi><msup><mi>t</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>+</mo><mi>m</mi><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup><mi>q</mi></mrow><annotation encoding="application/x-tex">n&#x27;=mt&#x27;&#x27;+mt&#x27;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>=</mo><mi>m</mi><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;=mt&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mi>m</mi><msup><mi>t</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>+</mo><mi>m</mi><msup><mi>t</mi><mo mathvariant="normal">′</mo></msup><mi>q</mi></mrow><annotation encoding="application/x-tex">n&#x27;=mt&#x27;&#x27;+mt&#x27;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><br />
위의 두 식에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">n&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>이 공통 인수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>을 가진다.<br />
그런데 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">n&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>은 서로소이므로 논리적 모순이 발생한다.</p>
<p>그러므로, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">n&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><msup><mi>n</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n&#x27;-n&#x27;&#x27;q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>는 서로소다.<br />
그러므로, (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>의 최대공약수)와 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>의 최대공약수)는 같다.<br />
그러므로, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">GCD(a,b)=GCD(b,a\bmod b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>가 성립한다.</p>
]]></content>
      <categories>
        <category>알고리즘</category>
      </categories>
      <tags>
        <tag>알고리즘</tag>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title>함수형 프로그래밍을 위한 람다 대수 입문 번역</title>
    <url>/functional-programming/introduction-to-lambda-calculus/</url>
    <content><![CDATA[<blockquote>
<h2 id="일러두기"><a class="markdownIt-Anchor" href="#일러두기"></a> 일러두기</h2>
<p>본 포스팅은 Raul Rojas의 <a href="https://arxiv.org/abs/1503.09060">A Tutorial Introduction to the Lambda Calculus</a>을 한글로 번역한 문서입니다. 의역이 많이 포함되어 있습니다. 잘못된 번역은 댓글로 알려주시면 감사하겠습니다.</p>
</blockquote>
<h2 id="개요"><a class="markdownIt-Anchor" href="#개요"></a> 개요</h2>
<p>이 문서는 짧고 <strong>고통없는</strong><sup>painless</sup> 람다 대수의 입문용 문서입니다. 람다 대수라는 이 형식은 처음에는 효과적으로 계산 가능한 함수의 일부 수학적 특성을 연구하기 위해 개발되었습니다.  그러고는 함수형 프로그래밍 언어군의 강력한 이론적 기초를 제공했습니다.  람다 대수의 함수들은 이름이 없기 때문에 스스로를 외부에 나타낼 수 없습니다.  그럼에도 불구하고 람다 대수를 이용해서 어떻게 산술연산과 논리연산을 할수 있는 지를 알아볼 것입니다. 또한 어떻게 재귀 함수를 정의하는 지도 알아볼 것입니다.</p>
<h2 id="1-정의"><a class="markdownIt-Anchor" href="#1-정의"></a> 1. 정의</h2>
<p>λ(람다) 대수는 세계에서 가장 작은 <strong>유니버설 프로그래밍 언어</strong>라고 할 수 있습니다. 람다 대수는 하나의 변환규칙인 변수 대입법(베타 변환법<sup>β-conversion</sup>이라고도 한다.)과 하나의 함수 선언 문법으로 이루어져 있습니다. 람다 대수는 1930년에 Alonzo Church가 발표한 효율적인 계산을 형식화하기 위한 대수 체계입니다.  모든 계산가능한 함수가 람다 대수로 표현될 수 있다는 점에서 람다 대수는 일반적입니다.  그러므로 람다 대수는 튜링기계와 같다고 할 수 있습니다. 하지만, 람다 대수는 기호 변환규칙을 표현하는 데에만 관심이 있지, 실제로 구현하는 것에는 관심이 없습니다. 이것은 하드웨어적이라기 보다는 소프트웨어적인 접근입니다.</p>
<p>람다 대수의 핵심개념은 <strong>표현식</strong><sup>expression</sup>입니다. <strong>명사</strong><sup>name</sup>는 목적에 따라 a,b,c같은 어떤 문자도 될 수 있는 식별자입니다.  <strong>표현식</strong>이라는 말은 단순하게 어떤 <strong>명사</strong>를 나타낼 수도 있고, <strong>함수</strong>를 나타낼 수도 있는 말입니다. <strong>함수</strong>에서는 그리스 문자 λ를 사용해서 함수의 인자를 표시할 수 있습니다. 함수의 &quot;몸체&quot;<sup>body</sup>는 인자들을 어떻게 재배열하는지를 명시한 것입니다. 항등함수(f(x)=x)를 람다 대수로 표현하면, (λx.x)와 같이 나타냅니다. “λx”는 함수의 인자가 x임을 알려줍니다. x는 함수의 몸체에 명시된 대로 변하지 않고 &quot;x&quot;로 반환됩니다.</p>
<p>함수는 다른 함수에 적용할 수 있습니다. 예시로 함수 B에 함수 A를 적용한 식은 AB로 나타냅니다. 본 문서에서 영어 대문자들은 함수를 뜻하기 위해 사용합니다. 사실 λ-대수의 모든 관심은 함수에만 있습니다. 심지어 숫자나 논리값도 함수입니다. 그 말인즉슨, 숫자나 논리값도 또다른 함수에 적용해서 또다른 기호의 문자열을 반환할 수 있다는 것입니다. λ-대수에 타입이라는 것은 없습니다. 모든 것은 함수이고 모든 함수는 서로를 서로에게 적용할 수 있습니다. 그렇기 때문에 프로그래머는 계산을 센스있게 해야하는 책임이 있습니다.</p>
<p>표현식<sup>expression</sup>은 다음과 같이 재귀적으로 정의됩니다.<br />
<br/><br/></p>
<center>명사<sup>name</sup>, 함수<sup>function</sup>, 적용식<sup>application</sup>을 모두 표현식<sup>expression</sup>이라고 한다는 뜻.</center>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo><mo>:</mo><mo>=</mo><mo>&lt;</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>&gt;</mo><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>a</mi><mi>p</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;expression&gt; := &lt;name&gt; | &lt;function&gt; | &lt;application&gt;
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo><mo>:</mo><mo>=</mo><mi>λ</mi><mo>&lt;</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>&gt;</mo><mi mathvariant="normal">.</mi><mo>&lt;</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;function&gt; := λ &lt;name&gt;.&lt;expression&gt;
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord">.</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mi>a</mi><mi>p</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo><mo>:</mo><mo>=</mo><mo>&lt;</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo><mo>&lt;</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;application&gt; := &lt;expression&gt;&lt;expression&gt;
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></p>
<p><br/><br/></p>
<p>식<sup>expression</sup>은 명확성을 위해 괄호로 묶일 수 있습니다. 하나의 식 E는 (E)로 표현할 수 있습니다. 이 언어에서 쓰는 유이한 키워드는 λ와 . 밖에 없습니다. 무수한 괄호로 인한 난잡한 표현을 피하기 위해 관습적으로 함수를 왼쪽부터 적용합니다. 말하자면, 아래의 식과 같습니다.</p>
<p><br/><br/></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><msub><mi>E</mi><mn>2</mn></msub><msub><mi>E</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>E</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">E_1 E_2 E_3 . . . E_n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇕</mo></mrow><annotation encoding="application/x-tex">⇕
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel">⇕</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><msub><mi>E</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>E</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(. . .(((E_1) E_2 ) E_3 ). . . E_n )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>위의 람다 표현식<sup>λ expression</sup>의 정의에서도 보았다시피, 위의 두 문자열은 괄호로 묶여있든 풀려있든 잘 짜여진 함수입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">λx.x ≡ (λx.x)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p>
<p>우리는 등호 “≡&quot;를 A와 B는 동의어라는 뜻으로  A≡B 꼴로 사용합니다. 위에서 설명했듯이, λ 뒤에 따라오는 명사는 이 함수의 인자를 나타내는 식별자입니다. 마침표 뒤에 오는 표현식은 함수 정의의 &quot;몸체&quot;<sup>body</sup>라고 불립니다. (위의 경우에서 몸체는 마침표 뒤에 오는 x입니다.)</p>
<p>함수는 표현식에 적용할 수 있습니다. 아래의 예시는 함수를 표현식에 적용한 적용식<sup>application</sup>의 예시입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">)</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">(λx.x)y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p>
<p>위의 예시는 y에 함등함수를 적용한 함수 적용식<sup>function application</sup>을 나타냅니다. 괄호는 식을 명확하게 하기 위해 사용했습니다. 함수의 적용식을 푸는 것은 함수 몸체 안의 x에 인자 x의 값을 대입하는 것입니다. (이 경우에 인자 x의 값은 y입니다.) Fig.1은 어떻게 변수 y가 함수에 흡수되는지를 보여줍니다(빨간 줄). 또한, x를 대신해서 어디에 쓰이는 지도 보여줍니다(녹색 줄). 그 결과는 (화살표 기호가 의미하는) 리덕션<sup>reduction</sup>으로 얻을 수 있습니다. 최종 리덕션 결과는 y입니다.</p>
<p><img data-src="/img/functional-programming/reduction-example.png" alt="Fig.1 동일한 리덕션을 두번 보여준다. 함수의 인자는 단순한 플레이스 홀더일 뿐 다른 문자로도 대체할 수 있다." /></p>
<p><br/><br/></p>
<p>항상 Fig.1같은 그림을 가지고 있을 수는 없으므로 이제부터 모든 x에 y를 대입하겠다는 뜻으로 [y/x]를 사용하겠습니다. (λx.x)y → [y/x]x → y 인자의 명사들은 그 자체로는 아무 의미도 지니지 않습니다. 그저 자리만 차지하는 플레이스 홀더입니다. 함수가 계산될 때 인자가 어떻게 재배열되는지를 보여줄 뿐입니다. 그러므로 아래의 문자열들은 모두 같은 함수입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>t</mi><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>u</mi><mi mathvariant="normal">.</mi><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λz.z) ≡ (λy.y) ≡ (λt.t) ≡ (λu.u)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">u</span><span class="mord">.</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span></span></p>
<p>위와 같은 종류의 순수한 알파벳 교체는 알파 리덕션<sup>α-reduction</sup>이라고 불립니다.</p>
<h3 id="11-자유변수와-묶인-변수"><a class="markdownIt-Anchor" href="#11-자유변수와-묶인-변수"></a> 1.1 자유변수와 묶인 변수</h3>
<p>우리가 처리해야 하는 표현식이 파이프라인으로 이어진 람다 표현식 그림뿐이라면, 변수의 이름을 크게 고민하지 않아도 됩니다. 하지만, 우리는 그림이 아닌 상징적인 문자를 사용하고 있고, 반복 사용에 주의해야 합니다.</p>
<p>람다 대수에서 모든 명사는 정의 내에서만 묶여있습니다(대부분의 프로그래밍 언어처럼). 함수 λx.x에서 x는 λx 뒤에 있는 함수 정의부에서만 존재하므로, &quot;묶여&quot;있다고 할 수 있습니다. λ뒤에 있지 않은 명사를 &quot;자유변수&quot;<sup>free variable</sup>라고 부릅니다. 아래의 표현식에서 왼쪽에서 첫번째 표현식의 몸체에 있는 x는 첫번째 λ에 묶여있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>y</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λx.x)(λy.yx)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p>
<p>또, 왼쪽에서 두번쩨 표현식의 몸체에 있는 y는 두번째 λ에 묶여있습니다. 그리고 이때의 x는 자유변수입니다. 여기서 중요한 점은 두번째 표현식의 x는 첫번째 식의 x와는 별개로 받아드려야 한다는 것입니다. 이 규칙은 Fig.2의 함수 적용식과 리덕션에 직접 파이프라인을 그려보면 쉽게 이해할 수 있습니다.</p>
<p>Fig.2에서는 어떻게 상직적인 표현식을(첫번째 줄) 묶인 인자가 함수 몸체 내부의 새로운 위치로 이동하는 회로의 한 종류로 해석하는 지를 보여줍니다.</p>
<p><img data-src="/img/functional-programming/plumbling-of-expression.png" alt="Fig.2 차례로, 함수 적용식, 파이프라인으로 연결된 상직적인 표현식, 결과 리덕션" /></p>
<p>아래의 세가지 경우에서, &lt;name&gt;이라는 변수는 공식적으로 표현식 안의 자유변수라고 할 수 있습니다.</p>
<ul>
<li>&lt;name&gt;은 &lt;name&gt; 안에서 자유변수입니다. <br/> (Example: a는 a 안에서 자유변수)</li>
<li>&lt;name&gt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">≠</mi></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span></span></span></span>&lt;name1&gt;이면서 &lt;name&gt;이 &lt;exp&gt; 안에서 자유변수일 때, &lt;name&gt;은 λ&lt;name1&gt;.&lt;exp&gt; 안에서 자유변수입니다. <br/> (Example: y는 λx.y 안에서 자유변수)</li>
<li>&lt;name&gt;이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 안에서 자유변수이거나 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 안에서 자유변수라면, &lt;name&gt; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1 E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 안에서 자유변수입니다. <br/> (Example: x는 (λx.x)x 안에서 자유변수)</li>
</ul>
<p>아래의 두가지 경우 중 하나라면, 변수 &lt;name&gt;은 묶인 변수입니다.</p>
<ul>
<li>&lt;name&gt;=&lt;name1&gt;이거나 &lt;name&gt;이 &lt;exp&gt;에 묶여있을 때, &lt;name&gt;은 λ&lt;name1&gt;.&lt;exp&gt;에 묶인 변수입니다. <br/> (Example: x는 (λy.(λx.x)) 안에서 묶인 변수)</li>
<li>&lt;name&gt;이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>에 묶여있거나, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>에 묶여 있을 때, &lt;name&gt;은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>에 묶인 변수입니다. <br/>(Example: x 는 (λx.x)x 안에서 묶인 변수)</li>
</ul>
<p>주의할 점은, 같은 표현식에서 똑같은 문자의 식별자 각각이 묶인 변수일 수도 있고, 자유 변수일 수도 있다는 것입니다.</p>
<p><br/><br/></p>
<center>(λ<b>x</b>.<b>x</b>y)(λ<b>y</b>.<b>y</b>)</center>
<p><br/><br/></p>
<p>위의 표현식에서 첫번째 y는 괄호로 묶인 왼쪽의 부분 표현식에서 자유변수입니다. 하지만, 오른쪽의 부분 표현식에서는 묶인 변수입니다. 그러므로 전체 표현식에서 y는 자유변수이면서 묶인 변수로 나타납니다. (위의 식에서 굵은 글씨는 묶인 변수들을 나타냅니다.)</p>
<h3 id="12-대입"><a class="markdownIt-Anchor" href="#12-대입"></a> 1.2 대입</h3>
<p>표준 람다 대수를 처음 공부할 때 더욱 헷갈리는 부분은 함수에 이름을 붙이지 않는다는 것입니다. 람다 대수에서는 함수를 적용할 때마다 함수의 정의를 모두 써서 계산해야 합니다. 그러나 표기를 좀 더 쉽게 하기 위해서 영어 대문자와 십진수같은 다른 문자들도 사용할 것입니다. 항등함수를 예시로 들자면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>라는 문자를 항등함수 (λx.x)의 대체어로 사용할 것입니다.</p>
<p>항등함수에 항등함수를 적용한 적용식은 아래와 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>I</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">II ≡ (λx.x)(λx.x)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 적용식에서 첫번째 괄호로 묶인 표현식의 몸체에 있는 x는 두번째 괄호로 묶인 표현식의 몸체에 있는 x와는 독립적입니다. 위의 표현식을 아래와 같이 쓸 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>I</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">II ≡ (λx.x)(λz.z)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 적용식을 정리해 보겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>I</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">II ≡ (λx.x)(λz.z)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>x</mi><mo stretchy="false">]</mo><mi>x</mi><mo>=</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo>≡</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">[λz.z/x]x = λz.z ≡ I
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span></span></p>
<p>즉, 또다시 산출되는 항등함수를 볼 수 있습니다.</p>
<p><img data-src="/img/functional-programming/free-variable-substitute.png" alt="Fig.3 자유 변수는 같은 문자의 변수가 묶인 하위 표현식에는 대입할 수 없다. 그러므로 새로운 파이프라인이 생성된다." /></p>
<p>대입을 사용해서 식을 정리할 때 주의해야 할 점이 있습니다. 식을 대입하는 과정에서 자유변수를 묶인 변수와 혼동하면 안된다는 것입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">(λx.(λy.xy))y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p>
<p>위의 표현식에서 괄호 안에 있는 식에서는 y가 묶인 변수입니다. 하지만 괄호 밖의 가장 오른쪽 y는 자유변수입니다. 부적절하게 변수를 대입하면, 아래와 같은 오류를 범할 수도 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>y</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λx.(λy.xy))y = (λy.yy)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p>
<p>묶인 변수인 y를 t로 다시 선언함으로서 정확한 정리를 얻을 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>y</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λx.(λt.xt))y = (λt.yt)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span></span></p>
<p>그러므로, 함수 λx.&lt;exp&gt;를 E에 적용하려고 한다면, &lt;exp&gt; 안에 있는 모든 x에 E를 대입해야 합니다. 만약 대입할때, 자유변수 E와 같은 문자를 쓰는 묶인 변수 E가 &lt;exp&gt;안에 존재한다면, 대입법을 사용하기 전에 다른 문자로 바꿔주어야 합니다. 예시로 하나의 표현식에 인자 x와 y가 결합된 표현식을 보겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">(λx.(λy.(x(λx.xy))))y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p>
<p>위의 표현식의 몸체는 아래의 식입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λy.(x(λx.xy)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 표현식을 대입법으로 정리할때, 첫번째로 나오는 x만이 y를 대입할 수 있습니다. 그러므로 대입을 진행하기 전에 묶인 변수 y를 다른 이름으로 바꾸어야 합니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">/</mi><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>t</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>t</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[y/x](λt.(x(λx.xt))) = (λt.(y(λx.xt)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>일반적인 리덕션으로 식을 정리하려고 한다면 적용식의 가장 왼쪽의 표현식부터 정리해야 합니다. 그리고 더 리덕션할 수 없을 때까지 계속해야 합니다.</p>
<h2 id="2-산술연산"><a class="markdownIt-Anchor" href="#2-산술연산"></a> 2. 산술연산</h2>
<p>프로그래밍 언어라면 당연히 선술연산 정도는 할 수 있어야 합니다. 람다 대수에서 수는 0을 의미하는 zero부터 시작해서, 1을 의미하는 “suc(zero)” 2를 의미하는 &quot;suc(suc(zero))&quot;와 같이 표현합니다. 람다 대수에서 무엇인가를 표현하려면 새로운 함수로 정의해야 합니다. 숫자도 예외는 아닙니다. 즉, 람다대수에서는 숫자도 함수입니다. 숫자는 다음의 접근법을 통해 함수로 표현됩니다:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≡</mo><mi>λ</mi><mi>s</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0 ≡ λs.(λz.z)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 함수는 두개의 인자 s와 z로 이루어져 있습니다. 위의 함수처럼 두 개 이상의 인자를 갖는 함수는 아래와 같이 축약할 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mi>s</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">λsz.z
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></span></p>
<p>위의 표현식을 적용할 때에는, s에 먼저 값을 대입한 후, z에 값을 대입합니다. 위 표현을 이용해서 자연수를 다음과 같이 나타낼 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≡</mo><mi>λ</mi><mi>s</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>s</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1 ≡ λsz.s(z)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≡</mo><mi>λ</mi><mi>s</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2 ≡ λsz.s(s(z))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>≡</mo><mi>λ</mi><mi>s</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3 ≡ λsz.s(s(s(z)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow><annotation encoding="application/x-tex">⋮
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></span></p>
<blockquote>
<p>이해가 안되신다고요? 정상입니다.<br />
왜 저렇게 나타내는 지는 앞으로 나오는 설명을 읽다보면 인정하게 됩니다.<br />
지금은 그냥 그런갑다 합시다.</p>
<p>λsz.s(z)는 두가지 의미로 해석할 수 있습니다.<br />
(λsz.s)를 z에 적용한 식으로 해석할 수도 있고<br />
sz를 인자로 받는 함수의 몸체가 s(z)라고도 해석할 수 있습니다.<br />
본문을 읽다보니 관례적으로 (λsz.s)(z)처럼 괄호로 묶어서 표현하지 않는 이상 몸체의 일부라고 해석하나 봅니다. (정확하지는 않습니다.)</p>
</blockquote>
<p><br/><br/></p>
<p>이런 방식으로 숫자를 정의하는 것의 이점은, 어떤 함수 f를 a에 연속으로 적용하려고 할 때 표현하기 편하다는 것입니다. 예시로, 함수 f를 a에 3번 적용하는 표현식은 다음과 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>f</mi><mi>a</mi><mo>→</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>s</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>f</mi><mi>a</mi><mo>→</mo><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3f a → (λsz.s(s(sz)))f a → f(f(f a))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>이런 방식으로 숫자를 정의하는 것은 다른 언어의 “FOR i=1 to 3”과 비슷한 기능을 제공합니다. 0이라는 숫자를 인자 f와 a에 적용하면 a를 산출합니다. (0fa ≡ (λsz.z)fa → a) 이 과정을 말로 표현하자면, 인자 a에 함수 f를 0번 적용하면, 변하지 않은 a를 산출한다는 것입니다.</p>
<p>자연수 다음으로 알아볼 함수는 계승자<sup>successor</sup> 함수입니다. 계승자 함수는 숫자 n을 받아서 n+1을 반환하는 함수입니다.(물론 여기서 말하는 n은 람다대수 체계의 n입니다.) 이 함수는 아래와 같이 정의됩니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>≡</mo><mi>λ</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">(</mo><mi>n</mi><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S ≡ λnab.a(nab)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 정의가 이상하게 보일지는 몰라도 잘 작동합니다. 예시로 계승자 함수를 이전에 보았던 zero에 적용한 적용식은 아래와 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mn>0</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">(</mo><mi>n</mi><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S0 ≡ (λnab.a(nab))0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">0</span></span></span></span></span></p>
<p>위의 식에서 인자 n의 자리에 0을 대입하면 다음과 같은 리덕션 결과를 얻을 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">(</mo><mn>0</mn><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo>→</mo><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>≡</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">λab.a(0ab) → λab.a(b) ≡ 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord">0</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>이전에 1이라고 정의했던 표현식을 얻을 수 있습니다. (묶인 변수의 문자는 크게 의미를 가지지 않는다고 했던 것을 떠올려 주시기 바랍니다.)</p>
<p>계승자 함수를 1에 적용하면, 2를 산출할 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mn>1</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">(</mo><mi>n</mi><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S1 ≡ (λnab.a(nab))1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">1</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">(</mo><mn>1</mn><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">(</mo><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo>≡</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">λab.a(1ab) = λab.a(ab) ≡ 2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord">1</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p>숫자 1 즉, (λsz.s(z))를 인자 a와 b에 적용한 유일한 이유는, 숫자의 정의 안의 변수의 문자를 a와 b로 바꾸기 위해서라는 것을 알아주시기 바랍니다.</p>
<h3 id="21-덧셈"><a class="markdownIt-Anchor" href="#21-덧셈"></a> 2.1 덧셈</h3>
<p>덧셈은, 숫자 1의 정의의 몸체안에 있는 sz를 s에 z를 적용한 적용식으로 해석함으로서 얻을 수 있습니다. 2와 3을 더하려고 한다면, 계승자 함수를 3에 2번 적용하면 되는 것입니다.</p>
<p>2+3을 순서대로 계산해 보겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>S</mi><mn>3</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>s</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>S</mi><mn>3</mn><mo>→</mo><mi>S</mi><mo stretchy="false">(</mo><mi>S</mi><mn>3</mn><mo stretchy="false">)</mo><mo>→</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo>→</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">2S3 ≡ (λsz.s(sz)))S3 → S(S3) → · · · → 5
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span></span></p>
<p>m 더하기 n을 계산하는 일반적인 방법은 표현식 mSn입니다.</p>
<h3 id="22-곱셈"><a class="markdownIt-Anchor" href="#22-곱셈"></a> 2.2 곱셈</h3>
<p>두 숫자 x와 y의 곱셈은 아래의 함수를 사용해서 알 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi>a</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">(</mo><mi>y</mi><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λxya.x(ya))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">a</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>3과 3의 곱은 아래와 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi>a</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">(</mo><mi>y</mi><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mn>33</mn></mrow><annotation encoding="application/x-tex">(λxya.x(ya))33
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">a</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">3</span><span class="mord">3</span></span></span></span></span></p>
<p>위의 식을 리덕션해서 예상한 결과인 9를 얻을 수 있습니다.</p>
<blockquote>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi>a</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">(</mo><mi>y</mi><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mn>33</mn><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>a</mi><mi mathvariant="normal">.</mi><mn>3</mn><mo stretchy="false">(</mo><mn>3</mn><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λxya.x(ya))33 = (λa.3(3a))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">a</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">3</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord">.</span><span class="mord">3</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>s</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3 = (λsb.s(s(s(b))))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>a</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>s</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>3</mn><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>→</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mn>3</mn><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>3</mn><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>3</mn><mi>a</mi><mo stretchy="false">)</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λa.(λsb.s(s(sb)))(3a)) → (λab.(3a)((3a)((3a)b)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
</blockquote>
<p>이 함수가 어떻게 3과 3의 곱을 연산하는지 아해하기 위해서 아래의 다이어그램을 봐 주십시오. 첫번째 적용식 (3a)는 Fig.4의 왼쪽에서 계산됩니다. a에 3을 적용한 적용식이 a를 세번 함수의 인자에 적용하는 새로운 함수를 만든 효과를 가지는 것을 주목해 주시기 바랍니다.</p>
<p><img data-src="/img/functional-programming/three-times-three.png" alt="Fig.4 왼쪽: 인자 a에 적용된 숫자 3은 새로운 함수를 만든다. 오른쪽: 3a에 적용된 함수 3의 파이프라인들이다. 결국은 b에 적용된다." /></p>
<p>이제 함수 3을 (3a)에 적용하면, Fig.4의 오른쪽에 있는 세개의 함수 복사본을 만들어냅니다.</p>
<p>우리가 같은 함수 세개의 &quot;층&quot;을 가지고 있는것을 주목해 주시기 바랍니다. 각각의 함수는 더 낮은 함수를 함수 a를 삼중 연산한 함수에 인자로 흡수합니다. 총 9번 적용함으로써 숫자 9를 산출합니다.</p>
<h2 id="3-조건문"><a class="markdownIt-Anchor" href="#3-조건문"></a> 3. 조건문</h2>
<p>아래의 두 함수를 참과 거짓의 값을 가진다고 하겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>≡</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">T ≡ λxy.x
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault">x</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo>≡</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">F ≡ λxy.y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p>
<p>첫번째 함수는 두개의 인자를 받아서 첫번째 인자를 반환하는 함수이고, 두번째 함수는 두번째 인자를 반환하는 함수입니다.</p>
<h3 id="31-논리-연산자"><a class="markdownIt-Anchor" href="#31-논리-연산자"></a> 3.1 논리 연산자</h3>
<p>위의 T와 F를 이용해서 논리 연산자를 정의하는 것이 가능합니다.</p>
<p>AND 함수의 구현은 다음과 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∧</mo><mo>≡</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>y</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>u</mi><mi>v</mi><mi mathvariant="normal">.</mi><mi>v</mi><mo stretchy="false">)</mo><mo>≡</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>y</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">∧ ≡ λxy.xy(λuv.v) ≡ λxy.xyF
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∧</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>AND 함수의 동작 원리는 다음과 같습니다. 만약 x가 참이라면, 함수의 논리값은 y와 같습니다. 만약 x가 거짓이라면, xyF에서 두번째 인자인 F를 반환할 것이므로 y의 값에 관계없이 거짓을 산출합니다.</p>
<p>OR 함수의 구현은 다음과 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∨</mo><mo>≡</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>u</mi><mi>v</mi><mi mathvariant="normal">.</mi><mi>u</mi><mo stretchy="false">)</mo><mi>y</mi><mo>≡</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>T</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">∨ ≡ λxy.x(λuv.u)y ≡ λxy.xTy
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∨</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">.</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p>
<p>OR 함수의 동작 원리는 다음과 같습니다. 만약 x가 참이라면 OR은 참입니다. 만약 x가 거짓이라면 함수의 논리값은 두번째 인자인 y의 논리값을 따릅니다.</p>
<p>부정 함수의 구현은 다음과 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><mo>≡</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>u</mi><mi>v</mi><mi mathvariant="normal">.</mi><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">)</mo><mo>≡</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>F</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">¬ ≡ λx.x(λuv.v)(λab.a) ≡ λx.xFT
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></span></p>
<p>예시로 부정함수를 &quot;참&quot;에 적용해 보겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><mi>T</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>u</mi><mi>v</mi><mi mathvariant="normal">.</mi><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>c</mi><mi>d</mi><mi mathvariant="normal">.</mi><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">¬T ≡ (λx.x(λuv.v)(λab.a))(λcd.c)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>F</mi><mi>T</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>c</mi><mi>d</mi><mi mathvariant="normal">.</mi><mi>c</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>u</mi><mi>v</mi><mi mathvariant="normal">.</mi><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>a</mi><mi>b</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>u</mi><mi>v</mi><mi mathvariant="normal">.</mi><mi>v</mi><mo stretchy="false">)</mo><mo>≡</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">TFT ≡ (λcd.c)(λuv.v)(λab.a) = (λuv.v) ≡ F
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord">.</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>&quot;거짓&quot;을 산출하는 것을 볼 수 있습니다.</p>
<p>위의 세가지 논리함수로 무장하면 어떤 다른 논리 함수도 구현할 수 있습니다. 또 어떠한 회로도 피드백 없이 구현할 수 있습니다. (피드백은 재귀 부분에서 다루겠습니다.)</p>
<h3 id="32-조건-검사"><a class="markdownIt-Anchor" href="#32-조건-검사"></a> 3.2 조건 검사</h3>
<p>한 프로그래밍 언어에서 어떤 숫자가 0이라면 참을 반환하고 아니라면 거짓을 반환하는 함수가 있다면 매우 편리합니다. 뒤에 나오는 함수 Z가 이 조건을 만족합니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mo>≡</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>F</mi><mi mathvariant="normal">¬</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">Z ≡ λx.xF¬F
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>이 함수가 어떻게 동작하는지 이해하기 위해서 아래의 식을 확인해 주시기 바랍니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi>f</mi><mi>a</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>s</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">)</mo><mi>f</mi><mi>a</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">0fa ≡ (λsz.z)fa = a
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span></span></p>
<p>위의 표현은 인자로 받은 a에 f를 0번 적용해서 a를 산출했다고 해석할 수 있습니다. 또 한편으로는 함수 F에 어떤 인자를 대입하던 항등함수를 산출한다는 것도 봐주시기 바랍니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>a</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo stretchy="false">)</mo><mi>a</mi><mo>=</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo>≡</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">Fa ≡ (λxy.y)a = λy.y ≡ I
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span></span></p>
<p>이제 함수 Z가 올바르게 동작하는지 확인할 수 있습니다. 함수 Z에 0을 적용하면 아래와 같이 T를 산출해 냅니다. F를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi></mrow><annotation encoding="application/x-tex">¬</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">¬</span></span></span></span>에 0번 적용하면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi></mrow><annotation encoding="application/x-tex">¬</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">¬</span></span></span></span>를 반환하기 때문입니다. (0Fa = a)</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mn>0</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>F</mi><mi mathvariant="normal">¬</mi><mi>F</mi><mo stretchy="false">)</mo><mn>0</mn><mo>=</mo><mn>0</mn><mi>F</mi><mi mathvariant="normal">¬</mi><mi>F</mi><mo>=</mo><mi mathvariant="normal">¬</mi><mi>F</mi><mo>=</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">Z0 ≡ (λx.xF¬F)0 = 0F¬F = ¬F = T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></span></p>
<p>Z를 0보다 큰 수 N에 적용하면 항상 F를 산출합니다. F를 표현식에 한번 이상 적용하면 항상 항등함수가 산출되기 때문입니다. (Fa = I)</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mi>N</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>F</mi><mi mathvariant="normal">¬</mi><mi>F</mi><mo stretchy="false">)</mo><mi>N</mi><mo>=</mo><mi>N</mi><mi>F</mi><mi mathvariant="normal">¬</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">ZN ≡ (λx.xF¬F)N = NF¬F
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>그러므로 위의 식에서 N이 0보다 큰 어떤 수라면 항상 F를 산출합니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>F</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">IF → F
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<h3 id="33-선행자-함수"><a class="markdownIt-Anchor" href="#33-선행자-함수"></a> 3.3 선행자 함수</h3>
<p>위에서 설명한 함수들로 선행자 함수를 정의할 수 있습니다. n의 선행자를 찾으려고 할때 생각할 수 있는 일반적인 방법은, (n, n−1)쌍을 만든 다음 뒤쪽의 원소 n-1을 결과로 고르는 것입니다.</p>
<p>람다 대수에서 쌍 (a,b)는 다음과 같이 함수로 표현할 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(λz.zab)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></span></p>
<p>첫번째 항목을 추출하고 싶을때는, 이 함수를 함수 T에 적용하고 두번째 항목을 추출하고 싶을때는 함수 F에 적용할 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mi>T</mi><mo>=</mo><mi>T</mi><mi>a</mi><mi>b</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">(λz.zab)T = Tab = a
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mi>F</mi><mo>=</mo><mi>F</mi><mi>a</mi><mi>b</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">(λz.zab)F = Fab = b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p>
<p>다음으로 이어질 함수는 쌍 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n,n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>을 인자 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>로 받아서 쌍 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n+1,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>을 생성하는 함수입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>p</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">(</mo><mi>p</mi><mi>T</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>p</mi><mi>T</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Φ ≡ (λpz.z(S(pT))(pT))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Φ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">pT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>라는 하위 표현식은 쌍 p의 첫번째 요소를 추출합니다. 이 요소를 이용해서 새로 만들어질 쌍의 첫번째 원소는 원본 원소의 값에서 1만큼 증가한 값이고, 두번째 원소는 단순히 원본 원소의 값이 복제된 값입니다.</p>
<p>숫자 n의 선행자는 함수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">Φ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Φ</span></span></span></span>를 쌍 (λ.z00)에 n번 적용하고 새로운 쌍의 두번째 요소를 고르는 것으로 얻을 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>n</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>z</mi><mi mathvariant="normal">.</mi><mi>z</mi><mn>00</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P ≡ (λn.(nΦ(λz.z00))F)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></span></p>
<p>이 시도에서 0의 선행자는 0임에 주목해 주시기 바랍니다. 이 성질은 다른 함수들의 정의에 유용합니다.</p>
<h3 id="34-등호와-부등호"><a class="markdownIt-Anchor" href="#34-등호와-부등호"></a> 3.4 등호와 부등호</h3>
<p>선행자 함수를 벽돌로 삼아서 x가 y보다 크거나 같은지 시험하는 함수를 정의할 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mi>Z</mi><mo stretchy="false">(</mo><mi>x</mi><mi>P</mi><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G ≡ (λxy.Z(xPy))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>만약 y에 선행자 함수를 x번 적용한 결과가 0이라면, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>≥</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x ≥ y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>가 참임을 알 수 있습니다.</p>
<p>만약 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>≥</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x ≥ y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>이고 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>≥</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y ≥ x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>라면, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x = y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>입니다. 이 정리는 이어지는 함수 E의 정의의 기반이 됩니다. E는 두 숫자의 값이 같은 지를 알아보는 함수입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi>y</mi><mi mathvariant="normal">.</mi><mo>∧</mo><mo stretchy="false">(</mo><mi>Z</mi><mo stretchy="false">(</mo><mi>x</mi><mi>P</mi><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>Z</mi><mo stretchy="false">(</mo><mi>y</mi><mi>P</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E ≡ (λxy. ∧ (Z(xPy))(Z(yPx)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>비슷한 방법으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&gt;</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x &gt; y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&lt;</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x &lt; y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">≠</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">x \neq y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>를 시험하는 함수를 정의할 수 있습니다.</p>
<h2 id="4-재귀"><a class="markdownIt-Anchor" href="#4-재귀"></a> 4. 재귀</h2>
<p>재귀 함수는 람다 대수에서 함수 y를 호출하고 자기 자신을 재생산하는 함수를 사용해서 정의할 수 있습니다. 아래의 함수 Y를 통해 이해도를 높일 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>y</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo stretchy="false">(</mo><mi>x</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo stretchy="false">(</mo><mi>x</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y ≡ (λy.(λx.y(xx))(λx.y(xx)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">.</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>이 함수를 함수 R에 적용하면 아래와 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mi>R</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>R</mi><mo stretchy="false">(</mo><mi>x</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>R</mi><mo stretchy="false">(</mo><mi>x</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">YR ≡ (λx.R(xx))(λx.R(xx))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 식을 더 정리하면 아래와 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>R</mi><mo stretchy="false">(</mo><mi>x</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>R</mi><mo stretchy="false">(</mo><mi>x</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R((λx.R(xx))(λx.R(xx))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 과정은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mi>R</mi><mo>→</mo><mi>R</mi><mo stretchy="false">(</mo><mi>Y</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">YR → R(YR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span>를 의미합니다. 그 말인즉슨, 함수 R은 재귀호출인 YR을 다시 첫번째 인자로 사용하는 함수로 계산됩니다.</p>
<p>한 무한반복을 예로들자면, YI는 I(YI)로 정리할 수 있습니다. 그리고 YI가 산출되고 이 과정이 무한반복됩니다. (I는 항등함수)</p>
<p>더 쓸만한 함수는 1부터 n까지의 자연수를 더하는 함수입니다. 이 함수를 정의하기 위해서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mi>i</mi><mo>=</mo><mi>n</mi><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>i</mi></mrow><annotation encoding="application/x-tex">\sum_{i=0}^n i = n + \sum_{i=0}^{n-1} i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span></span></span></span>의 재귀적인 정의를 이용할 수 있습니다. 아래의 R의 정의를 사용해봅시다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>λ</mi><mi>r</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>Z</mi><mi>n</mi><mn>0</mn><mo stretchy="false">(</mo><mi>n</mi><mi>S</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>P</mi><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R ≡ (λrn.Zn0(nS(r(Pn))))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault">n</span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>위의 식의 정의 중에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Zn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault">n</span></span></span></span>은 숫자 n을 검사했을때, n이 0이라면 전체 합이 0이라는 것을 나타냅니다. n이 0이 아니라면 계승자 함수가 (r(Pn))에 n번 적용됩니다. 즉, n+r(n-1)을 반환하는 것입니다. 여기서 r은 R입니다. 즉, r은 R의 재귀호출입니다.</p>
<p>람다 대수에서 함수는 이름을 가지지 않습니다. 그런데 어떻게 위의 표현식의 r이 R의 재귀 호출임을 알 수 있는지 아십니까? 모릅니다. 그렇기 때문에 재귀 연산자인 Y를 사용해야 합니다. 예를들어 숫자를 0부터 3까지 더한다고 합시다. 필수적인 연산자들은 아래의 호출에 의해 실행됩니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mi>R</mi><mn>3</mn><mo>→</mo><mi>R</mi><mo stretchy="false">(</mo><mi>Y</mi><mi>R</mi><mo stretchy="false">)</mo><mn>3</mn><mo>→</mo><mi>Z</mi><mn>30</mn><mo stretchy="false">(</mo><mn>3</mn><mi>S</mi><mo stretchy="false">(</mo><mi>Y</mi><mi>R</mi><mo stretchy="false">(</mo><mi>P</mi><mn>3</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">YR3 → R(YR)3 → Z30(3S(YR(P3)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord">3</span><span class="mord">0</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord">3</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>3은 0이 아니기 때문에 위의 식은 아래의 식으로 정리할 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>S</mi><mo stretchy="false">(</mo><mi>Y</mi><mi>R</mi><mo stretchy="false">(</mo><mi>P</mi><mn>3</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3S(YR(P3))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord">3</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>그 말인즉슨, 0부터 3까지의 합은 3 더하기 0부터 (3의 선행자)(즉 2)까지의 합과 같다는 말입니다. YR의 성공적인 재귀계산이 올바른 최종결과로 인도할 것입니다.</p>
<p>위에서 정의한 함수에서 인자가 0이 되면 재귀가 멈춘다는 것에 주목해 주시기 바랍니다. 최종 결과는 다음과 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>S</mi><mo stretchy="false">(</mo><mn>2</mn><mi>S</mi><mo stretchy="false">(</mo><mn>1</mn><mi>S</mi><mn>0</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3S(2S(1S0))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord">1</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">0</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>최종 결과는 6입니다.</p>
<h2 id="5-독자를-위한-연습문제"><a class="markdownIt-Anchor" href="#5-독자를-위한-연습문제"></a> 5. 독자를 위한 연습문제</h2>
<ol>
<li>부등호 &quot;&lt;&quot;와 &quot;&gt;&quot;를 두개의 인자를 받는 함수로 정의하라.</li>
<li>자연수의 쌍을 이용해서 양과 음의 정수를 정의하라.</li>
<li>정수의 덧셈과 뺄셈을 정의하라.</li>
<li>양의 정수의 나눗셈을 재귀적으로 정의하라.</li>
<li>함수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mi>n</mi><mo separator="true">⋅</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n! = n · (n - 1)· · · 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span></span>를 재귀적으로 정의하라.</li>
<li>유리수를 정수의 쌍들로 정의하라.</li>
<li>유리수의 덧셈 뺄셈 곱셈을 정의하라.</li>
<li>숫자들의 list를 나타내는 자료구조를 정의하라.</li>
<li>한 list의 첫번째 원소를 추출하는 함수를 정의하라.</li>
<li>list의 원소의 갯수를 세는 함수를 재귀적으로 정의하라.</li>
<li>λ대수를 이용해서 튜링머신을 묘사할 수 있겠는가?</li>
</ol>
<h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2>
<p>[1] P.M. Kogge, The Architecture of Symbolic Computers, McGraw-Hill, New york 1991, chapter 4.</p>
<p>[2] G. Michaelson, An Introduction to Functional Programming through λcalculus, Addison-Wesley, Wokingham, 1988.</p>
<p>[3] G. Revesz, Lambda-Calculus Combinators and Functional Programming, Cambridge University Press, Cambridge, 1988, chapters 1-3.</p>
<p><br/><br/><br/><br/></p>
<blockquote>
<p>긴 글 읽어주셔서 감사합니다. 오번역 및 기타 의견 댓글로 남겨주시면 감사하겠습니다.</p>
</blockquote>
]]></content>
      <categories>
        <category>함수형 프로그래밍</category>
      </categories>
      <tags>
        <tag>함수형 프로그래밍</tag>
        <tag>람다 대수</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT 메뉴 및 목차 커스터마이징</title>
    <url>/hexo-next/subtle-word-change/</url>
    <content><![CDATA[<p><img data-src="/img/hexonext/next-logo.png" alt="NexT 로고" /></p>
<h2 id="바꾸고-싶은-번역"><a class="markdownIt-Anchor" href="#바꾸고-싶은-번역"></a> 바꾸고 싶은 번역</h2>
<p>NexT 테마는 한국어를 지원하는 테마입니다.<br />
그래서 영어로는 Home, Tag, Archive인 메뉴들을 한국어로 홈, 태그, 아카이브로 렌더링할 수 있습니다.</p>
<p><img data-src="/img/hexonext/menu-original.png" alt="기존의 메뉴" /></p>
<p>그런데, 기존의 NexT테마가 번역한 단어들이 제 마음에는 들지 않았습니다.</p>
<p>About이 덩그러니 영어로 남아있는 것도 싫었고,<br />
아카이브라는 단어도 한글로는 조금 어색하다고 생각했습니다.<br />
그래서 테마 안에 있는 소스코드를 커스터마이징 하기로 했습니다.</p>
<h2 id="메뉴-글씨-커스터마이징"><a class="markdownIt-Anchor" href="#메뉴-글씨-커스터마이징"></a> 메뉴 글씨 커스터마이징</h2>
<p>node_modules/hexo-theme-next/languages/<br />
위 경로의 폴더를 열어보면 ko.yml이 있습니다.</p>
<p><img data-src="/img/hexonext/langyml.png" alt="ko.yml" /></p>
<p>저는 아래와 같이 수정했습니다.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">프로필</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">전체글</span> <span class="string">보기</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">overview:</span> <span class="string">프로필</span></span><br></pre></td></tr></table></figure>
<p>그렇게 지금과 같은 메뉴와 목차를 만들었습니다.</p>
<p><img data-src="/img/hexonext/index-changed.png" alt="수정본" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>Hexo/NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.1 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-1/</url>
    <content><![CDATA[<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>문제풀이를 보고 예상한 결과가 나왔다면 굳이 직접 코딩할 필요는 없다고 생각합니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><img data-src="/img/sicp/chapter-1/exercise-1-1.png" alt="예제 코드 실행 결과" /></p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.10 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-10/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음은 애커만 함수를 나타낸 프로시저이다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">A</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> y <span class="number">0</span>) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> x <span class="number">0</span>) (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> y))</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> y <span class="number">1</span>) <span class="number">2</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">A</span> (<span class="name"><span class="built_in">-</span></span> x <span class="number">1</span>)</span><br><span class="line">                 (<span class="name">A</span> x (<span class="name"><span class="built_in">-</span></span> y <span class="number">1</span>))))))</span><br></pre></td></tr></table></figure>
<p>아래 식의 값은 무엇인가?</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">A</span> <span class="number">1</span> <span class="number">10</span>)</span><br><span class="line">(<span class="name">A</span> <span class="number">2</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name">A</span> <span class="number">3</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>다음 프로시저가 정의되어 있다고 하자.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> n) (<span class="name">A</span> <span class="number">0</span> n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">g</span> n) (<span class="name">A</span> <span class="number">1</span> n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">h</span> n) (<span class="name">A</span> <span class="number">2</span> n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">k</span> n) (<span class="name"><span class="built_in">*</span></span> <span class="number">5</span> n n))</span><br></pre></td></tr></table></figure>
<p>0보다 큰 정수n이 있을때 f,g,h 프로시저의 기능을 수학적으로 정의해 보라. 예를들어 (k n)은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">5n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>이다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>저는 처음에 이 문제를 풀때 어떻게 풀어야 하는 것인지 갈피를 못잡았습니다. 그런데, 머리로만 하려 하지 말고 노트를 펴고 하나 하나 계산하다 보니 의미를 알 수 있게 되었습니다. 여러분들도 노트를 펴고 차분히 계산해 보면서 수학적 의미를 파악하셨으면 좋겠습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>수식이 난해할 수 있으니 천천히 읽어주시기 바랍니다.</p>
<h3 id="a-a-0-n"><a class="markdownIt-Anchor" href="#a-a-0-n"></a> a. (A 0 n)</h3>
<p>우선 (A 0 n)부터 하나 하나 계산해 보겠습니다.<br />
(A 0 n)의 의미는 자명합니다. 항상 (* 2 y)를 반환하기 때문에, (A 0 n)은 2n입니다.</p>
<h3 id="b-a-1-n"><a class="markdownIt-Anchor" href="#b-a-1-n"></a> b. (A 1 n)</h3>
<p>(A 1 1)부터 차례차례 계산해 보겠습니다.<br />
(A 1 1) = 2<br />
(A 1 2) = (A 0 (A 1 1)) = (A 0 2) = 4<br />
(A 1 3) = (A 0 (A 1 2)) = (A 0 4) = 8<br />
(A 1 4) = (A 0 (A 1 3)) = (A 0 8) = 16</p>
<p>규칙이 눈에 보이실 겁니다.<br />
(A 1 n)을 g(n)이라 한다면, g(n)은 (A 0 g(n-1))이 되는 것입니다.<br />
(A 0 n)이 2n이므로 g(n)은 결국 2g(n-1) 즉, 이전 결과를 2배하는 함수입니다.<br />
g(1)이 2이므로 g(n) = (A 1 n) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>입니다.</p>
<h3 id="c-a-2-n"><a class="markdownIt-Anchor" href="#c-a-2-n"></a> c. (A 2 n)</h3>
<p>(A 2 1)부터 차례차례 계산해 보겠습니다.<br />
(A 2 1) = 2<br />
(A 2 2) = (A 1 (A 2 1)) = (A 1 2) = 4<br />
(A 2 3) = (A 1 (A 2 2)) = (A 1 4) = 16<br />
(A 2 4) = (A 1 (A 2 3)) = (A 1 16) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>규칙이 눈에 보이실 겁니다.<br />
(A 2 n)을 h(n)이라 한다면, h(n)은 (A 1 h(n-1))이 되는 것입니다.<br />
(A 1 n)이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>이므로 h(n) = (A 2 n) = (A 1 h(n-1)) = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">2^{h(n-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span><br />
h(1)이 2이므로 h(n)을 수식으로 나타낸다면, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><msup><mn>2</mn><msup><mn>2</mn><msup><mn>2</mn><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup></msup></msup></msup></mrow><annotation encoding="application/x-tex">2^{2^{2^{2^{...(n)}}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4437em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.4437em;"><span style="top:-3.4437em;margin-right:0.05em;"><span class="pstrut" style="height:3.0807em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.5438571428571428em;"><span style="top:-3.543857142857143em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:3.112857142857143em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.5579999999999998em;"><span style="top:-3.558em;margin-right:0.1em;"><span class="pstrut" style="height:3.154em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.154em;"><span style="top:-3.154em;margin-right:0.1em;"><span class="pstrut" style="height:2.75em;"></span><span class="mord mtight"><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>라고 표현할 수 있을것 같습니다.</p>
<p>미리보는 결론에서 말했듯이 처음에는 난감하게 보였던 이 문제는 하나하나 노트에 계산해서 풀면 쉽게 정리되는 느낌을 받을 수 있었습니다.<br />
식을 해석하는 능력이 조금 상승한 것 같아서 기분이 좋습니다.</p>
<p>난해한 글 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.11 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-11/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&lt;</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n&lt;3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>일 때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n)=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이고, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n≥3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>일 때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>3</mn><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=f(n-1)+2f(n-2)+3f(n-3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>으로 정의한 함수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>가 있다. f의 프로시저를 되도는 프로세스가 나오도록 짜라. 아울러 반복 프로세스를 만들어내는 프로시저도 만들어 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>반복하는 프로세스를 구성할 때에는 (프로세스가 반복하는 로직, 베이스 케이스에서의 동작 확인) 이 두가지를 신경써서 구성해야 합니다. 또한 iter 내부의 인수를 조작하는 것으로 프로시저를 더 아름답게 만들 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>우선 두 프로시저에서 모두 사용할 계산 프로시저 calc를 만들었습니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>2</mn><mi>y</mi><mo>+</mo><mn>3</mn><mi>z</mi></mrow><annotation encoding="application/x-tex">x+2y+3z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">calc</span> x y z)</span><br><span class="line">  (<span class="name"><span class="built_in">+</span></span> x (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> y) (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> z)))</span><br></pre></td></tr></table></figure>
<p>첫번째 문제인 되도는 프로세스는 문제를 읽는 것만으로도 쉽게 구상할 수 있을 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> n <span class="number">3</span>)</span><br><span class="line">      n</span><br><span class="line">      (<span class="name">calc</span> (<span class="name">f</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)) (<span class="name">f</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">2</span>)) (<span class="name">f</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">3</span>)))))</span><br></pre></td></tr></table></figure>
<p>하지만 두번째 문제인 반복 프로세스를 만들 때에는 조금 고민을 할 필요가 있습니다.<br />
프로시저를 구상하면서 떠올린 저의 아이디어는 이렇습니다.</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n-3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>을 인자로 계속 물려주는 프로시저를 구상하면 되겠다.</li>
<li>또 index를 인자로 주어 index가 0부터 n까지 자라나도록 하면, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>부터 순서대로 계산하겠구나.</li>
<li>그러다가 index = n 인 시점에서 계산한 결과를 반환하면 되겠구나.</li>
</ul>
<p>그리곤 프로시저를 짜보았습니다. 미리 말씀드리지만 아래의 프로시저는 틀린 프로시저입니다. 왜 틀렸는지를 한번 생각해 보시길 바랍니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f-iter</span> n i temp1 temp2 temp3)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&lt;</span></span> n <span class="number">3</span>) n)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> n i) (<span class="name">calc</span> temp1 temp2 temp3))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">f-iter</span> n (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>) (<span class="name">calc</span> temp1 temp2 temp3) temp1 temp2))))</span><br></pre></td></tr></table></figure>
<p>위 프로시저가 틀린 이유는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n≥3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 일때 temp1 temp2 temp3의 값이 0부터 시작한다는 것입니다. 원래대로라면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n≥3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>이면서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>&lt;</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">i&lt;3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>인 구간에도 temp에 0이 아닌 i를 넘겨줘야 합니다. 이해가 안가신다면 아래의 수정된 코드를 잘 생각해 보시기 바랍니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">f-iter</span> n i temp1 temp2 temp3)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&lt;</span></span> n <span class="number">3</span>) n)</span><br><span class="line">          ((<span class="name"><span class="built_in">=</span></span> n i) (<span class="name">calc</span> temp1 temp2 temp3))</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> i <span class="number">3</span>)</span><br><span class="line">                    (<span class="name">f-iter</span> n (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>) i temp1 temp2)</span><br><span class="line">                    (<span class="name">f-iter</span> n (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>) (<span class="name">calc</span> temp1 temp2 temp3) temp1 temp2)))))</span><br><span class="line">  (<span class="name">f-iter</span> n <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p>위의 코드대로 실행해 보았더니 두 함수 모두 같은 결과를 도출하며 잘 작동하는 것을 확인할 수 있습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-11-1.png" alt="러프하게 구현한 프로시저" /></p>
<p>그런데 문득 한번 더 코드를 고칠 수 있겠다는 생각이 들었습니다. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n≥3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>인 상황에서 굳이 if문을 한번 더 써서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>&lt;</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">i&lt;3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>을 검사하는 것 보다는, 처음부터 i는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n≥3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>인 상황에서만 쓴다고 생각하고 i를 3으로 놓고 f-iter의 다른 인자들을 수정하면 더 효율적으로 프로시저를 짤 수 있을 것 같았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">f-iter</span> n i temp1 temp2 temp3)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&lt;</span></span> n <span class="number">3</span>) n)</span><br><span class="line">          ((<span class="name"><span class="built_in">=</span></span> n i) (<span class="name">calc</span> temp1 temp2 temp3))</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> (<span class="name">f-iter</span> n (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>) (<span class="name">calc</span> temp1 temp2 temp3) temp1 temp2))))</span><br><span class="line">  (<span class="name">f-iter</span> n <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-11-2.png" alt="한번 더 다듬은 프로시저" /></p>
<p>이번 문제로 얻은 교훈은 반복하는 프로세스를 구성할 때, 베이스 케이스에서의 동작에 좀 더 신경을 써야한다는 것입니다. 다음부터 반복하는 프로세스를 구성할 때에는 (프로세스가 반복하는 로직, 베이스 케이스에서의 동작 확인) 이 두가지를 신경써서 구성하도록 하겠습니다. 또한 내부의 iter프로시저의 인수를 조작하는 것으로 좀 더 아름다운 코딩을 할 수 있다는 것도 마음에 담아가겠습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.12 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-12/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><span style="color:#999">한국에서 교육을 받은 학생이라면, 파스칼 삼각형이 무엇인지는 당연히 알 것이라 생각합니다.</span><br />
파스칼 삼각형을 만드는 프로시저를 짜되, 되도는 프로세스가 되도록 만들라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>문제는 쉽습니다. 다만, pascal 프로시저를 반복하는 프로세스로 짜려고 고군분투했지만 실패했습니다.<br />
성공하신 분이 있다면 댓글 부탁드립니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>a번 줄의 b번째 원소를 (pascal a b)라고 한다면,</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pascal</span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> b <span class="number">1</span>) (<span class="name"><span class="built_in">=</span></span> b a))</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      (<span class="name"><span class="built_in">+</span></span> (<span class="name">pascal</span> (<span class="name"><span class="built_in">-</span></span> a <span class="number">1</span>) b) </span><br><span class="line">         (<span class="name">pascal</span> (<span class="name"><span class="built_in">-</span></span> a <span class="number">1</span>) (<span class="name"><span class="built_in">-</span></span> b <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-12.png" alt="파스칼 프로시저 테스트 결과" /></p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.13 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-13/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">ϕ=(1+\sqrt{5})/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span>일때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Fib(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ϕ</mi><mi>n</mi></msup><mi mathvariant="normal">/</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">ϕ^n/5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">5</span></span></span></span>에 가장 가까운 정수임을 증명하라.</p>
<p>참고)<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ψ</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">ψ=(1-\sqrt{5})/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span>일때<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">Fib(n)=(ϕ^n-ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span>을 증명하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>수학문제를 풀고 마크다운으로 설명하는 짓은 미친 짓이다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>수식이 난해할 수 있으니 천천히 읽어주시기 바랍니다.</p>
<h3 id="a-fibnφn-ψnsqrt5-증명"><a class="markdownIt-Anchor" href="#a-fibnφn-ψnsqrt5-증명"></a> a. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">Fib(n)=(ϕ^n-ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span> 증명</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">(ϕ^n-ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span>를 변형해 보면 피보나치 수열의 특징을 발견할 수 있다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">f(n)=(ϕ^n-ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span>이라고 하자.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><msup><mi>ψ</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">=(ϕ^{n+1}-ψ^{n+1})/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mi>ϕ</mi><mo>×</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><mi>ψ</mi><mo>×</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">=(ϕ\timesϕ^{n}-ψ\timesψ^{n})/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>ϕ</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><mo stretchy="false">(</mo><mi>ψ</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">f(n)+f(n+1)=((ϕ+1)ϕ^n-(ψ+1)ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span></p>
<p>그런데 수를 대입해서 계산해 보면,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo>+</mo><mn>1</mn><mo>=</mo><msup><mi>ϕ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">ϕ+1=ϕ^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ψ</mi><mo>+</mo><mn>1</mn><mo>=</mo><msup><mi>ψ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">ψ+1=ψ^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>라는 것을 알수 있으므로</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)+f(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>ϕ</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><mo stretchy="false">(</mo><mi>ψ</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">=((ϕ+1)ϕ^n-(ψ+1)ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mn>2</mn></msup><mo stretchy="false">)</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><mo stretchy="false">(</mo><msup><mi>ψ</mi><mn>2</mn></msup><mo stretchy="false">)</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">=((ϕ^2)ϕ^n-(ψ^2)ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msup><mo>−</mo><msup><mi>ψ</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">=(ϕ^{n+2}-ψ^{n+2})/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=f(n+2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">∴ f(n)+f(n+1)=f(n+2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></p>
<p>f(n)은 피보나치 수열의 규칙을 따름을 알 수 있다.</p>
<h3 id="b-fibn이-φnsqrt5에-가장-가까운-정수임을-증명"><a class="markdownIt-Anchor" href="#b-fibn이-φnsqrt5에-가장-가까운-정수임을-증명"></a> b. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Fib(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ϕ</mi><mi>n</mi></msup><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">ϕ^n/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span>에 가장 가까운 정수임을 증명</h3>
<p>어떤 수를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>라 하고, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>에 가장 가까운 정수를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이라 한다면,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>은 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>−</mo><mn>0.5</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mi>x</mi><mo>+</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">x-0.5≤ n ≤ x+0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>)를 만족하는 수이다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Fib(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo>−</mo><msup><mi>ψ</mi><mi>n</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">=(ϕ^n-ψ^n)/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mfrac><msup><mi>ϕ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>−</mo><mfrac><msup><mi>ψ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac></mrow><annotation encoding="application/x-tex">=\frac{ϕ^n}{\sqrt{5}}-\frac{ψ^n}{\sqrt{5}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msup><mi>ϕ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{ϕ^n}{\sqrt{5}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> - <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msup><mi>ψ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>≤</mo><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mfrac><msup><mi>ϕ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>+</mo><mfrac><msup><mi>ψ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{ψ^n}{\sqrt{5}} ≤ Fib(n) ≤ \frac{ϕ^n}{\sqrt{5}}+\frac{ψ^n}{\sqrt{5}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>만약(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msup><mi>ψ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">\frac{ψ^n}{\sqrt{5}} ≤ 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>) 라면</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msup><mi>ϕ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>−</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">\frac{ϕ^n}{\sqrt5}-0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;">5</span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mfrac><msup><mi>ϕ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>+</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">≤ Fib(n) ≤ \frac{ϕ^n}{\sqrt{5}}+0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>를 만족한다.<br />
그러므로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msup><mi>ψ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">\frac{ψ^n}{\sqrt{5}} ≤ 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>를 증명하면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Fib(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ϕ</mi><mi>n</mi></msup><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">ϕ^n/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span>에 가장 가까운 수이다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msup><mi>ψ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">\frac{ψ^n}{\sqrt{5}} ≤ 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ψ</mi><mi>n</mi></msup><mo>≤</mo><mfrac><msqrt><mn>5</mn></msqrt><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">ψ^n ≤ \frac{\sqrt{5}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>≤</mo><mfrac><msqrt><mn>5</mn></msqrt><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">((1-\sqrt{5})/2)^n ≤ \frac{\sqrt{5}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo><mo>−</mo><mn>1</mn><mo>&lt;</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\because -1&lt;((1-\sqrt{5})/2)&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>이기 때문에,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mn>1</mn></msup><mo>≤</mo><mfrac><msqrt><mn>5</mn></msqrt><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">((1-\sqrt{5})/2)^1 ≤ \frac{\sqrt{5}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>이라면,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>≤</mo><mfrac><msqrt><mn>5</mn></msqrt><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">((1-\sqrt{5})/2)^n ≤ \frac{\sqrt{5}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>이다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>≤</mo><mfrac><msqrt><mn>5</mn></msqrt><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">((1-\sqrt{5})/2) ≤ \frac{\sqrt{5}}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt><mo>≤</mo><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">1-\sqrt{5} ≤ \sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.04319em;vertical-align:-0.13597em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.13278em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mn>2</mn><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">1 ≤ 2\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.13278em;"></span><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo><mfrac><msup><mi>ψ</mi><mi>n</mi></msup><msqrt><mn>5</mn></msqrt></mfrac><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">∴ \frac{ψ^n}{\sqrt{5}} ≤ 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5010879999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9630879999999999em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">∴</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Fib(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ϕ</mi><mi>n</mi></msup><mi mathvariant="normal">/</mi><msqrt><mn>5</mn></msqrt></mrow><annotation encoding="application/x-tex">ϕ^n/\sqrt{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">5</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span>에 가장 가까운 정수이다.</p>
<p>난해한 글 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.15 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-15/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>라디안으로 나타낸 각 x가 있을때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\sin{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span>의 값을 구한다고 하자. x가 충분히 작으면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>≈</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">x\approx\sin{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span>이고 그렇지 않으면 아래와 같은 식으로 값을 얻을 수 있다. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo>=</mo><mn>3</mn><mi>sin</mi><mo>⁡</mo><mfrac><mi>x</mi><mn>3</mn></mfrac><mo>−</mo><mn>4</mn><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>3</mn></msup><mfrac><mi>x</mi><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\sin{x}=3\sin{\frac{x}{3}}-4\sin^3\frac{x}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2168679999999998em;vertical-align:-0.345em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.871868em;"><span style="top:-3.12076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (여기서 충분히 작은 각이란, 0.1rad보다 크지 않은 각을 말한다.) 이 생각을 프로시저로 표현하면 다음과 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cube</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> x x x))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">p</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">*</span></span> <span class="number">3</span> x)</span><br><span class="line">     (<span class="name"><span class="built_in">*</span></span> <span class="number">4</span> (<span class="name">cube</span> x))))</span><br><span class="line">   </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sine</span> angle)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">&gt;</span></span> (<span class="name"><span class="built_in">abs</span></span> angle) <span class="number">0.1</span>))</span><br><span class="line">      angle</span><br><span class="line">      (<span class="name">p</span> (<span class="name">sine</span> (<span class="name"><span class="built_in">/</span></span> angle <span class="number">3.0</span>)))))</span><br></pre></td></tr></table></figure>
<p>a. (sine 12.15)의 값을 구할 때, p프로시저를 몇번이나 불러 쓰는가?<br />
b. (sine a)의 값을 계산한다 치고, sine프로시저가 만들어 내는 프로시저에서 기억공간과 계산단계의 자람차수를 a의 함수로 나타내면?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>프로시저의 자라나는 모습을 보고 복잡도를 계산하는 능력을 상승시킬 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-sine-1215의-값을-구할-때-p프로시저를-몇번이나-불러-쓰는가"><a class="markdownIt-Anchor" href="#a-sine-1215의-값을-구할-때-p프로시저를-몇번이나-불러-쓰는가"></a> a. (sine 12.15)의 값을 구할 때, p프로시저를 몇번이나 불러 쓰는가?</h3>
<p>프로시저의 진행을 나열해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">sine</span> <span class="number">12.15</span>)</span><br><span class="line">(<span class="name">p</span> (<span class="name">sine</span> <span class="number">4.05</span>))</span><br><span class="line">(<span class="name">p</span> (<span class="name">p</span> (<span class="name">sine</span> <span class="number">1.35</span>)))</span><br><span class="line">(<span class="name">p</span> (<span class="name">p</span> (<span class="name">p</span> (<span class="name">sine</span> <span class="number">0.45</span>))))</span><br><span class="line">(<span class="name">p</span> (<span class="name">p</span> (<span class="name">p</span> (<span class="name">p</span> (<span class="name">sine</span> <span class="number">0.15</span>)))))</span><br><span class="line">(<span class="name">p</span> (<span class="name">p</span> (<span class="name">p</span> (<span class="name">p</span> (<span class="name">p</span> (<span class="name">sine</span> <span class="number">0.05</span>))))))</span><br></pre></td></tr></table></figure>
<p>총 5번 p프로시저를 호출하는 것을 볼 수 있습니다.</p>
<h3 id="b-기억공간과-계산단계의-자람차수를-a의-함수로-나타내면"><a class="markdownIt-Anchor" href="#b-기억공간과-계산단계의-자람차수를-a의-함수로-나타내면"></a> b. 기억공간과 계산단계의 자람차수를 a의 함수로 나타내면?</h3>
<p>이 문제에서는 위의 예시처럼, 프로시저가 sine 프로세스를 실행할때마다 기억공간이 동일한 비율로 늘어나므로,<br />
기억공간의 자람차수<sub>공간복잡도</sub>와 계산단계의 자람차수<sub>시간복잡도</sub>가 동일하다고 볼 수 있습니다.<br />
이 프로시저의 시간복잡도는 크게 생각을 하지 않아도 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">Θ(\log</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span></span></span></span><sub>3</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span>라는 것을 눈치챌 수 있습니다.<br />
a의 크기가 3배 증가할때마다 호출하는 sine프로시저의 수가 1개씩 추가되기 때문입니다.<br />
예를들어, (sine 36.45)를 계산하는 것은 (sine 12.15)를 계산하는 것보다 단 1개의 과정이 더 필요할 뿐입니다.<br />
프로시저의 자라나는 모습을 보고 복잡도를 계산하는 능력이 조금 상승한 느낌입니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.14 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-14/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>11센트를 동전으로 바꿀 때, 1.2.2절의 count-change 프로시저가 만들어 내는 프로세스를 나무꼴로 그려 보아라. 바꿀 돈이 늘어남에 따라 프로세스가 거치는 단계 수와 기억공간의 크기는 어떤 자람차수를 보이는가? (즉 어느정도로 자라나는가?)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>되도는 프로세스의 공간복잡도를 계산할 때, 사용하는 메모리의 크기는 가장 긴 가지의 길이라는 것을 이해했습니다.<br />
어떤 프로세스의 부분 프로세스의 시간복잡도를 계산함으로써 그 프로세스의 시간복잡도를 계산할 수 있다는 것을 이해했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제에서 직접 언급하지는 않았지만, (cc n 5)의 자람차수를 구하라는 말과 동일하다고 생각했습니다.<br />
문제를 쉽게 이해하기 위해 프로세스가 자라나는 모양을 다이어그램으로 그려보았습니다.<br />
<img data-src="/img/sicp/chapter-1/exercise-1-14-1.png" alt="프로시저가 자라나는 모양" /></p>
<h3 id="1-공간복잡도"><a class="markdownIt-Anchor" href="#1-공간복잡도"></a> 1. 공간복잡도</h3>
<p>공간복잡도는 프로세스가 자라나면서 차지하는 메모리의 크기를 뜻합니다.<br />
처음 이 문제를 풀 때에는 이렇게 생각했습니다.<br />
“어? 맞바꿈 계산법으로 바꾸면 작은 프로세스 하나 하나마다 메모리 공간을 차지할 것이고, 결국 시간복잡도와 공간복잡도가 같지 않나?”<br />
당연히 이 생각은 틀렸습니다.<br />
위의 문제처럼 재귀호출방식으로 프로세스가 자라나는 경우에는 하나의 가지를 다 계산한 다음에 다시 돌아와서 다른 가지를 다 계산하는 방식을 사용합니다.<br />
좀 더 컴퓨터과학적으로 표현하자면, DFS를 하는 것입니다.<br />
즉 하나의 가지를 메모리에 적재한 체로 계산중일때, 다른 가지들은 계산중에 있지 않다는 말입니다.<br />
그렇게 되면 필요한 메모리의 크기는 결국 나무꼴의 프로세스 모양에서 가장 긴 가지의 길이만큼이 되는 것입니다.<br />
위 프로세스에서 가장 긴 가지의 길이는 N+4입니다.<br />
<img data-src="/img/sicp/chapter-1/exercise-1-14-2.png" alt="프로시저가 반복하는 개수" /></p>
<p>즉 프로시저의 공간복잡도는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>입니다.</p>
<h3 id="2-시간복잡도"><a class="markdownIt-Anchor" href="#2-시간복잡도"></a> 2. 시간복잡도</h3>
<h4 id="a-cc-n-1"><a class="markdownIt-Anchor" href="#a-cc-n-1"></a> a. (cc n 1)</h4>
<p>시간복잡도를 쉽게 계산하기 위해서는 (cc n 1)부터 알아볼 필요가 있습니다.<br />
(cc n 1)의 시간복잡도가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>인 것은 쉽게 알 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">cc</span> <span class="number">12</span> <span class="number">1</span>)</span><br><span class="line">(<span class="name">cc</span> <span class="number">11</span> <span class="number">1</span>)</span><br><span class="line">(<span class="name">cc</span> <span class="number">10</span> <span class="number">1</span>)</span><br><span class="line">(<span class="name">cc</span> <span class="number">9</span> <span class="number">1</span>)</span><br><span class="line">(<span class="name">cc</span> <span class="number">8</span> <span class="number">1</span>)</span><br><span class="line">   :</span><br><span class="line">(<span class="name">cc</span> <span class="number">1</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="b-cc-n-2"><a class="markdownIt-Anchor" href="#b-cc-n-2"></a> b. (cc n 2)</h4>
<p>프로세스의 진행을 쉽게 보기 위해 다이어그램을 그려보았습니다.<br />
<img data-src="/img/sicp/chapter-1/exercise-1-14-3.png" alt="n이 12일때 자라나는 모양의 러프한 버전" /><br />
위 그림에서 알 수 있듯<br />
(cc n 2)프로세스는 n이 5씩 커질때 마다 (cc n 1)프로세스를 하나씩 만들어 냅니다.<br />
아시다시피 (cc n 1)프로세스의 시간복잡도는 n입니다.<br />
그러므로 (cc n 2)의 시간복잡도는 (cc n 1)프로세스들의 계산단계들을 모두 더한 것이라고 볼 수 있습니다.<br />
(cc n 1)프로세스들의 계산단계의 갯수는 n개 n-5개 n-10개… 라고 할 수 있습니다.<br />
<img data-src="/img/sicp/chapter-1/exercise-1-14-4.png" alt="n이 12일때 반복되는 프로시저의 개수 계산" /><br />
또 그 프로세스들의 개수는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mn>5</mn></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{n}{5}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>과 같습니다.<br />
이것을 계산해 보면, 그 값은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>5</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n\times(\frac{n}{5}+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>보다 작고 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>5</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n-k)\times(\frac{n}{5}+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>보다 큼을 알 수 있습니다. (위의 예시에서 k는 10)<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">∴</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span></span></span></span> (cc n 2)는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>를 따른다.</p>
<h4 id="c-cc-n-5"><a class="markdownIt-Anchor" href="#c-cc-n-5"></a> c. (cc n 5)</h4>
<p>위와 같은 방법으로<br />
(cc n 3)는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />
(cc n 4)는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />
(cc n 5)는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />
를 따른다는 것을 쉽게 알아낼 수 있습니다.</p>
<p>이 문제는 노트에 직접 풀어보시는 것을 추천드립니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.16 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-16/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>fast-expt처럼 계산 시간<sup>단계</sup>이 로그 비례로 늘어나게끔 계속 제곱하는 방법을 쓰되, 반복 프로세스를 펼쳐내는 거듭제곱 프로시저를 짜보자.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>어떤 값의 크기를 일정하게 유지시키는 방법으로 반복하는 프로세스를 쉽게 구현할 수 있다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>책에 귀띔으로 설명되어 있는것처럼,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">ab^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>를 일정하게 맞추는 데에 초점을 두고 문제를 풀었습니다.<br />
처음에는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">ab^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>를 일정하게 맞추는 것이 무슨 의미인지 몰랐지만 곧 알수 있었습니다.<br />
문제의 해법은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">ab^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>를 일정하게 맞추는 동시에 b를 1로 만드는 것입니다.<br />
그렇게 되면 결국 문제의 답은 b가 1인 시점의 a가 됩니다.<br />
이를 구현하면 이렇게 됩니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-16.png" alt="fast-expt 프로시저 실행 결과" /></p>
<p>잘 실행되는 것을 확인할 수 있습니다.<br />
반복하는 프로세스를 만드는 일반적인 방법을 알게된 것 같아 기분이 좋습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.17 &amp; 1.18 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-17/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>이 절에서 나오는 거듭제곱 알고리즘은 여러 번 곱셈을 거듭하여 값을 구한다는 단순한 생각에 뿌리를 둔다. 이와 비슷하게 곱셈도 덧셈을 거듭하는 것으로 나타낼 수 있다. 다음은 expt 프로시저처럼 (언어에서 덧셈만 있고 곱셈은 없다 치고) 덧셈으로 곱셈 프로시저를 짜본 것이다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">*</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> b <span class="number">0</span>)</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="built_in">+</span></span> a (<span class="name"><span class="built_in">*</span></span> a (<span class="name"><span class="built_in">-</span></span> b <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure>
<p>이 알고리즘의 계산 단계는 b와 나란히 (즉, 선형 비례로) 자란다. 이때 덧셈 말고도, 정수 값을 두배로 하거나 (짝수를) 반으로 나누는 프로시저 double과 halve가 이미 있었다고 치자. 이 프로시저를 써서, fast-expt처럼 계산단계가 로그비례로 자라나는 곱셈 프로시저를 짜보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>프로세스가 자라날때 반복수를 반으로 줄일 수 있는 방법이 있다면,<br />
프로시저를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>으로 만들기 쉽다는 것을 알수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제 풀이의 기본 아이디어는 앞의 절을 잘 이해하였다면 가볍게 얻을 수 있을 것이라 생각합니다.<br />
제가 떠올린 아이디어는 이렇습니다.</p>
<blockquote>
<p>(mult-iter a b temp)프로시저를 만들어서,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi><mo>+</mo><mi>t</mi><mi>e</mi><mi>m</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a \times b + temp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span></span></span></span>를 일정하게 유지하면서 b를 1로 만들자.</p>
</blockquote>
<p>이 아이디어는 <a href="/sicp/chapter-1/exercise-1-16">연습문제1.16</a>의 아이디어와 결이 같습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi><mo>+</mo><mi>t</mi><mi>e</mi><mi>m</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a \times b + temp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span></span></span></span>를 어떻게 잘 변형하다가,<br />
결국 마지막에 b가 1이 되었을때, (+ a temp)를 반환하면 문제가 해결되는 것입니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-17.png" alt="새로만든 곱셈 프로시저 실행 결과" /></p>
<p>그렇게 어렵지 않게 구현할 수 있었습니다.<br />
물론 이 프로시저는 약간의 문제가 있습니다.<br />
b가 0이나 음수일 때는 의도에 맞게 동작하지 않습니다.<br />
해결 방법이 그렇게 어려울 것 같지 않고, 문제의 풀이의도와는 동떨어진 내용이므로 생략하겠습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.19 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-19/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>피보나치 수열을 구하는 계산 단계가 로그 차수로 자라나도록 만든 똑똑한 알고리즘이 있다. 1.2.2절에서 나온 fib-iter 프로세스에서 상태변수 a와 b를 바꾸는 규칙 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>←</mo><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a ← a+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>←</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">b ← a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>가 생각나는가? 이 규칙을 T라고 할 때, 1과 0을 첫 값으로 놓고 T를 n번 하고 나면 Fib(n+1)와 Fib(n)을 얻을 수 있다. 다시말해 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">T^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> 곧 (1,0)에서 T를 n번 거듭 곱하면 피보나치 수열이 나온다. T<sub>pq</sub>가 (a,b)를 두고 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>←</mo><mi>b</mi><mi>q</mi><mo>+</mo><mi>a</mi><mi>q</mi><mo>+</mo><mi>a</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a ← bq+aq+ap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>←</mo><mi>b</mi><mi>p</mi><mo>+</mo><mi>a</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">b ← bp+aq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>라는 규칙을 가리킨다고 하면, 이제는 T가 T<sub>pq</sub>에서 p=0,q=1인 경우를 나타낸다고 볼 수 있다. T<sub>pq</sub>를 두번 거듭 계산할 때 나온 값이, T<sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal">′</mo></msup><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;q&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></sub>을 한 번 한 것과 같다는 것을 밝히고, p와 q로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">p^{\prime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">q^{\prime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>를 계산하는 식도 밝혀 보아라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>수학적인 내용을 이해하면<br />
프로그램의 로직을 개선시킬 수 있다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>수식이 난해할 수 있으니 천천히 읽어주시기 바랍니다.</p>
<p>a, b의 초기값을 a<sub>1</sub>,b<sub>1</sub>이라고 합시다.</p>
<p>그렇다면 a<sub>1</sub>,b<sub>1</sub>에 T연산을 적용시킨 결과물인 a<sub>2</sub>,b<sub>2</sub>은 아래와 같습니다.<br />
a<sub>2</sub>=b<sub>1</sub>q+a<sub>1</sub>q+a<sub>1</sub>p<br />
b<sub>2</sub>=b<sub>1</sub>p+a<sub>1</sub>q</p>
<p>마찬가지로 a<sub>3</sub>,b<sub>3</sub>는 아래와 같습니다.</p>
<p>a<sub>3</sub><br />
= b<sub>2</sub>q+a<sub>2</sub>q+a<sub>2</sub>p<br />
= (b<sub>1</sub>p + a<sub>1</sub>q)q + (b<sub>1</sub>q + a<sub>1</sub>q + a<sub>1</sub>p)q + (b<sub>1</sub>q + a<sub>1</sub>q + a<sub>1</sub>p)p</p>
<p>b<sub>3</sub><br />
= b<sub>2</sub>p+a<sub>2</sub>q<br />
= (b<sub>1</sub>p + a<sub>1</sub>q)p + (b<sub>1</sub>q + a<sub>1</sub>q + a<sub>1</sub>p)q</p>
<p>식을 잘 풀어서 정리하면,<br />
<span style="color:#8fbc8f">작성자의 편의를 위해 a<sub>1</sub>,b<sub>1</sub>은 a,b로 표시하겠습니다.</span><br />
a<sub>3</sub> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>b</mi><mo stretchy="false">(</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>p</mi><mi>q</mi><mo stretchy="false">)</mo><mo>+</mo><mi>a</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>p</mi><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">= b(q^2+2pq)+a(p^2+q^2+q^2+2pq)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><br />
b<sub>3</sub> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>b</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><msup><mi>q</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mi>a</mi><mo stretchy="false">(</mo><mn>2</mn><mi>p</mi><mi>q</mi><mo>+</mo><msup><mi>q</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">= b(p^2+q^2)+a(2pq+q^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><msup><mi>q</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">p^{\prime}=p^2+q^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">q^{\prime}=q^2+2pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><br />
라고 한다면,</p>
<p>a<sub>3</sub> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>b</mi><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><mi>a</mi><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><mi>a</mi><msup><mi>p</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">=bq^{\prime}+aq^{\prime}+ap^{\prime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
b<sub>3</sub> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>b</mi><msup><mi>p</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><mi>a</mi><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">=bp^{\prime}+aq^{\prime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><br />
이 성립합니다.</p>
<p>즉 p와 q의 값만 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">p^{\prime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>q</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">q^{\prime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>으로 바꿔주면, T연산을 두번한 효과를 볼 수 있습니다.</p>
<p>따라서 구하고자 하는 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fib-iter</span> a b p q count)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> count <span class="number">0</span>) b)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> count)</span><br><span class="line">         (<span class="name">fib-iter</span> a</span><br><span class="line">                   b</span><br><span class="line">                   (<span class="name"><span class="built_in">+</span></span> (<span class="name">square</span> p) (<span class="name">square</span> q)) </span><br><span class="line">                   (<span class="name"><span class="built_in">+</span></span> (<span class="name">square</span> q) (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> p q))</span><br><span class="line">                   (<span class="name"><span class="built_in">/</span></span> count <span class="number">2</span>)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">fib-iter</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name"><span class="built_in">*</span></span> b q) (<span class="name"><span class="built_in">*</span></span> a q) (<span class="name"><span class="built_in">*</span></span> a p))</span><br><span class="line">                        (<span class="name"><span class="built_in">+</span></span> (<span class="name"><span class="built_in">*</span></span> b p) (<span class="name"><span class="built_in">*</span></span> a q))</span><br><span class="line">                        p</span><br><span class="line">                        q</span><br><span class="line">                        (<span class="name"><span class="built_in">-</span></span> count <span class="number">1</span>)))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-19.png" alt="피보나치 프로시저 실행 결과" /></p>
<p>이번 문제는 수학적인 내용을 이해하면 프로그램을 짤 때, 더 효율적으로 짤 수 있다는 것을 보여준 예시입니다.<br />
글로는 이해가 잘 안되실 겁니다. 직접 노트에 수식을 계산해 보면서 수학에 아름다움을 느끼셨으면 좋겠습니다.<br />
프로그래밍을 깊이있게 배운다는 것은 무엇을 할지보다 어떻게 할지에 중점을 둔 것이기 때문에 이런 문제들도 풀어보는 것 같습니다.<br />
count가 짝수일 때와 홀수일 때를 나누는 아이디어는 <a href="/sicp/chapter-1/exercise-1-16">연습문제 1.16</a>, <a href="/sicp/chapter-1/exercise-1-17">연습문제 1.17</a> 에서 충분히 다루었기 때문에 언급하지는 않겠습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.21 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-21/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>smallest-divisor 프로시저로 199,1999,19999의 가장 작은 약수를 찾아라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>앞 절의 내용이 이해가 되셨다면, 굳이 구현할 필요는 없다고 생각합니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>혹시나 시간복잡도가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>이 되는 것을 이해하지 못하신 분들을 위해서 성명드리자면,</p>
<p>find-divisor 프로시저는 n의 약수를 찾을때<br />
1~n까지의 수를 검사하는 것이 아니라, 1~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>의 수를 검사합니다.<br />
n이 4배로 커진다면, 확인해야 할 테스트케이스의 수는 2배로 커지므로, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>의 시간 복잡도를 가집니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-21.png" alt="가장 작은 약수 구하기 프로시저 실행 결과" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.2 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-2/</url>
    <content><![CDATA[<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>연습문제1.1과 마찬가지로 문제풀이가 예상한 대로라면, 굳이 직접 코딩할 필요는 없다고 생각합니다. 앞가지쓰기는 <strong>prefix notation</strong>의 한국어 번역입니다. 전위표기식이라고도 합니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>테스트 결과가 분수로 나오는 것은, Dr.Racket의 컴파일 규칙 때문입니다. 산술 계산식에서 4.0같은 실수형 데이터가 아닌 4같은 정수형 데이터만 있다면, 계산 결과를 분수로 반환합니다. 책의 그림처럼 실수형 반환을 원한다면, 숫자를 하나 이상 실수형으로 바꿔주면 됩니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-2.png" alt="예제 코드 실행 결과" /></p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.20 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-20/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>프로시저가 만들어 내는 프로세스는 마땅히 실행기의 계산 규칙에서 영향을 받는다. 앞서 나온 gcd 프로시저를 보기 삼아서, 이런 문제를 살펴보자. 먼저 이번에는 (1.1.5절에서 선보인) 정의대로 계산하는 방법<sup>normal-order evaluation</sup>을 따른다고 하자. (if를 정의대로 계산하는 방법은 <a href="/SICP/chapter1/SICP-example-1.5">연습문제 1.5</a>에 있다.) 맞바꿈 계산법으로 (gcd 206 40)를 (정의한 대로)구하는 프로세스를 보이고, remainder 연산을 어디에서 쓰는지 표시하자. 프로세스가 끝날 때까지 remainder 연산을 얼마나 쓰는가? 인자 먼저 계산하는 경우라면 또 어떠한가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>정의대로 계산법을 사용하게 되면<br />
if식 안에서의 계산과 밖에서의 계산이 분리되어서 훨씬 더 많은 계산을 하게될 수도 있다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>참고-<a href="/algorithm/gcd">GCD 알고리즘 증명</a></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">gcd</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> b <span class="number">0</span>)</span><br><span class="line">      a</span><br><span class="line">      (<span class="name"><span class="built_in">gcd</span></span> b (<span class="name"><span class="built_in">remainder</span></span> a b))))</span><br></pre></td></tr></table></figure>
<h3 id="a-정의대로-계산법"><a class="markdownIt-Anchor" href="#a-정의대로-계산법"></a> a. 정의대로 계산법</h3>
<p>이 문제에서 주의할 점은,<br />
if식의 술어의 참 거짓을 확인할 때는 remainder를 사용하여 b값을 구하지만 계산된 결과가 다음 단계로 넘어가지는 않는다는 것입니다.<br />
<span style="color:#999">if식 안에서 remainder를 실행하고 밖에서도 한번 더 실행한다.</span></p>
<p>그 시점까지 실행된 remainder의 총 수를 뒤에 표시하겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">206</span> <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) <span class="number">0</span>)) &lt;------------------------------------------------------<span class="number">-1</span>번 실행 총 <span class="number">1</span>번</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) <span class="number">0</span>))) &lt;----------------------------------------<span class="number">-2</span>번 실행 총 <span class="number">3</span>번</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)) </span><br><span class="line">     (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>))) <span class="number">0</span>)) &lt;-----------<span class="number">-4</span>번 실행 총 <span class="number">7</span>번</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) </span><br><span class="line">                (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>))) </span><br><span class="line">     (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)) </span><br><span class="line">                (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)) </span><br><span class="line">                  (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>))))  &lt;-------7번 실행 총 <span class="number">14</span>번 </span><br><span class="line">   <span class="number">0</span>))    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>) (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)))              &lt;---------<span class="number">-4</span>번 실행 총 <span class="number">18</span>번</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>총 18번 실행되는 것을 볼 수 있습니다.<br />
혹시 이해가 안되시는 분들은, 마지막 줄을 처리하기 전까지는 if식의 술어부분만 계산한다는 것을 생각해주시기 바랍니다.</p>
<h3 id="b-인자먼저-계산법"><a class="markdownIt-Anchor" href="#b-인자먼저-계산법"></a> b. 인자먼저 계산법</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">206</span> <span class="number">40</span>)</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">40</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)) &lt;-----<span class="number">-1</span>번 실행 총 <span class="number">1</span>번</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">6</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="number">6</span>))    &lt;-----<span class="number">-1</span>번 실행 총 <span class="number">2</span>번</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">6</span> <span class="number">4</span>)</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">6</span> <span class="number">4</span>))     &lt;-----<span class="number">-1</span>번 실행 총 <span class="number">3</span>번</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">4</span> <span class="number">2</span>)</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">remainder</span></span> <span class="number">4</span> <span class="number">2</span>))     &lt;-----<span class="number">-1</span>번 실행 총 <span class="number">4</span>번</span><br><span class="line">(<span class="name"><span class="built_in">gcd</span></span> <span class="number">2</span> <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>총 4번 실행되는 것을 볼 수 있습니다.</p>
<h3 id="c-결론"><a class="markdownIt-Anchor" href="#c-결론"></a> c. 결론</h3>
<p>정의대로 계산법을 사용하게 되면, if식 안에서의 계산과 밖에서의 계산이 분리되어서 훨씬 더 많은 계산을 하게될 수도 있습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.22 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-22/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>대개 Lisp 시스템에는 runtime이라는 기본 프로시저가 있어서, 이것으로 시스템이 실제 돌아간 시간을 (이를테면, 마이크로 초 단위로 잰) 정수 값으로 얻을 수 있다. (dr.racket은 아닙니다. <a href="/sicp/review/sicp-materials">이 글</a>을 참고해서 별도로 설정해줘야 runtime을 쓸 수 있습니다.) 아래 timed-prime-test는 정수 n을 받아서 찍은 다음 그 값이 소수인지 따져보는 프로시저로, n이 소수면 별표 세 개와 함께 검사하는 데 걸린 시간을 찍는다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">report-prime</span> elapsed-time)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;***&quot;</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> elapsed-time))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">start-prime-test</span> n start-time)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">prime?</span> n)</span><br><span class="line">      (<span class="name">report-prime</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">runtime</span>) start-time))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">timed-prime-test</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> n)</span><br><span class="line">  (<span class="name">start-prime-test</span> n (<span class="name">runtime</span>)))</span><br></pre></td></tr></table></figure>
<p>이 프로시저를 써서, 정해진 넓이에 속하는 홀수를 차례로 찾아 소수인지 알아볼 수 있도록 search-for-primes 프로시저를 짜라. 이 프로시저로 1,000과 100,000과 1,000,000보다 큰 소수 가운데 처음 나오는 3개를 찾아보아라. 또, 소수인지 따져 보는 데 시간이 얼마나 걸리는지 눈여겨보자. 검사하는 알고리즘의 자람차수가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msqrt><mrow></mrow></msqrt><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\sqrt{}{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0505em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8005em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"></span></span><span style="top:-2.7605em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2395em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>이므로 10,000 언저리에 있는 소수를 찾을 때 드는 시간이 1,000 언저리에 있는 소수를 찾을 때보다 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow></mrow></msqrt><mn>10</mn></mrow><annotation encoding="application/x-tex">\sqrt{}{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.2395em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8005em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"></span></span><span style="top:-2.7605em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2395em;"><span></span></span></span></span></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span></span></span>배 정도 많을 것이라 짐작할 수 있다. 실제 시간을 재어 보니 참말 그러한가? 100,000과 1,000,000 언저리를 뒤져보고 계산 시간을 쟀을 때에도 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow></mrow></msqrt><mi>n</mi></mrow><annotation encoding="application/x-tex">\sqrt{}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.2395em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8005em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"></span></span><span style="top:-2.7605em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2395em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>이라는 짐작을 뒷받침하는가? 프로그램을 돌리는 데 드는 시간이, 자라나는 계산 단계 수에 비례하여 늘어난다는 생각이 이 실험 결과와 잘 맞아떨어지는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>시간복잡도와 실제 성능의 오차를 확인할 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>책에 실려있는 prime?프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">divides?</span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> a b) <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">find-divisor</span> n test-divisor)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&gt;</span></span> (<span class="name">square</span> test-divisor) n) n)</span><br><span class="line">        ((<span class="name">divides?</span> n test-divisor) test-divisor)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">find-divisor</span> n (<span class="name"><span class="built_in">+</span></span> test-divisor <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">smallest-divisor</span> n)</span><br><span class="line">  (<span class="name">find-divisor</span> n <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name">smallest-divisor</span> n) n))</span><br></pre></td></tr></table></figure>
<p>저는 이 문제에서 준 코드를 다음과 같이 수정했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">report-prime</span> elapsed-time n)</span><br><span class="line">  (<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;***&quot;</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> elapsed-time))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">start-prime-test</span> n start-time)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">prime?</span> n)</span><br><span class="line">      (<span class="name">report-prime</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">runtime</span>) start-time) n)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">timed-prime-test</span> n)</span><br><span class="line">  (<span class="name">start-prime-test</span> n (<span class="name">runtime</span>)))</span><br></pre></td></tr></table></figure>
<p>문제에서 제공한 코드를 사용하게 되면, 소수가 아닌 수까지 화면에 표시되서 보기에 불편했습니다.<br />
위의 코드로 수정하면 n이 소수일때만 표시됩니다.</p>
<p>search-for-primes프로시저는 아래와 같이 구현했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> from to)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&gt;</span></span> from to) (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;\nend&quot;</span>))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">timed-prime-test</span> from)</span><br><span class="line">              (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">2</span> from) to))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">search-for-primes</span> from to)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">even?</span></span> from)</span><br><span class="line">      (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> from <span class="number">1</span>) to)</span><br><span class="line">      (<span class="name">iter</span> from to)))</span><br></pre></td></tr></table></figure>
<p>아래 3줄의 코드를 실행해 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">search-for-primes</span> <span class="number">100000</span> <span class="number">100200</span>)</span><br><span class="line">(<span class="name">search-for-primes</span> <span class="number">10000000</span> <span class="number">10000200</span>)</span><br><span class="line">(<span class="name">search-for-primes</span> <span class="number">1000000000</span> <span class="number">1000000200</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-22.png" alt="자리수가 두자리씩 늘어나는 테스트케이스 실행 결과" /></p>
<p>n이 100배씩 커진 만큼 자리수가 한자리씩 변하는 것을 볼 수 있습니다.<br />
하지만 정확하게 10배는 아닌 것도 확인할 수 있습니다.<br />
저는 두가지의 원인을 생각했습니다.<br />
첫번째 이유는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>이 최악의 경우와 최선의 경우를 생각하지 않은 러프한 추측이기 때문입니다.<br />
두번째 이유는 if식이나 기타 다른 프로시저들이 차지하는 시간이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>식에 포함되어 있지 않아 생긴 현상인 것 같습니다.<br />
시간복잡도와 실제 러닝타임의 오차를 확인할 수 있었습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.23 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-23/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>이 절 처음에 만든 smallest-divisor 프로시저는 쓸모없는 검사를 너무 많이 한다. 다시 말해서, 어떤 수가 2로 나뉜다면 다시 그 수가 더 큰 짝수로 나뉘는 지 알아볼 까닭이 없기 때문이다. 이 말은 test-divisor에서 2,3,4,5,6…이 아니라 2,3,5,7,9…를 써야 한다는 뜻이다. 이 생각에 따라 2가 들어오면 3을 그 밖의 값이 들어오면 2를 더한 값을 내놓은 프로시저 next를 만들어라. 그리고 (+ test-divisor 1)대신 (next test-divisor)를 쓰도록 smallest-divisor프로시저를 고쳐라. 그런 다음 timed-prime-test로 <a href="/sicp/chapter-1/exercise-1-22">연습문제1.22</a>에서 찾은 소수 12개를 다시 검사해 보라. 검사 횟수가 반으로 줄었으니 계산도 두배로 빨라지는가? 그렇지 않다면 두 알고리즘의 빠르기를 견줄 때 그 진짜 비율은 어림잡아 얼마인가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>이론과 실제는 많이 다르다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제의 조건에 맞게 next프로시저를 만들고 기존의 프로시저와의 비교를 위해 새로운 new-프로시저들을 만들었습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">next</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">2</span>)</span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      (<span class="name"><span class="built_in">+</span></span> n <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-find-divisor</span> n test-divisor)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&gt;</span></span> (<span class="name">square</span> test-divisor) n) n)</span><br><span class="line">        ((<span class="name">divides?</span> n test-divisor) test-divisor)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">find-divisor</span> n (<span class="name">next</span> test-divisor)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-smallest-divisor</span> n)</span><br><span class="line">  (<span class="name">new-find-divisor</span> n <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-prime?</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name">new-smallest-divisor</span> n) n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-timed-prime-test</span> n)</span><br><span class="line">  (<span class="name">new-start-prime-test</span> n (<span class="name">runtime</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-start-prime-test</span> n start-time)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">new-prime?</span> n)</span><br><span class="line">      (<span class="name">report-prime</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">runtime</span>) start-time) n)))</span><br></pre></td></tr></table></figure>
<p>그리곤 테스트케이스를 몇개 실행시켜 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;orginal&quot;</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">10000000033</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">10000000033</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">10000000033</span>)</span><br><span class="line">(<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line">(<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;new&quot;</span>)</span><br><span class="line">(<span class="name">new-timed-prime-test</span> <span class="number">10000000033</span>)</span><br><span class="line">(<span class="name">new-timed-prime-test</span> <span class="number">10000000033</span>)</span><br><span class="line">(<span class="name">new-timed-prime-test</span> <span class="number">10000000033</span>)</span><br></pre></td></tr></table></figure>
<p>결과는 예상 밖이었습니다.<br />
<img data-src="/img/sicp/chapter-1/exercise-1-23-1.png" alt="크게 성능에서 차이를 보이지 않는 두 프로시저" /></p>
<p>별로 큰 차이가 없었습니다.<br />
다른 사이트의 결과물들을 보면 &quot;1.6배정도 빨랐다. &quot; &quot;1.5배정도 빨랐다. &quot;같은 말들이 많은데 저는 몇번을 돌려 보았지만 큰 차이를 보지 못했습니다.<br />
원래 이 문제의 정답은 &quot;if문을 실행하는 데에도 시간이 걸리기 때문에 정확히 2배는 아니다. &quot;입니다.<br />
그런데 제 실행 결과는 1.5배는 커녕 1배정도 되는 것 같습니다.<br />
if의 실행시간이 생각보다 오래걸리나 봅니다.</p>
<h3 id="if없이-구현"><a class="markdownIt-Anchor" href="#if없이-구현"></a> if없이 구현</h3>
<p>이번에는 실험의 일환으로 next프로시저 대신 처음부터 (+ new-divisor 2)를 써서<br />
if문을 없애 보도록 하겠습니다.<br />
이렇게 하면 실행시간이 반으로 줄지 않을까 싶었습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-find-divisor</span> n test-divisor)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&gt;</span></span> (<span class="name">square</span> test-divisor) n) n)</span><br><span class="line">        ((<span class="name">divides?</span> n test-divisor) test-divisor)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">find-divisor</span> n (<span class="name"><span class="built_in">+</span></span> test-divisor <span class="number">2</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-smallest-divisor</span> n)</span><br><span class="line">  (<span class="name">new-find-divisor</span> n <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-23-2.png" alt="그럼에도 불구하고 성능차이가 거의 없는 두 프로시저" /></p>
<p>ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ</p>
<p>이전 보다는 확실히 빨리 계산되는 경우가 많았습니다.<br />
그럼에도 별로 나아진 것이 없어보입니다.<br />
이론과 실제가 많이 다르다는 것을 느낄 수 있는 하루였습니다.</p>
<p>허접한 글 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.25 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-25/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Alyssa P.Hacker는 expmod를 만들면서 쉽게 할 수 있는 일을 너무 복잡하게 한다고 투덜거렸다. 거듭제곱 값을 어떻게 구하는지 자신이 잘 알고 있으며, 아래처럼 하면 된다고 말한다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">fast-expt</span> base exp) m))</span><br></pre></td></tr></table></figure>
<p>참말 이렇게 해도 되는가? 이 프로시저를 소수 찾는 일에 그대로 써도 되는지 설명하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>새로 만든 expmod는 메모리가 수용할 수 없는 크기의 수를 만든다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제에서 나온 대로 프로시저를 짜고 아래와 같은 코드를 실행시켰습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">prime?</span> <span class="number">1009</span> <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-25.png" alt="메모리 부족으로 강제종료" /></p>
<p>메모리 부족으로 프로세스가 정상종료하지 못했습니다.<br />
어쩌면 당연한 결과일지도 모릅니다.</p>
<p>(prime? 1009 100)를 계산하기 위해서는<br />
우선 1009보다 작은 어떤 정수 a에 대해<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>1009</mn></msup></mrow><annotation encoding="application/x-tex">a^{1009}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>를 계산해야 합니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>btye가 1KB입니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>btye가 1MB입니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>btye가 1GB입니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>만으로도 기가단위입니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>1009</mn></msup></mrow><annotation encoding="application/x-tex">a^{1009}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>는 메모리가 감당하기에는 너무 큰 숫자입니다.</p>
<p>반면, 책에서 설명한 expmod프로시저는 수가 너무 커지기 전에 미리 모듈러 연산을 진행하므로 메모리를 많이 차지하지 않습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br><span class="line">                    m))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br></pre></td></tr></table></figure>
<p>효율적인 알고리즘의 필요성을 다시한번 느낍니다.</p>
<p>참고로 위 expmod프로시저가 이해가 되지 않으신다면 <a href="/algorithm/expmod">이 글</a>을 추천합니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.24 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-24/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-1/exercise-1-22">연습문제 1.22</a>의 timed-prime-test를 fast-prime?(페르마 검사)를 쓰도록 고친 다음에, 연습문제에서 찾아낸 소수 12개를 다시 검사해 보자. 페르마 검사는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>정도로 자라나므로 1,000,000 언저리 소수를 찾을 때와 1,000 언저리 소수를 찾을 때 걸리는 시간이 얼마나 차이난다고 볼 수 있는가? 그 생각이 실험 결과와 맞아 떨어지는가?  잘 맞아 떨어지지 않는다면, 그 까닭을 설명할 수 있겠는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>이론과 실제는 다르다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>새로운 prime?과 그외 프로시저들은 다음과 같이 구상했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">report-prime</span> elapsed-time)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;***&quot;</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> elapsed-time))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br><span class="line">                    m))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fermat-test</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try-it</span> a)</span><br><span class="line">    (<span class="name"><span class="built_in">=</span></span> (<span class="name">expmod</span> a n n) a))</span><br><span class="line">  (<span class="name">try-it</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> (<span class="name">random</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?</span> n times)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> times <span class="number">0</span>) true)</span><br><span class="line">        ((<span class="name">fermat-test</span> n) (<span class="name">prime?</span> n (<span class="name"><span class="built_in">-</span></span> times <span class="number">1</span>)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> false)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">start-prime-test</span> n start-time)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">prime?</span> n <span class="number">100</span>)</span><br><span class="line">      (<span class="name">report-prime</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">runtime</span>) start-time) n)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">timed-prime-test</span> n)</span><br><span class="line">  (<span class="name">start-prime-test</span> n (<span class="name">runtime</span>)))</span><br></pre></td></tr></table></figure>
<p>위의 코드를 보시면 아시겠지만, 페르마 검사를 하는 횟수는 100으로 설정하였습니다.<br />
다음의 소수 12개에 대해 시간을 재보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">timed-prime-test</span> <span class="number">1009</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">1013</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">1019</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">10007</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">10009</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">10037</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">100003</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">100019</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">100043</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">1000003</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">1000033</span>)</span><br><span class="line">(<span class="name">timed-prime-test</span> <span class="number">1000037</span>)</span><br></pre></td></tr></table></figure>
<p>이론상 페르마 검사는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>정도로 자라나므로<br />
1,000 언저리의 수와 1,000,000 언저리의 수는 두배의 속도차이가 나야 합니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-24.png" alt="시간복잡도와 얼추 일치하는 실행 시간" /></p>
<p>얼추 두배인것 같기도 하지만 역시나 약간의 차이가 있습니다.<br />
if식을 포함한 다른 프로시저들은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>에 표시되어 있지 않기 때문에 생기는 현상입니다.</p>
<p>또다시 이전의 문제들과 같은 결론을 내려야할 것 같습니다.<br />
이론과 실제는 다르다.</p>
<p>참고로 위 expmod프로시저가 이해가 되지 않으신다면 <a href="/algorithm/expmod">이 글</a>을 추천합니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.27 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-27/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>원주 47에 나온 카마이클 수<sup>Carmichael number</sup>가 참말 페르마 검사를 쓸모없게 만드는지 알아보자. 정수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>을 받아서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>인 모든 정수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>를 두고 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">a^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">modulo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>으로 맞아떨어지는지 알아보는 프로시저를 만든 다음,  이 프로시저로 카마이클 수를 검사해 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>소수가 아님에도 불구하고 페르마 검사를 통과하는 수가 있다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제에서 요구하는 바에 맞게 기존의 코드를 아래와 같이 수정했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fermat-test</span> n k)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try-it</span> a)</span><br><span class="line">    (<span class="name"><span class="built_in">=</span></span> (<span class="name">expmod</span> a n n) a))</span><br><span class="line">  (<span class="name">try-it</span> k))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?-iter</span> n times)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> times <span class="number">0</span>) true)</span><br><span class="line">        ((<span class="name">fermat-test</span> n times) (<span class="name">prime?-iter</span> n (<span class="name"><span class="built_in">-</span></span> times <span class="number">1</span>)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> false)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?</span> n)</span><br><span class="line">  (<span class="name">prime?-iter</span> n (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))</span><br></pre></td></tr></table></figure>
<p>그리곤 카마이클 수들을 시험해 보았습니다.<br />
참고로 카마이클 수는 소수가 아님에도 불구하고 페르마 검사를 통과하는 수를 말합니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>561</mn><mo>=</mo><mn>3</mn><mo>×</mo><mn>11</mn><mo>×</mo><mn>17</mn></mrow><annotation encoding="application/x-tex">561=3\times11\times17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">6</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1105</mn><mo>=</mo><mn>5</mn><mo>×</mo><mn>13</mn><mo>×</mo><mn>17</mn></mrow><annotation encoding="application/x-tex">1105=5\times13\times17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1729</mn><mo>=</mo><mn>7</mn><mo>×</mo><mn>13</mn><mo>×</mo><mn>19</mn></mrow><annotation encoding="application/x-tex">1729=7\times13\times19</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mord">2</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">9</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2465</mn><mo>=</mo><mn>5</mn><mo>×</mo><mn>17</mn><mo>×</mo><mn>29</mn></mrow><annotation encoding="application/x-tex">2465=5\times17\times29</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">4</span><span class="mord">6</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">9</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6601</mn><mo>=</mo><mn>7</mn><mo>×</mo><mn>23</mn><mo>×</mo><mn>41</mn></mrow><annotation encoding="application/x-tex">6601=7\times23\times41</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">6</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">1</span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">prime?</span> <span class="number">561</span>)</span><br><span class="line">(<span class="name">prime?</span> <span class="number">1105</span>)</span><br><span class="line">(<span class="name">prime?</span> <span class="number">1729</span>)</span><br><span class="line">(<span class="name">prime?</span> <span class="number">2465</span>)</span><br><span class="line">(<span class="name">prime?</span> <span class="number">6601</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-27.png" alt="소수가 아닌 수들도 테스트를 통과하는 모습" /></p>
<p>카마이클 수들은 모두 소수가 아님에도 페르마 검사를 통과하는 모습을 볼 수 있었습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.26 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-26/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Louis Reasoner는 <a href="/sicp/chapter-1/exercise-1-24">연습문제 1.24</a>를 푸느라 애를 많이 썼다. 그런데 fast-prime?이 prime 보다 훨씬 느린 듯 보였다. Louis는 친구인 Eva Lu Ator보고 도와 달라고 하였다. 그래서 Eva Louis의 프로그램을 살펴보았더니, expmod가 square를 부르지 않고 그냥 곱셈을 쓰고 있었다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span>((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">       (<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m)</span><br><span class="line">                       (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br><span class="line">                    m)</span><br><span class="line">       (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br></pre></td></tr></table></figure>
<p>&quot;이렇게 하면 뭐가 달라?&quot;하면서 Louis가 Eva는 &quot;난 알겠는데?&quot;하면서 그 까닭을 이렇게 설명했다. &quot;이거 봐. 프로시저를 이러게 쓰면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>프로시저가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>프로시저가 되어 버린단 말이아. &quot; Eva의 말이 무슨 뜻일까?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>square 프로시저를 곱연산으로 처리하면<br />
한번만 실행해도 될 프로시저를 두번 실행하게 될 수도 있다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>기존의 프로시저와 달라진 것을 생각해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m)</span><br><span class="line">   (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br></pre></td></tr></table></figure>
<p>위의 식에서는 제곱을 하기 위해 expmod를 한번만 계산하면 됩니다.<br />
반면, 아래의 식에서는 곱셈연산을 하기 위해 expmod를 두번 계산해야 합니다.</p>
<p>즉, 기존에 비해 expmod를 두 배 사용하는 것입니다.</p>
<p>처음에는 n이 2n이 되어서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mrow><mn>2</mn><mi>n</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log{2n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>이 되므로 성능에 큰 차이는 없는 것이 아닌가? 하는 의문이 들었습니다.<br />
하지만 조금 생각해 보니 왜 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이 되는지 알 수 있었습니다.</p>
<p>square를 단순곱셈으로 고치게 되면, 단지 그 연산에서만 영향을 주는 것이 아닙니다.<br />
그 프로시저의 다음 프로시저까지 영향을 주게 되는 것입니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-26.png" alt="이번에는 꽤 잘그린 프로시저 실행도" /></p>
<p>위의 다이어그램을 보시면, 기존의 프로시저에 비해 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>만큼의 수행을 더 하는 것을 볼 수 있습니다.</p>
<p>즉 프로시저의 시간복잡도는<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span> 에 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>≤</mo><mi>f</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>w</mi><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n≤ftarrow 2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>을 대입한,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이 되는 것입니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.28 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-28/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>페르마 검사가 틀린 답을 내놓지 않게 바꾼 것 가운데 밀러-라빈 검사라는게 있다. 이 검사는 페르마의 작은 정리와 달리, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이 소수고 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>보다 적고 0보다 큰 정수면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">a^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>은 1과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">modulo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>으로 맞아떨어진다는 사실을 바탕으로 한다. 밀러-라빈 검사에서 어떤 수<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이 소수인지 알려면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>인 수를 제멋대로 골라, expmod 프로시저를 써서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">a^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">modulo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 을 얻는다. expmod에서 제곱을 할 때마다 ‘1 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">modulo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>의 뻔하지 않은 제곱근’, 곧 1이나 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>은 아니면서 제곱한 값이 1 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">modulo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>인 수인지 알아보고 그런 1의 제곱근이 있다면 , <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이 소수가 아님을 밝힐 수 있다. 또 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이 소수 아닌 홀수라면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>인 수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 가운데 적어도 반은, 이런 방법으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">a^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>을 계산할 때 1 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">modulo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>의 뻔한 제곱근이 아님이 드러난다. (이런 까닭에 밀러-라빈 검사는 틀린 판단을 하지 않게 된다.) 뻔하지 않은 1의 제곱근을 찾아냈음을 알 수 있도록 expmod를 고친 다음에 fremat-test를 흉내 내어 밀러-라빈 검사 프로시저를 짜보라. 여러 소수나 소수 아닌 수를 보기 삼아 만든 프로시저가 잘 돌아가는지 시험해 보자.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>SICP는 수학적 지식을 꽤 많이 요구한다.<br />
밀러-라빈 테스트로 페르마 테스트의 오류를 고칠 수 있다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이 문제는 문제 자체를 해석하는 데에 시간이 많이 걸렸습니다.<br />
원문으로 문제를 읽으면 이해가 약간 더 잘되지만 그래도 이해하는 데에 한참 걸렸습니다.<br />
이해하기 쉽게 차근차근 설명해 보겠습니다.</p>
<h3 id="1-밀러-라빈-검사"><a class="markdownIt-Anchor" href="#1-밀러-라빈-검사"></a> 1. 밀러-라빈 검사</h3>
<p>밀러-라빈 검사는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이 소수라면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>a</mi><mo>&lt;</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1≤ a&lt;n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>인 모든 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>에 대해 아래의 식을 만족한다는 사실을 바탕으로 합니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^{n-1}\mod n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>이를 계산하기 위해서 이전 연습문제들에서 사용한 expmod 프로시저를 사용해야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">expmod</span> a (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) n)</span><br></pre></td></tr></table></figure>
<p>여기까지는 다들 이해하셨을 것이라 생각합니다.<br />
문제는 여기서부터입니다.</p>
<h3 id="2-대체-1-modulo-n의-뻔하지-않은-제곱근이-무엇인가"><a class="markdownIt-Anchor" href="#2-대체-1-modulo-n의-뻔하지-않은-제곱근이-무엇인가"></a> 2. 대체  (1 modulo n)의 뻔하지 않은 제곱근이 무엇인가?</h3>
<p>이 단락을 완벽하게 이해하기 위해서는 아래의 정리를 숙지하고 있어야 합니다.</p>
<p><span style="color:#8fbc8f">소수 P와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>a</mi><mo>&lt;</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1≤ a\lt P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>인 어떤 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>에 대해</span><br />
<span style="color:#8fbc8f">(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2 \mod P = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)을 만족하는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>는</span><br />
<span style="color:#8fbc8f">1과 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)밖에 없다.</span></p>
<p>한번 증명해 보겠습니다.</p>
<p>소수인 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>a</mi><mo>&lt;</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1≤ a\lt P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>인 정수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>를 상정하겠습니다.<br />
이때 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2 \mod P = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)을 만족하는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>값을 찾아보겠습니다.</p>
<p>(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2 \mod P = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)이므로,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><mi>P</mi><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2 = Pn + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>이 성립합니다. (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n≥ 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>인 정수)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><mi>P</mi><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2 = Pn + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>에서<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>n</mi><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Pn = a^2 - 1 = (a-1)(a+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>는 소수이므로, n이 0이 아니라면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>는 무조건 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a-1),(a+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 둘 중에 하나입니다.<br />
이때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>&lt;</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a\lt P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>이므로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P=(a+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>입니다.</p>
<p>정리하자면, (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2 \mod P = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)이 성립하기 위해서는<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>이거나 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>이어야 하는 것입니다.</p>
<p>다시 돌아가서, (1 modulo n)의 뻔하지 않은 제곱근이란,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>이거나 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a=n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>이 아님에도 불구하고, (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2 \mod n = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)을 만족하는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>를 말합니다.<br />
그리고 이런 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>가 존재한다면, n은 소수가 아닌 것입니다.</p>
<p>이 증명 과정을 책에서는 생략했기 때문에, 문제 이해가 극도로 어려웠습니다.</p>
<h3 id="3-expmod-프로시저-살펴보기"><a class="markdownIt-Anchor" href="#3-expmod-프로시저-살펴보기"></a> 3. expmod 프로시저 살펴보기</h3>
<p>지금까지 사용한 expmod 프로시저는 다음과 같습니다.<br />
(혹시라도 expmod의 원리가 궁금하시다면 <a href="/algorithm/expmod">이 글</a>을 봐주시기 바랍니다.)</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br><span class="line">                    m))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>여기서 주목할 점은, 프로시저가  square를 포함한다는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m)) m)</span><br></pre></td></tr></table></figure>
<p>위 과정에서 expmod의 결과가 <strong>(1 modulo m)의 뻔하지 않은 제곱근</strong>이라면, 더 계산할 것도 없이 m은 소수가 아닙니다.<br />
그러므로 square 연산을 하기 전에 <strong>뻔하지 않은 제곱근</strong> 검사를 하면, 계산과정을 단축시킬 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">nontrivial-test</span> x m)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> x <span class="number">1</span>))</span><br><span class="line">           (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> x (<span class="name"><span class="built_in">-</span></span> m <span class="number">1</span>)))</span><br><span class="line">           (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> x) m) <span class="number">1</span>))</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> x) m)))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>위의 프로시저를 써서 expmod를 새로 쓰면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">nontrivial-test</span> x m)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> x <span class="number">1</span>))</span><br><span class="line">           (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> x (<span class="name"><span class="built_in">-</span></span> m <span class="number">1</span>)))</span><br><span class="line">           (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> x) m) <span class="number">1</span>))</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> x) m)))</span><br><span class="line">    </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name">nontrivial-test</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m)</span><br><span class="line">                    m))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br></pre></td></tr></table></figure>
<h3 id="4-prime-실행해보기"><a class="markdownIt-Anchor" href="#4-prime-실행해보기"></a> 4. prime? 실행해보기</h3>
<p>이제 밀러-라빈 검사를 기반으로 prime? 프로시저를 만들어 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name">nontrivial-test</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m)</span><br><span class="line">                    m))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">nontrivial-test</span> x m)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> x <span class="number">1</span>))</span><br><span class="line">           (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> x (<span class="name"><span class="built_in">-</span></span> m <span class="number">1</span>)))</span><br><span class="line">           (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> x) m) <span class="number">1</span>))</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> x) m)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">miller-rabin-test</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try-it</span> a)</span><br><span class="line">    (<span class="name"><span class="built_in">=</span></span> (<span class="name">expmod</span> a (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) n) <span class="number">1</span>))</span><br><span class="line">  (<span class="name">try-it</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> (<span class="name">random</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?</span> n times)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> times <span class="number">0</span>) true)</span><br><span class="line">        ((<span class="name">miller-rabin-test</span> n) (<span class="name">prime?</span> n (<span class="name"><span class="built_in">-</span></span> times <span class="number">1</span>)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> false)))</span><br></pre></td></tr></table></figure>
<p>그리고 카마이클 수를 포함한 여러 수를 테스트해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">prime?</span> <span class="number">7</span> <span class="number">100</span>)</span><br><span class="line">(<span class="name">prime?</span> <span class="number">11</span> <span class="number">100</span>)</span><br><span class="line">(<span class="name">prime?</span> <span class="number">12</span> <span class="number">100</span>)</span><br><span class="line">(<span class="name">prime?</span> <span class="number">561</span> <span class="number">100</span>)  </span><br><span class="line">(<span class="name">prime?</span> <span class="number">1105</span> <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-28.png" alt="카마이클 수가 소수가 아니라고 판정되는 모습" /></p>
<p>카마이클 수도 소수로 판정하지 않고 #f를 반환하는 모습입니다.</p>
<p>긴 글 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.29 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-29/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>심슨의 규칙은 위 방법보다 더 정확하게 적분 값을 구할 수 있는 방법이다.<br />
이 규칙에 따라 a에서 b 사이에서 함수 f를 정적분한 값에 가까운 값은 다음처럼 어림잡는다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>h</mi><mn>3</mn></mfrac><mo stretchy="false">[</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\frac{h}{3}[y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>0</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+4y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>1</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>2</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+4y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>3</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>4</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+⋯+2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+4y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span></span></span></span></p>
<p>위 식에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이 짝수일 때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">h=(b-a)/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span>이고, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>k</mi><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=f(a+kh)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>이다. (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이 커질수록 조금씩 정답에 다가간다.) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo separator="true">,</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">f, a, b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span>를 인자로 받아서 심슨의 규칙으로 정적분값을 얻는 프로시저를 짜보라. 그런 다음, 그 프로시저로 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>100</mn><mo separator="true">,</mo><mi>n</mi><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">n=100,n=1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>인 경우) 0부터 1사이에서 cube를 정적분한 값을 얻고, 그 값을 앞서 integral 프로시저로 얻은 것과 견주어 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>차수 높은 프로시저로 요악하는 법을 연습할 수 있는 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이 문제를 해결하기 위해서는 앞의 절인 1.3.1절의 sum과 integral을 잘 이해하고 있어야 합니다.</p>
<h3 id="1-sum-프로시저"><a class="markdownIt-Anchor" href="#1-sum-프로시저"></a> 1. sum 프로시저</h3>
<p>sum 프로시저부터 살펴보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="built_in">+</span></span> (<span class="name">sum</span> term (<span class="name">next</span> a) next b)</span><br><span class="line">         (<span class="name">term</span> a))))</span><br></pre></td></tr></table></figure>
<p>이 프로시저의 특이한 점은 프로시저를 인수로 받는다는 것입니다.<br />
인수인 term과 next의 자리에는 데이터가 아닌 프로시저가 옵니다.</p>
<p>term과 next의 역할은 프로시저의 내부를 보면 알 수 있습니다.<br />
sum이 반환하는 값은 결론적으로 (term a)들의 합입니다.<br />
이때 a값이 순차적으로 변하는 규칙을 명시한 것이 next라고 볼 수 있습니다.</p>
<p>예시로 아래의 예는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>가 1~5일때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>의 합을 나타낸 과정입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">next</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">+</span></span> n <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">sum</span> square <span class="number">1</span> next <span class="number">5</span>) #<span class="number">55</span></span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>3</mn><mn>2</mn></msup><mo>+</mo><msup><mn>4</mn><mn>2</mn></msup><mo>+</mo><msup><mn>5</mn><mn>2</mn></msup><mo>=</mo><mn>55</mn></mrow><annotation encoding="application/x-tex">1^2+2^2+3^2+4^2+5^2=55</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">5</span></span></span></span></p>
<h3 id="2-integral-프로시저"><a class="markdownIt-Anchor" href="#2-integral-프로시저"></a> 2. integral 프로시저</h3>
<p>integral 프로시저는 sum 프로시저를 이용해서 만든 정적분 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">integral</span> f a b dx)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">add-dx</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> x dx))</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> (<span class="name">sum</span> f (<span class="name"><span class="built_in">+</span></span> a (<span class="name"><span class="built_in">/</span></span> dx <span class="number">2.0</span>)) add-dx b)</span><br><span class="line">     dx))</span><br></pre></td></tr></table></figure>
<p>위의 프로시저에서 눈여겨볼 점은 a자리에 (+ a (/ dx 2.0)이 들어간다는 것입니다.<br />
위의 프로시저를 이해하기 위해 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>함수의 경우를 생각해 보겠습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-29-1.png" alt="integral 프로시저 설명" /></p>
<p>위의 그래프에서 파란색 선의 길이는 각각 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>0.5</mn><mi>d</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(a+0.5dx)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1.5</mn><mi>d</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(a+1.5dx)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>2.5</mn><mi>d</mi><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">f(a+2.5dx), ⋯</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span>를 계산한 값을 의미합니다.<br />
그 길이의 합에 dx를 곱하게 되면, 최종적으로 프로시저의 결과는 노란색 사각형들의 넓이의 합이 됩니다.<br />
노란색 사각형들의 넓이의 합은 얼추 정적분값과 비슷해집니다.</p>
<h3 id="3-심슨-규칙에-따라-정적분-프로시저-만들기"><a class="markdownIt-Anchor" href="#3-심슨-규칙에-따라-정적분-프로시저-만들기"></a> 3. 심슨 규칙에 따라 정적분 프로시저 만들기</h3>
<p>저는 아래와 같이 심슨 규칙을 프로시저화 했습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>h</mi><mn>3</mn></mfrac><mo stretchy="false">[</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\frac{h}{3}[y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>0</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+4y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>1</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>2</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+4y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>3</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub>4</sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>2</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+⋯+2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding="application/x-tex">+4y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">simpson-rule</span> f a b n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">next</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> x <span class="number">1</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> h</span><br><span class="line">    (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">-</span></span> b a) n))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">y</span> k)</span><br><span class="line">    (<span class="name">f</span> (<span class="name"><span class="built_in">+</span></span> a (<span class="name"><span class="built_in">*</span></span> k h))))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">term</span> k)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> k <span class="number">0</span>) (<span class="name">y</span> <span class="number">0</span>))</span><br><span class="line">          ((<span class="name"><span class="built_in">=</span></span> k n) (<span class="name">y</span> n))</span><br><span class="line">          ((<span class="name"><span class="built_in">even?</span></span> k) (<span class="name"><span class="built_in">*</span></span> (<span class="name">y</span> k) <span class="number">2</span>))</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">y</span> k) <span class="number">4</span>))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> (<span class="name"><span class="built_in">/</span></span> h <span class="number">3</span>)</span><br><span class="line">     (<span class="name">sum</span> term <span class="number">0</span> next n)))</span><br></pre></td></tr></table></figure>
<p>그리고 문제의 요구사항대로 아래의 식을 실행했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">integral</span> cube <span class="number">0</span> <span class="number">1</span> <span class="number">0.01</span>)</span><br><span class="line">(<span class="name">simpson-rule</span> cube <span class="number">0</span> <span class="number">1.0</span> <span class="number">100</span>)</span><br><span class="line">(<span class="name">simpson-rule</span> cube <span class="number">0</span> <span class="number">1.0</span> <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>심슨 규칙은 기존의 인테그랄에 비해 더 정확한 적분을 하는 것을 볼 수 있습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-29-2.png" alt="위와 같은 상황에서 심슨 규칙이 더 0.25에 가까운 모습" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.3 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-3/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>세 숫자를 인자로 받아 그 가운데 큰 숫자 두개를 제곱한 다음, 그 두 값을 덧셈하여 내놓는 프로시저를 정의하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>각각의 가능한 케이스를 나누는 것이 이 문제의 핵심입니다. 세개의 인자 중 가장 큰 인자와 두번째로 큰 인자를 골라내는 것보다 가장 작은 인자 하나를 추려내는 것이 효율적입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><img data-src="/img/sicp/chapter-1/exercise-1-3.png" alt="프로시저가 실행되는 모습" /></p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.30 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-30/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>위에서 짠 sum 프로시저는 선형 재귀 프로세스를 만들어 낸다. 이를 다음처럼 선형으로 반복하게끔 고칠 수 있다. 빈 곳을 채워 보라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> &lt;??&gt;</span><br><span class="line">        &lt;??&gt;</span><br><span class="line">        (<span class="name">iter</span> &lt;??&gt; &lt;??&gt;)))</span><br><span class="line">  (<span class="name">iter</span> &lt;??&gt; &lt;??&gt;))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>되도는 프로세스를 반복하는 프로세스로 고치려면<br />
결과값을 저장할 인자 하나를 상정하는 것이 좋습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>앞의 연습문제들에서 반복하는 프로세스를 많이 만들어 봤으므로, 어떻게 해야 하는 지는 본능적으로 떠올랐습니다.</p>
<p>바로 result에 모든 결과를 축적하면서 반복을 진행하는 것입니다.</p>
<p>if식의 술어인 반복 탈출 조건은 당연히 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>&gt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a&gt;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>입니다.<br />
next 프로시저에 따라 정확하게 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>가 나오지 않을 수 있기 때문입니다.<br />
그리고 탈출 조건을 만족할 때에 지금까지 값을 축적한 result를 반환해야 하므로 if식의 참일때 결과는 result입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> &lt;??&gt; &lt;??&gt;)))</span><br><span class="line">  (<span class="name">iter</span> &lt;??&gt; &lt;??&gt;))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>아직 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>&gt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a&gt;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>가 아니라면,<br />
(term a)값을 result에 축적하고<br />
(next a)를 iter 프로시저에 넘겨줘야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">+</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> &lt;??&gt; &lt;??&gt;))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>sum 프로시저의 시작 iter에는 당연히 a의 초기값과 result를 축적할 0이 들어가야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">+</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>시험삼아 아래의 코드를 실행시켜 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">inc</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">+</span></span> x <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">+</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">sum</span> square <span class="number">1</span> inc <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>3</mn><mn>2</mn></msup><mo>+</mo><msup><mn>4</mn><mn>2</mn></msup><mo>+</mo><msup><mn>5</mn><mn>2</mn></msup><mo>=</mo><mn>55</mn></mrow><annotation encoding="application/x-tex">1^2+2^2+3^2+4^2+5^2=55</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">5</span></span></span></span></p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-30.png" alt="정상적으로 작동하는 sum 프로시저" /></p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.32 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-32/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>a. 아래처럼 a에서 b사이에 있는 어떤 수열을 묶어 가는 개념, 곧 accumulate가 있다고 할때, sum과 연습문제 1.31에서 만든 product가 이 개념을 응용한 보기 가운데 하나임을 밝혀라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">accumulate</span> combiner null-value term a next b)</span><br></pre></td></tr></table></figure>
<p>accumulate는 이어지는 두 값을 묶는 프로시저 combiner와, 계산할 값이 없을 때 쓰는 null-value인자를 받는다. 나머지 인자는 sum이나 product에서 쓰는 인자(term,a,next,b)와 같다. accumulate를 만든 다음에 sum과 product를 accumulate를 불러 쓰는 프로시저로 짜 보라.</p>
<p>b. accumulate의 프로세스가 되돈다면 반복하도록 고쳐 쓰고, 그 반대로 반복한다면 되돌도록 고쳐 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>구조가 비슷한 프로시저들은 차수가 더욱 높은 프로시저로 요약함으로써 표현력을 극대화할 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-accumulate로-sum과-product-짜기"><a class="markdownIt-Anchor" href="#a-accumulate로-sum과-product-짜기"></a> a. accumulate로 sum과 product 짜기</h3>
<p>앞의 예제들에서 만든 sum과 product 프로시저를 한번 비교해 보겠습니다.</p>
<p><br /><br /><br /><br /></p>
<p>sum 프로시저</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">+</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<div class="small-blank"></div>
<p>product 프로시저</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">*</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>두 프로시저의 차이는 두가지 밖에 없습니다.</p>
<ol>
<li>result에 값을 축적하는 방식이 +와 *로 다르다.</li>
<li>result의 초기값이 0과 1로 다르다.</li>
</ol>
<p><br /><br /><br /><br /></p>
<p>위의 두가지 요소는 각각 accumulate 프로시저의 인자인 combiner와 null-value로 추상화할 수 있습니다.<br />
이런 아이디어로 accumulate 프로시저를 짜보면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> combiner null-value term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name">combiner</span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a null-value))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>위의 두 프로시저와 크게 다른 것이 없음을 알 수 있습니다.</p>
<p>accumulate로 product와 sum을 구현하면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name">accumulate</span> + <span class="number">0</span> term a next b))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product</span> term a next b)</span><br><span class="line">  (<span class="name">accumulate</span> * <span class="number">1</span> term a next b))</span><br></pre></td></tr></table></figure>
<h3 id="b-accumulate를-되도는-프로세스가-되도록-짜기"><a class="markdownIt-Anchor" href="#b-accumulate를-되도는-프로세스가-되도록-짜기"></a> b. accumulate를 되도는 프로세스가 되도록 짜기</h3>
<p>기본의 반복하는 프로세스는 result에 값을 축적했습니다.<br />
되도는 프로세스는 result없이 combiner로 (term a)의 값을 묶어주기만 하면 됩니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> combiner null-value term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        null-value</span><br><span class="line">        (<span class="name">combiner</span> (<span class="name">iter</span> (<span class="name">next</span> a))</span><br><span class="line">                  (<span class="name">term</span> a))))</span><br><span class="line">  (<span class="name">iter</span> a))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.31 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-31/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>a. sum 프로시저는 차수 높은 프로시저로 간추릴 수 있는 보기 가운데 아주 단순한 것이다. sum과 비슷하게, 어떤 구간 속에 있는 점마다 정해진 함수의 값을 구하고 그 값을 모두 곱하는 프로시저 product를 짜보라. 그런 다음 아래 식을 파탕으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">π</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>에 가까운 값을 얻어 보라.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>4</mn></mfrac><mo>=</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mn>4</mn><mo>⋅</mo><mn>4</mn><mo>⋅</mo><mn>6</mn><mo>⋅</mo><mn>6</mn><mo>⋅</mo><mn>8</mn><mo>⋯</mo></mrow><mrow><mn>3</mn><mo>⋅</mo><mn>3</mn><mo>⋅</mo><mn>5</mn><mo>⋅</mo><mn>5</mn><mo>⋅</mo><mn>7</mn><mo>⋅</mo><mn>7</mn><mo>⋯</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{π}{4}=\frac{2⋅ 4 ⋅ 4 ⋅ 6 ⋅ 6 ⋅ 8 ⋯}{3 ⋅ 3 ⋅ 5 ⋅ 5⋅ 7⋅ 7⋯}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>b. product의 프로세스가 되돈다면 반복하도록 고쳐쓰고, 그 반대로 반복한다면 되돌게끔 고쳐 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>차수높은 프로시저를 사용하면, 수식을 표현하는 표현력을 극대화할 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-π값-찾기"><a class="markdownIt-Anchor" href="#a-π값-찾기"></a> a. π값 찾기</h3>
<p>이전 문제의 sum 프로시저를 참고해서 product 프로시저를 만들어 보겠습니다.<br />
이전 문제에서는 result에 값을 더해서 축적했다면 이번에는 곱해서 축적하는것 밖에는 크게 달라진 것이 없습니다.<br />
물론 초기값은 0이 아니라 1로 정해줘야 합니다.</p>
<p><br /><br /><br /><br /></p>
<p>sum 프로시저</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">+</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>product 프로시저</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">*</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>방금 만든 product로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">π</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>를 구해보겠습니다.<br />
저는 아래의 식에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>을 반복의 기본 단위로 삼았습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>4</mn></mfrac><mo>=</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mn>4</mn><mo>⋅</mo><mn>4</mn><mo>⋅</mo><mn>6</mn><mo>⋅</mo><mn>6</mn><mo>⋅</mo><mn>8</mn><mo>⋯</mo></mrow><mrow><mn>3</mn><mo>⋅</mo><mn>3</mn><mo>⋅</mo><mn>5</mn><mo>⋅</mo><mn>5</mn><mo>⋅</mo><mn>7</mn><mo>⋅</mo><mn>7</mn><mo>⋯</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{π}{4}=\frac{2⋅ 4 ⋅ 4 ⋅ 6 ⋅ 6 ⋅ 8 ⋯}{3 ⋅ 3 ⋅ 5 ⋅ 5⋅ 7⋅ 7⋯}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>4</mn></mfrac><mo>=</mo><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mn>4</mn></mrow><mrow><mn>3</mn><mo>⋅</mo><mn>3</mn></mrow></mfrac><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mfrac><mrow><mn>4</mn><mo>⋅</mo><mn>6</mn></mrow><mrow><mn>5</mn><mo>⋅</mo><mn>5</mn></mrow></mfrac><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mfrac><mrow><mn>6</mn><mo>⋅</mo><mn>8</mn></mrow><mrow><mn>7</mn><mo>⋅</mo><mn>7</mn></mrow></mfrac><mo stretchy="false">)</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\frac{π}{4}=(\frac{2⋅ 4}{3 ⋅ 3}) ⋅ (\frac{4 ⋅ 6}{5 ⋅ 5}) ⋅ (\frac{6 ⋅ 8}{7⋅ 7}) ⋯
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">7</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><msup><mi>n</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">f(n) = \frac{(n-1)(n+1)}{n^2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pi-quarter</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">*</span></span> (<span class="name"><span class="built_in">-</span></span> x <span class="number">1.0</span>) (<span class="name"><span class="built_in">+</span></span> x <span class="number">1.0</span>))</span><br><span class="line">       (<span class="name">square</span> x)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">next</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> x <span class="number">2.0</span>))</span><br><span class="line">  (<span class="name">product</span> f <span class="number">3.0</span> next n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pi</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> (<span class="name">pi-quarter</span> n)</span><br><span class="line">     <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>그리고 반복수를 10,000로 설정하고 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">π</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>값을 구해보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">pi</span> <span class="number">10000</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-31.png" alt="π값을 얼추 구해내는 프로시저" /></p>
<h3 id="b-되도는-프로시저-만들기"><a class="markdownIt-Anchor" href="#b-되도는-프로시저-만들기"></a> b. 되도는 프로시저 만들기</h3>
<p>반복하는 프로시저에서 되도는 프로시저를 만들어 보겠습니다.<br />
result에 곱해서 인수로 넘겨주는 대신에, 곱셈 연산으로 묶어주면 쉽게 구현할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name"><span class="built_in">*</span></span> result (<span class="name">term</span> a)))))</span><br><span class="line">  (<span class="name">iter</span> a <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      (<span class="name"><span class="built_in">*</span></span> (<span class="name">product</span> term (<span class="name">next</span> a) next b)</span><br><span class="line">         (<span class="name">term</span> a))))</span><br></pre></td></tr></table></figure>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.33 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-33/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>거르개<sup>filter</sup>라는 개념을 끌어들여, <a href="/sicp/chapter-1/exercise-1-32/">연습문제 1.32</a>에 나온 accumulate의 쓰임새를 더 넓혀 보자. 다시 말해, 정해진 넓이에 속하는 값 가운데 어떤 조건을 만족하는 값만 묶고 나머지는 걸러내는 accumulate를 만든다는 얘기다.이 프로시저를 filtered-accumulate라 한다. filtered-accumulate는 accumulate와 같은 인자를 받으며, 아울러 거르개로 쓸 술어 프로시저<sup>predicate</sup>까지 받아야 한다. filtered-accumulate로 다음 문제의 답이 되는 식을 써 보라.</p>
<p>a. (prime? 프로시저가 벌서 있다 치고) a에서 b 사이에 있는 모든 소수<sup>씨수</sup>를 제곱하여 더하는 식</p>
<p>b. n과 서로소인수, 즉 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">i&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이고 0보다 큰 정수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>C</mi><mi>D</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">GCD(i,n)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>이 되는, n보다 작고 0보다 큰 모든 정수를 곱하는 식</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>프로시저를 인자로 받을 수 있다면, 함수형 프로그래밍에 가까운 언어사용을 할 수 있다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="filtered-accumulate-구현"><a class="markdownIt-Anchor" href="#filtered-accumulate-구현"></a> filtered-accumulate 구현</h3>
<p>기존의 accumulate에 filter를 추가해서 구현해 보겠습니다.<br />
단순히 if문을 하나 더 추가시켜서 (fiter a)가 참이면, result에 결과를 축적하는 방식입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">filtered-accumulate</span> filter combiner null-value term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> a result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name">filter</span> a)</span><br><span class="line">            (<span class="name">iter</span> (<span class="name">next</span> a) (<span class="name">combiner</span> result (<span class="name">term</span> a)))</span><br><span class="line">            (<span class="name">iter</span> (<span class="name">next</span> a) result))))</span><br><span class="line">  (<span class="name">iter</span> a null-value))</span><br></pre></td></tr></table></figure>
<h3 id="a-a에서-b-사이에-있는-모든-소수를-제곱하여-더하는-식"><a class="markdownIt-Anchor" href="#a-a에서-b-사이에-있는-모든-소수를-제곱하여-더하는-식"></a> a. a에서 b 사이에 있는 모든 소수를 제곱하여 더하는 식</h3>
<p>prime? 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">divides?</span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> a b) <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">find-divisor</span> n test-divisor)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&gt;</span></span> (<span class="name">square</span> test-divisor) n) n)</span><br><span class="line">        ((<span class="name">divides?</span> n test-divisor) test-divisor)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">find-divisor</span> n (<span class="name"><span class="built_in">+</span></span> test-divisor <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">smallest-divisor</span> n)</span><br><span class="line">  (<span class="name">find-divisor</span> n <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name">smallest-divisor</span> n) n))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>위 prime?을 기반으로 문제에서 요구하는 식을 구하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">filtered-accumulate</span> prime? + <span class="number">0</span> square a inc b)</span><br></pre></td></tr></table></figure>
<p><span style="color:#8fbc8f">(inc는 1을 더하는 프로시저)</span></p>
<h3 id="b-n보다-작은-서로소를-곱하는-식"><a class="markdownIt-Anchor" href="#b-n보다-작은-서로소를-곱하는-식"></a> b. n보다 작은 서로소를 곱하는 식</h3>
<p>GCD 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">gcd</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> b <span class="number">0</span>)</span><br><span class="line">      a</span><br><span class="line">      (<span class="name"><span class="built_in">gcd</span></span> b (<span class="name"><span class="built_in">remainder</span></span> a b))))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>위 GCD를 기반으로 문제에서 요구하는 식을 구하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">disjoint?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">gcd</span></span> x n) <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">self</span> x)</span><br><span class="line">  x)</span><br><span class="line"></span><br><span class="line">(<span class="name">filtered-accumulate</span> disjoint? * <span class="number">1</span> self <span class="number">1</span> inc (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><span style="color:#8fbc8f">위의 식 자체로는 n이 정의되지 않았기 때문에 실행할 수 없습니다.</span></p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
        <tag>함수형 프로그래밍</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.34 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-34/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음 프로시저를 정의하였다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> g)</span><br><span class="line">  (<span class="name">g</span> <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>그런 다음 아래와 같이 실험해 보았다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">f</span> square) #<span class="number">4</span></span><br><span class="line">(<span class="name">f</span> (<span class="name"><span class="built_in">lambda</span></span> (z) (<span class="name"><span class="built_in">*</span></span> z (<span class="name"><span class="built_in">+</span></span> z + <span class="number">1</span>)))) # <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>실행기에 (f f)를 계산하라고 하면 어떤 일이 벌어지는가? 왜 그렇게 될까?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>다른 프로시저에 인자를 넣어주는 프로시저를 볼 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>바로 실행해 보겠습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-34.png" alt="오류가 나는 모습" /></p>
<p>오류가 나는 이유를 알아보기 위해 맛바꿈 계산법으로 전개해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">f</span> f)</span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">f</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">2</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>f는 프로시저를 인자로 받는 프로시저인데 숫자인 2를 인자로 받게 됩니다.<br />
(2 2)를 실행할 수는 없으므로, 에러를 발생시키는 것입니다.</p>
<p><br /><br /><br /><br /></p>
<p>이 문제의 의도는 아마도 아래의 프로시저를 살펴 보는 데에 있다고 생각합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> g)</span><br><span class="line">  (<span class="name">g</span> <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>다른 프로시저에 인자를 넣어주는 프로시저를 볼 수 있었습니다.</p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.35 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-35/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>1.2.2절에 나온 황금비 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span>가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>↦</mo><mn>1</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">x \mapsto 1+1/x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">x</span></span></span></span> 함수의 고정점이라는 것을 밝히고, 이런 사실을 바탕으로 fixed-point 프로시저로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span>를 찾아보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>고정점 찾기를 프로시저로 작성해볼 수 있는 시간이었습니다.<br />
let의 사용에 익숙해질 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>고정점에 대한 이해는 1.3.3절에서 충분히 했다고 생각합니다.<br />
고정점이란 결국 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">f(x)=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>인 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>를 찾는 것입니다.</p>
<p><br /><br /><br /><br /></p>
<p>아래의 식을 풀어보겠습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">f(x)=1+1/x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">x</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">x=1+1/x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">x</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^2=x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x^2-x-1=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac><mo>=</mo><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">x=\frac{1+\sqrt{5}}{2}=ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3829999999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0379999999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.3990085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span></p>
<p><br /><br /><br /><br /></p>
<p>fixed-point 프로시저로 정확한 값을 알아보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fixed-point</span> f first-guess)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">close-enough?</span> v1 v2)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> v1 v2)) tolerance))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next</span> (<span class="name">f</span> guess)))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name">close-enough?</span> guess next)</span><br><span class="line">          next</span><br><span class="line">          (<span class="name">try</span> next))))</span><br><span class="line">  (<span class="name">try</span> first-guess))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> (<span class="name"><span class="built_in">/</span></span> <span class="number">1</span> x)))</span><br><span class="line"></span><br><span class="line">(<span class="name">fixed-point</span> f <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-35.png" alt="ϕ에 가까순 소수" /></p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.36 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-36/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-1/exercise-1-22/">연습문제 1.22</a>에서 나온 기본 프로시저 newline과 display를 써서 이어지는 어림값을 찍어내도록 fixed-point를 고쳐 보라. 그리고 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>↦</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1000</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \mapsto \log(1000)/\log(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span><span class="mord">/</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>의 고정점을 찾아서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>x</mi></msup><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">x^x=1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>에 맞는 x값을 얻어라. (귀띔:Scheme의 기본 프로시저 log를 쓰면 자연 로그 값을 얻을 수 있다. 함수 값의 평균을 내어 잦아들 때와 그냥 놔둘 때 계산 단계를 얼마나 거치는지 알아보라. (귀띔:이 문제에서 첫 어림값이 1이면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\log(1)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>을 분모로 하는 나눗셈이 필요하므로 1은 첫 어림값이 되지 못한다.)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>고정점 찾기 프로시저를 이해하는 것 외에 크게 문제의 의미는 없어보입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="1-fixed-point-수정"><a class="markdownIt-Anchor" href="#1-fixed-point-수정"></a> 1. fixed-point 수정</h3>
<p>(display guess), (newline)을 추가했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fixed-point</span> f first-guess)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">close-enough?</span> v1 v2)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> v1 v2)) tolerance))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next</span> (<span class="name">f</span> guess)))</span><br><span class="line">      (<span class="name"><span class="built_in">display</span></span> guess)</span><br><span class="line">      (<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name">close-enough?</span> guess next)</span><br><span class="line">          next</span><br><span class="line">          (<span class="name">try</span> next))))</span><br><span class="line">  (<span class="name">try</span> first-guess))</span><br></pre></td></tr></table></figure>
<h3 id="2-고정점-찾기"><a class="markdownIt-Anchor" href="#2-고정점-찾기"></a> 2. 고정점 찾기</h3>
<p>아래의 프로시저를 실행해 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">log</span></span> <span class="number">1000</span>) (<span class="name"><span class="built_in">log</span></span> x)))</span><br><span class="line"></span><br><span class="line">(<span class="name">fixed-point</span> f <span class="number">2.0</span>)</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-36.png" alt="프로시저로 찾아낸 고정점" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.37 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-37/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음 꼴로 쓴 수식을 끝없는 <strong>연속분수</strong><sup>continued fraction</sup>라 한다.</p>
<br />
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>=</mo><mfrac><msub><mi>N</mi><mn>1</mn></msub><mrow><msub><mi>D</mi><mn>1</mn></msub><mo>+</mo><mfrac><msub><mi>N</mi><mn>2</mn></msub><mrow><msub><mi>D</mi><mn>2</mn></msub><mo>+</mo><mfrac><msub><mi>N</mi><mn>3</mn></msub><mrow><msub><mi>D</mi><mn>3</mn></msub><mo>+</mo><mo>⋯</mo></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">f=\frac{N_{1}}{D_{1} + \frac{N_{2}}{D_{2}+\frac{N_{3}}{D_{3}+⋯}}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.057316em;vertical-align:-1.6969859999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.221569em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.4720649999999997em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0256214285714287em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.02778em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="minner mtight">⋯</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5375285714285716em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.10903em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5580285714285714em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.918555em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6969859999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<br />
<p>이를테면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">N_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">D_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>가 1일때 위 분수를 펼치면 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">1/ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">ϕ</span></span></span></span>에 다가간다. (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span>는 1.2.2절에서 나온 황금비다.) 계속 나눈 수 값을 어림잡을 때 다음처럼 정해 둔 마디 몇개만 펼치고 나머지 마디는 잘라내는 방법을 쓸 수 있다. 이를 두고 <strong>k-마디로 끝나는 연속분수</strong>라 한다.</p>
<br />
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>=</mo><mfrac><msub><mi>N</mi><mn>1</mn></msub><mrow><msub><mi>D</mi><mn>1</mn></msub><mo>+</mo><mfrac><msub><mi>N</mi><mn>2</mn></msub><mrow><mo>⋱</mo><mo>+</mo><mfrac><msub><mi>N</mi><mi>k</mi></msub><msub><mi>D</mi><mi>k</mi></msub></mfrac></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">f=\frac{N_{1}}{D_{1}+\frac{N_{2}}{⋱+\frac{N_{k}}{D_{k}}}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.107316em;vertical-align:-1.7469859999999997em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.221569em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.4470650000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="minner mtight">⋱</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0613357142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.02778em;margin-right:0.1em;"><span class="pstrut" style="height:2.69444em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34963999999999995em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.573242857142857em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.10903em;margin-right:0.1em;"><span class="pstrut" style="height:2.69444em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34963999999999995em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5937428571428571em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9685549999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7469859999999997em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<br />
<p>분수에서 (마디 번호 i를 인자로 받아) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mstyle scriptlevel="2" displaystyle="false"><mi>i</mi></mstyle></mrow><annotation encoding="application/x-tex">N\scriptscriptstyle{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mtight sizing reset-size6 size1"><span class="mord mathdefault mtight">i</span></span></span></span></span>와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mstyle scriptlevel="2" displaystyle="false"><mi>i</mi></mstyle></mrow><annotation encoding="application/x-tex">D\scriptscriptstyle{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mtight sizing reset-size6 size1"><span class="mord mathdefault mtight">i</span></span></span></span></span>값을 계산하는 프로시저를 n과 d라고 하자. k-마디로 끝나는 연속분수 값을 (cont-frac n d k)로 계산할 수 있도록 프로시저 cont-frac을 정의하라. 프로시저가 올바로 움직이는지 살펴보기 위해서, k값을 조금씩 늘려가며 아래 식으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">1/ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">ϕ</span></span></span></span>에 가까운 값을 얻어내는 실험을 하자.</p>
<br />
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">cont-frac</span> (<span class="name"><span class="built_in">lambda</span></span> (i) <span class="number">1.0</span>)</span><br><span class="line">           (<span class="name"><span class="built_in">lambda</span></span> (i) <span class="number">1.0</span>)</span><br><span class="line">           k)</span><br></pre></td></tr></table></figure>
<br />
<p>k값이 얼마나 커야 소수점 아래 4자리까지 맞아떨어지는 값을 어림잡을 수 있는가?</p>
<p>b. cont-frac 프로시저의 프로세스가 되돈다면 반복하게끔 고쳐 쓰고, 그 반대로 반복한다면 되돌게끔 고쳐라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>경험해 보지 못한 방식의 반복을 프로시저로 구현하면서 사고력을 얻을 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-1φ구하기"><a class="markdownIt-Anchor" href="#a-1φ구하기"></a> a. 1/ϕ구하기</h3>
<p>cont-frac 프로시저를 구현하는 것은 어렵지 않았습니다.<br />
무지성으로 문제의 식을 코드로 바꾸다 보니 해결되었습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>N</mi><mrow><mi>D</mi><mo>+</mo><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{N}{D + iter}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i) (<span class="name"><span class="built_in">+</span></span> (<span class="name">d</span> i) (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>))))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>cont-frac 프로시저를 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cont-frac</span> n d k)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> i)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> i k)</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i) (<span class="name">d</span> i))</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i) (<span class="name"><span class="built_in">+</span></span> (<span class="name">d</span> i) (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>))))))</span><br><span class="line">  (<span class="name">iter</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>위 프로시저를 바탕으로 아래의 식을 실행해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">cont-frac</span> (<span class="name"><span class="built_in">lambda</span></span> (i) <span class="number">1.0</span>)</span><br><span class="line">           (<span class="name"><span class="built_in">lambda</span></span> (i) <span class="number">1.0</span>)</span><br><span class="line">           <span class="number">10000</span>)  </span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>구글 계산기로 계산한 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">1/ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">ϕ</span></span></span></span>는 0.61803398876입니다.<br />
문제에서 요구하는 소수점아래 4자리까지 맞아 떨어지는 반복횟수를 구하기 위해 아래의 프로시저를 실행시켜 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try</span> k)</span><br><span class="line">    (<span class="name">cont-frac</span> (<span class="name"><span class="built_in">lambda</span></span> (i) <span class="number">1.0</span>)</span><br><span class="line">               (<span class="name"><span class="built_in">lambda</span></span> (i) <span class="number">1.0</span>)</span><br><span class="line">               k))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">goodenough?</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> x <span class="number">0.61803398876</span>)) <span class="number">0.0001</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">goodenough?</span> (<span class="name">try</span> n))</span><br><span class="line">      (<span class="name"><span class="built_in">display</span></span> n)</span><br><span class="line">      (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> n <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name">iter</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>결과로는 10을 반환했습니다.<br />
그런데 goodenough?를 통과했다고 해서 소수점 4자리까지 맞아 떨어지지는 않았습니다.</p>
<p>10 언저리의 숫자들로 테스트해보니,<br />
소수점아래 4자리까지 맞아 떨어지는 반복횟수는 11이었습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-37-1.png" alt="11일때 0.6180까지 맞아 떨어지는 모습" /></p>
<h3 id="b-cont-frac를-반복하는-프로세스로-구현하기"><a class="markdownIt-Anchor" href="#b-cont-frac를-반복하는-프로세스로-구현하기"></a> b. cont-frac를 반복하는 프로세스로 구현하기</h3>
<p>cont-frac을 반복하는 프로세스로 구현하기 위해서 기존의 아이디어와는 다른 아이디어를 떠올렸습니다.<br />
1부터 k까지 반복하는 것이 아닌, k부터 1까지 역순으로 반복하는 것입니다.<br />
그리고 그 계산값을 아래와 같이 result에 축적하는 것입니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi><mo>⟵</mo><mfrac><mi>N</mi><mrow><mi>D</mi><mo>+</mo><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">result \longleftarrow \frac{N}{D+result}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.70544em;vertical-align:-0.011em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (result의 초기값은 0)</p>
<p><br /><br /><br /><br /></p>
<p>프로시저로 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cont-frac</span> n d k)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> i result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> i <span class="number">0</span>)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name"><span class="built_in">-</span></span> i <span class="number">1</span>) (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i) (<span class="name"><span class="built_in">+</span></span> (<span class="name">d</span> i) result)))))</span><br><span class="line">  (<span class="name">iter</span> k <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-37-2.png" alt="변함없이 값을 산출해내는 모습" /></p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.38 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-38/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>1737년에 스위스의 수학자 레온하르트 오일러가 <strong>De Fractionibus Continuis</strong>라는 논문을 출판하였는데, 그 논문에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">e-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>로 펼쳐지는 연속 분수가 나왔다. 여기서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span>는 자연로그의 밑수다. 이 분수에서 모든 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span></sub>는 1이고, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span></sub>는 차례로 1,2,1,1,4,1,1,6,1,1,8<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">⋯</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span>가 된다. 이 방법에 바탕을 두고, <a href="/sicp/chapter-1/exercise-1-37/">연습문제 1.37</a>에서 작성한 cont-frac 프로시저를 사용하여 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span>를 추정하는 프로그램을 짜라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>수열의 규칙을 식으로 옮기는 연습이 되는 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이 문제의 핵심은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span><sub><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span></sub>의 규칙을 프로시저로 나타내는 것입니다.<br />
저는 (<strong>n</strong> <strong>mod</strong> <strong>3</strong>=2)에서 값이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{2(n+1)}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>인 것을 확인하고 (D n)프로시저를 작성했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">D</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> n <span class="number">3</span>) <span class="number">2</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> n <span class="number">1</span>) <span class="number">3</span>))</span><br><span class="line">      <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>위 프로시저를 기반으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span>를 구해보겠습니다.<br />
(cont-frac 프로시저는 <a href="/sicp/chapter-1/exercise-1-37/">연습문제 1.37</a>에 있습니다.)</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">D</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> n <span class="number">3</span>) <span class="number">2</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> n <span class="number">1</span>) <span class="number">3</span>))</span><br><span class="line">      <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> e</span><br><span class="line">  (<span class="name"><span class="built_in">+</span></span> <span class="number">2</span></span><br><span class="line">     (<span class="name">cont-frac</span> (<span class="name"><span class="built_in">lambda</span></span> (i) <span class="number">1.0</span>)</span><br><span class="line">                D </span><br><span class="line">                <span class="number">100000</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">display</span></span> e)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-38.png" alt="e값을 구해내는 모습" /></p>
<p><br /><br /><br /><br /></p>
<p>구글 계산기 기준으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span>는 2.71828182846입니다.<br />
상당히 근접한 값을 찾아냈습니다.</p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.4 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-4/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>엮은식의 연산자 자리에 복잡한 식이 다시 와도 앞에서 밝힌 규칙에 따라 식의 값을 구할 수 있다. 다음 프로시저에 인자를 주고 어떻게 계산되는지 밝혀보라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">a-plus-abs-b</span> a b)</span><br><span class="line">  ((<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> b <span class="number">0</span>) + -) a b))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>Scheme 언어는 연산자나 프로시저도 데이터처럼 인자로 넘겨줄 수 있는 언어라는 것을 보여준 문제입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> b <span class="number">0</span>) + -)</span><br></pre></td></tr></table></figure>
<p>위 표현을 주목해서 볼 필요가 있습니다.<br />
b의 값에 따라서 if식이 반환하는 값은 데이터가 아닌 연산자 +,- 입니다.<br />
따라서 a-plus-abs-b 프로시저는 b가 양수일때는</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> a b)</span><br></pre></td></tr></table></figure>
<p>b가 음수일때는</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">-</span></span> a b)</span><br></pre></td></tr></table></figure>
<p>를 반환할 것입니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-4.png" alt="실제 실행 모습" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.40 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-40/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>삼차 방정식 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">x^3+ax^2+bx+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>의 해에 가까운 값을 구하기 위하여 newtons-method로 다음 식을 계산한다고 할 때, 이 식에서 쓰는 프로시저 cubic을 짜보라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">newtons-method</span> (<span class="name">cubic</span> a b c) <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>newtons-method에 사용된 프로시저들을 다시 되짚어보기 위한 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이 문제를 단순히 푸는 것은 그렇게 중요하지 않습니다.<br />
다만 중요한 것은, newtons-method의 원리를 이해하고 가는 것입니다.</p>
<p><br /><br /></p>
<p>newtons-method를 이해하기 위해서는 아래의 식들을 이해해야 합니다.<br />
여기서 이해한다는 것은, 약간의 수학적인 이해와 더불어 어떻게 구현하는지를 이해하는 것입니다.<br />
우리는 컴퓨터공학도지 수학도가 아닙니다.</p>
<h3 id="a-미분-프로시저"><a class="markdownIt-Anchor" href="#a-미분-프로시저"></a> a. 미분 프로시저</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>d</mi><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">dg(x)=\frac{g(x+dx)-g(x)}{dx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span>는 매우 작은 값)</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv</span> g)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> dx <span class="number">0.00001</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">g</span> (<span class="name"><span class="built_in">+</span></span> x dx)) (<span class="name">g</span> x))</span><br><span class="line">       dx)))</span><br></pre></td></tr></table></figure>
<h3 id="b-고정점-프로시저"><a class="markdownIt-Anchor" href="#b-고정점-프로시저"></a> b. 고정점 프로시저</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">f(x)=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>를 만족하는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>는<br />
추정값인 guess에 대해 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo>⋯</mo><mi>f</mi><mo stretchy="false">(</mo><mi>g</mi><mi>u</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(f(f(f⋯ f(guess))))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>의 값과 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fixed-point</span> f first-guess)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">close-enough?</span> v1 v2)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> v1 v2)) tolerance))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next</span> (<span class="name">f</span> guess)))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name">close-enough?</span> guess next)</span><br><span class="line">          next</span><br><span class="line">          (<span class="name">try</span> next))))</span><br><span class="line">  (<span class="name">try</span> first-guess))</span><br></pre></td></tr></table></figure>
<h3 id="c-뉴턴법"><a class="markdownIt-Anchor" href="#c-뉴턴법"></a> c. 뉴턴법</h3>
<p>미분 가능한 함수 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>에 대해<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(x)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>의 해는<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mfrac><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(x)=x-\frac{g(x)}{dg(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>의 고정점 즉,<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi><mo>−</mo><mfrac><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">x=x-\frac{g(x)}{dg(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>의 해와 같다.</p>
<p>이를 구현하기 위해 newton-transform 프로시저를 따로 정의한다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">newtons-transform</span> g)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">-</span></span> x (<span class="name"><span class="built_in">/</span></span> (<span class="name">g</span> x) ((<span class="name">deriv</span> g) x)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">newtons-method</span> g guess)</span><br><span class="line">  (<span class="name">fixed-point</span> (<span class="name">newtons-transform</span> g) guess))</span><br></pre></td></tr></table></figure>
<h3 id="d-삼차방정식의-해-구하기"><a class="markdownIt-Anchor" href="#d-삼차방정식의-해-구하기"></a> d. 삼차방정식의 해 구하기</h3>
<p>(newtons-method g guess)는 결국 g식의 해를 구하는 프로시저입니다.<br />
문제에서 요구하는 cubic 프로시저는 아래와 같습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>u</mi><mi>b</mi><mi>i</mi><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">cubic(x)=x^3+ax^2+bx+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cubic</span> a b c)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> (<span class="name">cube</span> x)</span><br><span class="line">       (<span class="name"><span class="built_in">*</span></span> a (<span class="name">square</span> x))</span><br><span class="line">       (<span class="name"><span class="built_in">*</span></span> b x)</span><br><span class="line">       c</span><br><span class="line">       )))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>만든 프로시저를 시험하기 위해 아래의 식을 실행시켜 보겠습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>4</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>−</mo><mn>2</mn><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>40</mn><mi>x</mi><mo>−</mo><mn>64</mn></mrow><annotation encoding="application/x-tex">(x+4)(x+2)(x-8)=x^3-2x^2-40x-64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">newtons-method</span> (<span class="name">cubic</span> <span class="number">-2</span> <span class="number">-40</span> <span class="number">-64</span>) <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-40.png" alt="8을 해로 구해내는 모습" /></p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.41 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-41/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>인자 하나 받는 프로시저를 인자로 받아, 그 프로시저를 두번 연거푸 계산하는 프로시저를 내놓도록, 프로시저 double을 짜 보자. 예컨데, inc가 인자에 1을 더하는 프로시저라면 (double inc)는 2를 더하는 프로시저가 된다. 다음 식의 값은 얼마인가?</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(((<span class="name">double</span> (<span class="name">double</span> double)) inc) <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>((a b) x) = (a (b x))가 항상 성립하지는 않습니다.<br />
함수끼리 연산된 함수에 값을 입력하는 경우에는, 함수를 먼저 정확히 계산해 주어야 합니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<blockquote>
<p>이문제의 풀이는 꼭꼭 씹어드셔야 이해하기 쉽습니다.<br />
한줄 한줄 씹어먹어 주시기 바랍니다.</p>
</blockquote>
<p>처음 이 문제를 봤을때, 단순한 저의 생각은 아래와 같았습니다.</p>
<p>double이 두번 실행하는 것이라면,<br />
(double double)은 네번 실행하는 것이고,<br />
(double (double double))은 여덟번 실행하는 것이므로,<br />
(((double (double double)) inc) 5) = 5+8 =13이 아닐까?</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-41.png" alt="인생이란 원래 자기 생각대로 되지 않는 법이란다." /></p>
<br />
<br />
<br />
<br />
<p>시간을 들여서 깊게 고민해 보았습니다.<br />
하지만 만족스러운 결론을 얻지 못했습니다.<br />
차선책으로, 아래의 코드를 실행시켜서 사고의 힌트를 얻고자 했습니다.<br />
<span style="color:#999">편의를 위해서 double은 d로 치환하였습니다.</span><br />
<img data-src="/img/sicp/chapter-1/exercise-1-41-1.png" alt="테스트 케이스들" /></p>
<br />
<br />
<br />
<br />
<p>위 실험에서 제가 주목한 부분은 아래의 두 식입니다.<br />
(d ((d d) inc)) = (lambda (x) (+ x 8))<br />
((d (d d)) inc) = (lambda (x) (+ x 16))<br />
괄호를 어떻게 묶느냐에 따라서 결과가 달라진다는 것을 보여준 결과입니다.</p>
<br />
<br />
<br />
<br />
<p>위의 결과에서 깨달은 중요한 사실이 있습니다.<br />
제가 은연중에 아래의 식을 당연하게 생각하고 있었다는 것입니다.<br />
((d (d d)) f) = (d ((d d) f))</p>
<p>즉, 람다함수 a b에 대해<br />
((a b) f) = (a (b f))가 성립한다고 당연하게 생각하고 있었던 것입니다.</p>
<p>그 생각은 당연히 틀렸습니다.</p>
<br />
<br />
<br />
<br />
<p>((d (d d)) f)식을 제대로 정리하면 다음과 같습니다.</p>
<p>(d <span style="color:red">(d d)</span>)<br />
= (lambda (x) (<span style="color:red">(d d)</span> (<span style="color:red">(d d)</span> x)))<br />
<span style="color:#999">위의 식은 (d f)의 정의에 맞게 f 인자에 (d d)를 넣은 결과입니다.</span></p>
<p>((d (d d)) f)<br />
= ((lambda (x) ((d d) ((d d) x))) f)<br />
= ((d d) ((d d) f))</p>
<br />
<br />
<br />
<br />
<p>((d (d d)) f)<br />
= ((d d) ((d d) f))</p>
<p>(d f) = (lambda (x) (f (f x)))이므로,<br />
(d d) = (lambda (x) (d (d x)))입니다.<br />
((d d) f) = (d (d f))</p>
<p>((d (d d)) f)<br />
= ((d d) <span style="color:red">((d d) f)</span>)<br />
= (d (d <span style="color:red">((d d) f)</span>))<br />
= (d (d (d (d f))))</p>
<br />
<br />
<br />
<br />
<p>((d (d d)) inc)<br />
= (d (d (d (d inc))))<br />
= (lambda (x) (+ x 16))</p>
<p>함수끼리 연산된 함수에 값을 입력하는 경우에는, 함수를 먼저 정확히 계산해 주어야 합니다.<br />
난해한 글 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.39 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-39/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>탄센트 함수를 연속 분수로 나타내면 다음과 같다. 이 정의는 독일의 수학자 요하네스 하인리히 람베르트가 1770년에 발표한 것이다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo>=</mo><mfrac><mi>x</mi><mrow><mn>1</mn><mo>−</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>3</mn><mo>−</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>5</mn><mo>−</mo><mo>⋱</mo></mrow></mfrac></mrow></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\tan{x}=\frac{x}{1-\frac{x^2}{3-\frac{x^2}{5-⋱}}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.790115em;vertical-align:-1.6825549999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.19358em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.91642em;"><span style="top:-2.4519800000000003em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0543142857142858em;"><span style="top:-2.5907857142857145em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mbin mtight">−</span><span class="minner mtight">⋱</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4687357142857143em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8761349999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6825549999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>여기에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>는 라디안 값이다. 람베르트 식으로 탄젠트 함수 값에 가까운 값을 구하는 프로시저 (tan-cf x k)를 정의하라. 여기서 k는 <a href="/sicp/chapter-1/exercise-1-37/">연습문제 1.37</a>에서과 마찬가지로 계산에 쓸 마디 수를 나타낸다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>저번 문제와 동일하게 수열의 규칙을 프로시저로 옮기는 데에 도움이 되는 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제 해결을 위해서 <a href="/sicp/chapter-1/exercise-1-37/">연습문제 1.37</a>의 cont-frac 프로시저를 사용하겠습니다.</p>
<p>아래는 원본 cont-frac 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cont-frac</span> n d k)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> i)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> i k)</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i) (<span class="name">d</span> i))</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i) (<span class="name"><span class="built_in">+</span></span> (<span class="name">d</span> i) (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>))))))</span><br><span class="line">  (<span class="name">iter</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>N과 D는 다음과 같이 설계했습니다.<br />
N은 x값을 포함해야 하기 때문에 (N n x)로 만들었습니다. 또한, k가 1이 아닌 경우에 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>를 반환하도록 하였습니다.<br />
D는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>9</mn><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">1,3,5,7,9,⋯</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span>를 표현하였습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">N</span> n x)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>)</span><br><span class="line">      x</span><br><span class="line">      (<span class="name">square</span> x)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">D</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">*</span></span> n <span class="number">2</span>) <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>새로운 N과 D에 맞게 cont-frac도 변형하였습니다.<br />
기존의 프로시저에서 +가 -로 바뀌고, x 인자를 받도록 변형하였습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cont-frac</span> n d k x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> i)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> i k)</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i x) (<span class="name">d</span> i))</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i x) (<span class="name"><span class="built_in">-</span></span> (<span class="name">d</span> i) (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>))))))</span><br><span class="line">  (<span class="name">iter</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>위 프로시저들을 기반으로 구현한 tan-cf 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cont-frac</span> n d k x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> i)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> i k)</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i x) (<span class="name">d</span> i))</span><br><span class="line">        (<span class="name"><span class="built_in">/</span></span> (<span class="name">n</span> i x) (<span class="name"><span class="built_in">-</span></span> (<span class="name">d</span> i) (<span class="name">iter</span> (<span class="name"><span class="built_in">+</span></span> i <span class="number">1</span>))))))</span><br><span class="line">  (<span class="name">iter</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">N</span> n x)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>)</span><br><span class="line">      x</span><br><span class="line">      (<span class="name">square</span> x)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">D</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">*</span></span> n <span class="number">2</span>) <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tan-cf</span> x k)</span><br><span class="line">  (<span class="name">cont-frac</span> N D k x))</span><br></pre></td></tr></table></figure>
<p><br /><br /><br /><br /></p>
<p>이 프로시저가 정상작동하는지 확인하기 위해 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{π}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>를 인자로 넘겨보겠습니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>π</mi><mn>4</mn></mfrac><mo>=</mo><mfrac><mn>3.14</mn><mn>4</mn></mfrac><mo>=</mo><mn>0.785</mn></mrow><annotation encoding="application/x-tex">\frac{π}{4}=\frac{3.14}{4}=0.785</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">.</span><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">7</span><span class="mord">8</span><span class="mord">5</span></span></span></span><br />
<img data-src="/img/sicp/chapter-1/exercise-1-39.png" alt="tan(π/4)를 1에 가깝게 계산하는 모습" /><br />
tan(π/4)를 1에 가깝게 계산하므로 본 프로시저는 옳은 프로시저라 할 수 있습니다.</p>
<p><br /><br /><br /><br /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.42 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-42/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>f와 g가 모두 인자 하나를 받는 프로시저라 하자. g와 f의 합성함수는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>↦</mo><mi>f</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x\mapsto f(g(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>로 정의한다. 두 프로시저를 합성하는 프로시저 compose를 정의하라.  예를 들어 inc가 인자에 1을 더하는 함수라면 다음 결과가 나온다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">((<span class="name">compose</span> square inc) <span class="number">6</span>)</span><br><span class="line">&gt;&gt;<span class="number">49</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>람다식을 이미 이해했다면 이 문제에 큰 의미를 찾기는 어렵습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제를 풀는 것은 어렵지 않습니다.</p>
<p>바로 프로시저를 짜보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">compose</span> f g)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">f</span> (<span class="name">g</span> x))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-42.png" alt="예시가 잘 실행되는 모습" /></p>
<p><br/><br/><br/><br/></p>
<p>혹시나 만약에 다음과 같은 오답을 내놓는 분들도 계실것 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">compose</span> f g)</span><br><span class="line">  (<span class="name">f</span> g))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br/><br/></p>
<p>이전 문제인 <a href="/sicp/chapter-1/exercise-1-41/">연습문제 1.41</a>을 제대로 이해했다면 무엇이 문제인지 알 수 있습니다.</p>
<p>(f (g x)) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">≠</mi></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span></span></span></span> ((f g) x)</p>
<p><br/><br/><br/><br/></p>
<p>예를 들어 square와 inc를 아래와 같은 방법으로 합성한다고 가정합시다.<br />
((square inc) 5)</p>
<p>square의 정의에 의해<br />
(square inc) = (* inc inc)가 됩니다.<br />
(* inc inc)는 당연히 말이 안됩니다. 프로시저끼리 곱연산을 할 수는 없습니다.</p>
<p>inc의 결과값끼리 곱연산을 하는 것인데 가능하지 않느냐?고 생각하실 분도 계실것 같습니다.<br />
f와 g의 합성함수는 프로시저를 반환해야 제대로 작동하는 것입니다.<br />
그런데, (* inc inc)는 프로시저를 반환하는 함수가 아닙니다.<br />
그러므로 위 함수 (f g)는 설계의도에서 벗어난 프로시저입니다.</p>
<p><br/><br/><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.43 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-43/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>f가 수를 계산하는 함수고 n이 0보다 큰 정수일 때, n번 f하는 함수는 x를 받아 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mo>⋯</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⋯</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(f(⋯ f(x) ⋯))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>하는 함수다. 이를테면 f가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>↦</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x\mapsto x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>일 때, n번 f한 함수는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>↦</mo><mi>x</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">x\mapsto x+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>이다. f가 제곱 함수면, n번 f한 함수는 인자의 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>값을 구한다. f 프로시저와 0보다 큰 정수 n을 인자로 받아 f를 n번 하는 함수를 내놓는 프로시저를 짜라. 이 프로시저를 쓰는 방법은 다음과 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">((<span class="name">repeated</span> square <span class="number">2</span>) <span class="number">5</span>)</span><br><span class="line">&gt;&gt;<span class="number">625</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>새로 배운 합성함수 프로시저에 기존에 연습했던 되도는 프로시저를 적용하는 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이전 문제들에서 많은 되도는 프로시저를 만들어 봤기 때문에 어렵지 않게 문제를 풀 수 있었습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">compose</span> f g)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">f</span> (<span class="name">g</span> x))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">repeated</span> f n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>)</span><br><span class="line">      f</span><br><span class="line">      (<span class="name">compose</span> f (<span class="name">repeated</span> f (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-43.png" alt="예시 코드가 잘 작동하는 모습" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.44 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-44/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>함수를 다듬는 생각은 신호 처리에서 중요한 개념이다. f가 함수이고 dx가 작은 수일 때, f를 다듬은 함수는 x에서 f(x-dx),f(x),(f+dx)의 평균값을 내놓는 함수다. f를 인자로 받아서, 다듬은 함수를 내놓는 프로시저 smooth를 짜라. 또 n-번 다듬은 함수를 구하는 게 쓸모있을 때가 있다. smooth와 <a href="/sicp/chapter-1/exercise-1-43/">연습문제 1.43</a>의 repeated로 어떤 함수를 n-번 다듬은 함수를 어떻게 만드는지 밝혀라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>앞의 문제를 제대로 풀었다면, 크게 의미는 없는 문제인 것 같습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>smooth 프로시저를 정의대로 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">smooth</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> dx <span class="number">0.0001</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">f</span> (<span class="name"><span class="built_in">-</span></span> x dx)) (<span class="name">f</span> x) (<span class="name">f</span> (<span class="name"><span class="built_in">+</span></span> x dx))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br />
<br/><br />
<br/></p>
<p>또 repeated로 smooth-n을 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">smooth-n</span> f n)</span><br><span class="line">  ((<span class="name">repeated</span> smooth n) f))</span><br></pre></td></tr></table></figure>
<p>앞의 문제를 제대로 풀었다면, 크게 의미는 없는 문제인 것 같습니다.<br />
읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.45 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-45/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>1.3.3절에서 곧바로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>↦</mo><mi>x</mi><mi mathvariant="normal">/</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">y\mapsto x/y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7054400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 함수의 고정점을 얻으려고 할 때 함수 값이 고정점에 다가가지 못하고 들쑥날쑥해서, 이 값을 평균내어 잠재워서 풀었다. 이와 비슷하게, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>↦</mo><mi>x</mi><mi mathvariant="normal">/</mi><msup><mi>y</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">y\mapsto x/y^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7054400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 함수의 고정점을 구하여 세제곱근을 계산할 때에도 평균내어 잦아들게 할 수 있다. 하지만, 네제곱근은 이렇게 되지 않는다. 다시 말해서, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>↦</mo><mi>x</mi><mi mathvariant="normal">/</mi><msup><mi>y</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">y\mapsto x/y^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7054400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 함수는 평균 잠재우기를 한 번 써봤자 고정점으로 다가가지 않는다. 그런데, 두 번 하면, 다시 말해서 평균내어 잦아들게 한 것을 다시 한번 더 평균내어 잦아들게 하면 고정점에 다가간다. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>↦</mo><mi>x</mi><mi mathvariant="normal">/</mi><msup><mi>y</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">y\mapsto x/y^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7054400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>을 평균내어 여러 번 잦아들게 하여 고정점 찾기로 n번째 제곱근을 구한다고 할 때, 몇 번 잦아들게 하는지 실험으로 알아보라. 이를 바탕으로 fixed-point, average-damp, <a href="/sicp/chapter-1/exercise-1-43/">연습문제 1.43</a>의 repeated를 써서 n번째 제곱근을 얻는 프로시저를 만들어 보자. 이 프로시저를 만드는 과정에서 꼭 필요한 수 연산은 모두 기본 연산이라고 해두자.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>이전에 배운 개념들을 전부 조합해야 풀 수 있는 문제입니다.<br />
자신이 어느 부분에서 이해가 부족했는지를 점검할 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="1-선행지식"><a class="markdownIt-Anchor" href="#1-선행지식"></a> 1. 선행지식</h3>
<p>1장의 최종 문제 둘중 하나 답게 여태까지 배운 여러가지 개념들을 이해하고 사용해야 하는 문제입니다.<br />
이 문제를 풀기 위해 이해해야 하는 개념들은 다음과 같습니다.</p>
<h4 id="a-고정점-프로시저"><a class="markdownIt-Anchor" href="#a-고정점-프로시저"></a> a. 고정점 프로시저</h4>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>의 고정점은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mo>⋯</mo><mi>f</mi><mo stretchy="false">(</mo><mi>g</mi><mi>u</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(f(f(⋯ f(guess)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fixed-point</span> f first-guess)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">close-enough?</span> v1 v2)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> v1 v2)) tolerance))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next</span> (<span class="name">f</span> guess)))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name">close-enough?</span> guess next)</span><br><span class="line">          next</span><br><span class="line">          (<span class="name">try</span> next))))</span><br><span class="line">  (<span class="name">try</span> first-guess))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h4 id="b-average-damp"><a class="markdownIt-Anchor" href="#b-average-damp"></a> b. average-damp</h4>
<p>고정점 찾기 문제에서 f 함수를 반복해서 연산하면 값이 고정점에 다가가지 못하고 들쑥날쑥하는 경우가 있습니다.<br />
이때, f 함수 연산을 반복하는 대신에 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{f(x)+x}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 즉 (average-damp f) 연산을 반복하면 이 문제를 해결할 수 있는 경우가 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">average-damp</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">f</span> x) x) <span class="number">2</span>)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h4 id="c-fast-exp"><a class="markdownIt-Anchor" href="#c-fast-exp"></a> c. fast-exp</h4>
<p>(fast-exp b n)=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> 너무 오래되어서 기억나지 않으실까봐 넣어 놨습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">exp-iter</span> b n temp)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>) temp)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> n) (<span class="name">exp-iter</span> (<span class="name">square</span> b) (<span class="name">halves</span> n) temp))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">exp-iter</span> b (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) (<span class="name"><span class="built_in">*</span></span> temp b)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fast-exp</span> b n)</span><br><span class="line">  (<span class="name">exp-iter</span> b n <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h4 id="d-compose-repeated"><a class="markdownIt-Anchor" href="#d-compose-repeated"></a> d. compose &amp; repeated</h4>
<p>바로 전 문제에서 연습했던 것들이니 크게 설명은 필요하지 않을 것 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">compose</span> f g)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">f</span> (<span class="name">g</span> x))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">repeated</span> f n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>)</span><br><span class="line">      f</span><br><span class="line">      (<span class="name">compose</span> f (<span class="name">repeated</span> f (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="2-n번째-제곱근을-위한-평균-잠재우기-횟수"><a class="markdownIt-Anchor" href="#2-n번째-제곱근을-위한-평균-잠재우기-횟수"></a> 2. n번째 제곱근을 위한 평균 잠재우기 횟수</h3>
<p>평균 잠재우기를 n번 시행한다는 말은 다음과 같습니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mi>A</mi><mi>V</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{(f(x) + x)}{2}=AV1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">1</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>A</mi><mi>V</mi><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>A</mi><mi>V</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mi>A</mi><mi>V</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\frac{(f(AV1) + AV1)}{2}=AV2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">2</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>A</mi><mi>V</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>A</mi><mi>V</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mi>A</mi><mi>V</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">\frac{(f(AV2) + AV2)}{2}=AV3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight">2</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">3</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">⋯</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>A</mi><mi>V</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mo stretchy="false">)</mo><mo>+</mo><mi>A</mi><mi>V</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mi>A</mi><mi>V</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\frac{(f(AV{n-1}) + AV{n-1})}{2}=AVn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">n</span></span></span></span></p>
<p><br/><br/></p>
<p>이를 프로시저로 나타내면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">average-damp-n</span> f n)</span><br><span class="line">  (<span class="name">repeated</span> (<span class="name">average-damp</span> f) n))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>(average-damp-n f n)을 fixed-point 프로시저에 적용시키면 다음과 같습니다.<br />
<span style="color:#999">damp-number 인자로 평균 잠재우기 횟수를 넘겨주었습니다</span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fixed-point</span> f first-guess damp-number)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">close-enough?</span> v1 v2)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> v1 v2)) tolerance))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next</span> ((<span class="name">average-damp-n</span> f damp-number) guess)))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name">close-enough?</span> guess next)</span><br><span class="line">          next</span><br><span class="line">          (<span class="name">try</span> next))))</span><br><span class="line">  (<span class="name">try</span> first-guess))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>그리고 아래의 프로시저를 구상했습니다.<br />
damp 횟수를 인자로 받아서 그만큼 평균갑 잠재우기를 실행한 fixed-point를 사용한 n의 제곱근을 구하는 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">nth-root</span> n damp-number)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">lambda</span></span> (y) (<span class="name"><span class="built_in">/</span></span> x (<span class="name">fast-exp</span> y (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name">fixed-point</span> (<span class="name">f</span> x) <span class="number">1.0</span> damp-number)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>이 프로시저로 실험을 해보니 n의 제곱근을 구하기 위해서는,<br />
최소 [log<sub>2</sub>n]만큼의 평균값 잠재우기를 해야 한다는 것을 알아냈습니다.<br />
<span style="color:#999">[x]는 x보다 작은 최대의 정수값입니다.</span></p>
<h3 id="3-n번째-제곱근-구하기-프로시저"><a class="markdownIt-Anchor" href="#3-n번째-제곱근-구하기-프로시저"></a> 3. n번째 제곱근 구하기 프로시저</h3>
<p>위의 실험결과를 바탕으로 아래의 프로시저를 구상했습니다.<br />
<span style="color:#999">(log a b)=log<sub>b</sub>a</span><br />
<span style="color:#999">(floor x)는 x보다 작은 최대의 정수</span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">nth-root</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> damp-number</span><br><span class="line">    (<span class="name"><span class="built_in">floor</span></span> (<span class="name"><span class="built_in">log</span></span> n <span class="number">2</span>)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">lambda</span></span> (y) (<span class="name"><span class="built_in">/</span></span> x (<span class="name">fast-exp</span> y (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name">fixed-point</span> (<span class="name">f</span> x) <span class="number">1.0</span> damp-number)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>그리고 시험을 위해 아래의 테스트 코드를 실행해 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">((<span class="name">nth-root</span> <span class="number">2</span>) <span class="number">100</span>)</span><br><span class="line">((<span class="name">nth-root</span> <span class="number">3</span>) <span class="number">1000</span>)</span><br><span class="line">((<span class="name">nth-root</span> <span class="number">4</span>) <span class="number">10000</span>)</span><br><span class="line">((<span class="name">nth-root</span> <span class="number">5</span>) <span class="number">100000</span>)</span><br><span class="line">((<span class="name">nth-root</span> <span class="number">6</span>) <span class="number">1000000</span>)</span><br><span class="line">((<span class="name">nth-root</span> <span class="number">7</span>) <span class="number">10000000</span>)</span><br><span class="line">((<span class="name">nth-root</span> <span class="number">8</span>) <span class="number">100000000</span>)</span><br><span class="line">((<span class="name">nth-root</span> <span class="number">9</span>) <span class="number">1000000000</span>)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>결과는 다음과 같았습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-45.png" alt="테스트 케이스 실행 결과" /></p>
<p>프로시저가 예상한 결과대로 작동한다면 모든 식의 답이 10이어야겠지만, 그렇지는 않았습니다.</p>
<p>긴 글 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.46 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-46/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>이 장에서 설명한 여러 수 계산법은 <strong>반복하여 고치기</strong>라 하는 더 일반적인 방법에 바탕을 둔다. 무엇을 반복해서 고친다는 말은 이런 뜻이다. 어떤 값을 얻고자 할 때, 처음에 그 값을 어림잡은 어떤 값에서 시작하되 어떤 계산과정을 거쳐서 더 나은 어림값을 만든다. 꽤 쓸 만한 어림값이 나올 때까지 그 계산과정을 되풀이한다. 이런 일반적인 방법을 곧바로 나타내는 iterative-improve 프로시저를 짜보자. 이 프로시저는 어림값이 충분히 괜찮은지 알아보는 방법과 더 좋은 어림값을 계산하는 방법을 프로시저 인자로 받아서, 무언가를 반복하여 고치는 프로시저를 결과 값으로 내놓는다. 1.1.7절의 sqrt 프로시저와 1.3.3절의 fixed-point 프로시저가 iterative-improove를 쓰도록 고쳐보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>1장의 제목은 <strong>프로시저를 써서 요약하기</strong>입니다.<br />
1장의 마지막 문제에서 지금까지 배운 개념들의 정수를 프로시저를 써서 요약했습니다.<br />
코드의 표현력을 끌어올리는 연습이 잘 된것 같아 좋습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>1단원 내내 반복한 형태이기 때문에, 코드를 짜는 것은 그렇게 어렵지 않았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">iterative-improve</span> goodenough? improve)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">improve-iter</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next</span> (<span class="name">improve</span> guess)))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name">goodenough?</span> next)</span><br><span class="line">          next</span><br><span class="line">          (<span class="name">improve-iter</span> next))))</span><br><span class="line">  (<span class="name">improve-iter</span> <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>
<h3 id="a-sqrt-프로시저-구현하기"><a class="markdownIt-Anchor" href="#a-sqrt-프로시저-구현하기"></a> a. sqrt 프로시저 구현하기</h3>
<p>구현한 sqrt는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">good?</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">*</span></span> x x) n) <span class="number">1</span>)) <span class="number">0.001</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">improve</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> x (<span class="name"><span class="built_in">/</span></span> n x)) <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">sqrt</span></span> x)</span><br><span class="line">  (<span class="name">iterative-improve</span> (<span class="name">good?</span> x) (<span class="name">improve</span> x)))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-46-1.png" alt="(sqrt 16) 에서 잘 동작하는 모습" /></p>
<h3 id="b-fixed-point-구현하기"><a class="markdownIt-Anchor" href="#b-fixed-point-구현하기"></a> b. fixed-point 구현하기</h3>
<p>구현한 fixed-point는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">good?</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">/</span></span> (<span class="name">f</span> x) x) <span class="number">1</span>)) <span class="number">0.001</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">improve</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name">f</span> x)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fixed-point</span> f)</span><br><span class="line">  (<span class="name">iterative-improve</span> (<span class="name">good?</span> f) (<span class="name">improve</span> f)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>동작을 확인하기 위해 <a href="/sicp/chapter-1/exercise-1-35/">연습문제 1.35</a>의 예시를 활용했습니다.<br />
황금비 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">ϕ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span>는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>↦</mo><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>x</mi></mrow></mrow><annotation encoding="application/x-tex">x\mapsto{1+1/x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↦</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">x</span></span></span></span></span>의 고정점값인, 1.618…입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> (<span class="name"><span class="built_in">/</span></span> <span class="number">1</span> x)))</span><br><span class="line"></span><br><span class="line">(<span class="name">fixed-point</span> f)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-46-2.png" alt="1.618을 구해내는 모습" /></p>
<p><br/><br/></p>
<p>1장의 제목은 <strong>프로시저를 써서 요약하기</strong>입니다.<br />
1장의 마지막 문제에서 지금까지 배운 개념들의 정수를 프로시저를 써서 요약했습니다.<br />
코드의 표현력을 끌어올리는 연습이 잘 된것 같아 좋습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.5 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-5/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>언어 실행기가 인자먼저 계산법을 따르는지 정의대로 계산법을 따르는지 알아보고 싶어서 아래와 같은 프로시저를 정의했다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">p</span>) (<span class="name">p</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">test</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> x <span class="number">0</span>)</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    y))</span><br><span class="line">  </span><br><span class="line">(<span class="name">test</span> <span class="number">0</span> (<span class="name">p</span>))</span><br></pre></td></tr></table></figure>
<p>인자먼저 계산법을 따르는 실행기라면 어떤 결과를 보게 될까? 정의대로 계산법을 따르는 실행기라면 어떤 결과를 보게 될까? 저마다 왜 그런 답이 나오는지 밝혀라</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>인자먼저 계산법으로 계산했을 때 프로시저가 정상적으로 완료될 수 없는 상황도 있습니다. 인자의 계산이 끝나지 않을 수 있기 때문입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이 문제를 풀기 위해서는 각 방법의 정의를 정확하게 알아야 합니다.</p>
<h3 id="a-인자먼저-계산법"><a class="markdownIt-Anchor" href="#a-인자먼저-계산법"></a> a. 인자먼저 계산법</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">test</span> <span class="number">0</span> (<span class="name">p</span>))</span><br></pre></td></tr></table></figure>
<p>위 프로시저를 실행할 때 인자먼저 계산법대로 실행한다고 해봅시다. 인자먼저 계산법은 test 프로시저의 인자인 0과 p가 더이상 계산될 수 없을 때까지 계산한 후 반환값을 인자로 삼아서 프로시저를 실행할 것입니다. 그런데 p는 자기 자신을 계속 반환하는 함수이므로, 정상적으로 계산을 끝마칠 수 없습니다. 그러므로 test 프로시저는 p의 반환값을 영원히 받을 수 없기 때문에 완료되지 않습니다.</p>
<h3 id="b-정의대로-계산법"><a class="markdownIt-Anchor" href="#b-정의대로-계산법"></a> b. 정의대로 계산법</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">test</span> <span class="number">0</span> (<span class="name">p</span>))</span><br></pre></td></tr></table></figure>
<p>반대로 정의대로 계산법은 위 프로시저를 우선 정의된대로 바꿉니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> <span class="number">0</span> <span class="number">0</span>)</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    (<span class="name">p</span>))</span><br></pre></td></tr></table></figure>
<p>그리고 문제에서 if식을 실행할 때에는 술어의 참 거짓 유무에 따라 한가지 계산식만 계산한다고 하였으므로,<br />
(= 0 0)이 참인 시점에서 p는 실행되지 않고 test프로시저는 0을 반환합니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-5.png" alt="유저 브레이크로 종료된 모습" /></p>
<p>하지만 실험해 보니 현재 버전의 Dr.Racket은 인자먼저 계산법을 사용하는 것 같습니다. 프로시저가 정상종료되지 못해 유저가 직접 종료한 모습입니다.</p>
<h3 id="c-번외"><a class="markdownIt-Anchor" href="#c-번외"></a> c. 번외</h3>
<p>그런데 기존의 코드를 아래와 같이 바꾸면 기존과는 다른 결과를 볼 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;기존의 코드</span></span><br><span class="line">(<span class="name">test</span> <span class="number">0</span> (<span class="name">p</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;새로운 코드</span></span><br><span class="line">(<span class="name">test</span> <span class="number">0</span> p)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-1/exercise-1-5-1.png" alt="0을 반환한 체로 무사히 종료된 프로세스" /></p>
<p>정확한 것은 아니지만, 괄호로 묶여있는 <code>(p)</code>는 프로시저를 호출하여 실행한 결과라는 의미이고, <code>p</code>는 프로시저가 있는 위치만을 의미하는 것 같습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.6 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-6/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>cond를 사용해서 if식을 보통 프로시저처럼 정의할 수는 없을까?</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-if</span> predicate then-clause else-cluase)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> (<span class="name">predicate</span> then-clause)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> else-cluase)))</span><br></pre></td></tr></table></figure>
<p>이 new-if는</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">new-if</span> (<span class="name"><span class="built_in">=</span></span> <span class="number">2</span> <span class="number">3</span>) <span class="number">0</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">new-if</span> (<span class="name"><span class="built_in">=</span></span> <span class="number">1</span> <span class="number">1</span>) <span class="number">0</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>위와 같은 경우에서 모두 정상작동합니다.<br />
그렇다면 위의 new-if 프로시저를 사용해서 제곱근 프로그램에도 사용해도 되는지 확인해 보십시오.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>if식은 실행기에서 실행되는 매커니즘이 다른 프로시저들과 다릅니다. new-if 프로시저로 sqrt-iter를 구현하면, 값을 반환하지 못하고 루프에 빠집니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="/sicp/chapter-1/exercise-1-5/">연습문제 1.5</a>에서 if식이 어떻게 작동하는지를 배웠습니다. if식은 술어부<sup>predicate</sup>를 먼저 계산하고 그 결과가 참이냐 거짓이냐에 따라 참인 경우와 거짓인 경우 중 한가지만 실행합니다.</p>
<p>if식 대신에 new-if프로시저를 사용하게 되면, 술어부만 먼저 계산하지 않고, 인자먼저 계산법에 따라 인자들을 전부 계산한 뒤에 프로시저를 계산합니다. 다시말하면, 아래의 <code>new-if</code>의 세 개의 인자를 모두 계산한 뒤에 new-if의 몸체에 있는 식들을 실행한다는 뜻입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">new-if</span> (<span class="name">good-enough?</span> guess x) guess (<span class="name">sqrt-iter</span> (<span class="name">improve</span> guess x) x))</span><br></pre></td></tr></table></figure>
<p>이때 Dr.Racket은 (sqrt-iter (improve guess x) x)를 계속 정의하려고 할 것이고, 끝내 정의내리지 못해서 프로세스는 무한루프에 빠질 것입니다.</p>
<p>이는 Dr.scheme 실행기가 if식을 다른 프로시저와는 다르게 계산하기 때문에 나타나는 현상입니다. sqrt-iter프로시저는 값을 찾을 때까지 무한 반복하다가 값을 찾으면 무한반복을 끊고 값을 반환하는 프로시저입니다. 그런데, 값을 찾았다는 것을 알기 위해서는 무한루프를 끊을 수 있는 if문이 실행되어야 합니다. 새로 만든 sqrt-iter는 if문 대신 new-if프로시저가 있기 때문에 무한루프을 끊고 값을 반환할 수 없습니다. 결론은 new-if 프로시저로 sqrt-iter를 구현하면, 값을 반환하지 못하고 무한루프에 빠진다는 것입니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-6.png" alt="if문이 없어서 멈출 수 없는 Dr.racket" /></p>
<p>Dr.racket에서도 종료되지 못하고 무한반복하는 모습입니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.7 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-7/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>앞서 만든 goodenough?로는 아주 작은 수의 제곱근을 구하지 못한다. 또 컴퓨터에서 수를 셈할 때에는 유효숫자가 딱 정해져 있다는 점 때문에 아주 큰 수의 제곱근을 구하는 데도 알맞지 않다. 아주 작은 수나 큰 수의 제곱근을 구할 때 good-enough?가 올바로 답을 내지 못하는 보기를 들어 이런 문제를 설명해 보라. 그리고 제곱근 프로시저를 고쳐 보자.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>제 생각에 가장 좋아보이는 goodenough?의 개선 방법은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>g</mi><mi>u</mi><mi>e</mi><mi>s</mi><mi>s</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(guess)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>과 x의 비율이 1에 가까운 지점을 기준으로 판단하는 방법입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>뉴턴법이 무엇인지는 교재의 1.1.7절을 통해 충분히 이해했다고 생각하겠습니다. 우선 정말 큰 수의 제곱근을 구하는 상황부터 살펴보겠습니다. 예로, 10,000,000,000,000의 제곱근을 구하는 과정을 생각해봅시다. 계산 흐름을 눈으로 보기 위해 improve 프로시저를 다음과 같이 수정하겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">improve</span> guess x)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> guess)</span><br><span class="line">  (<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line">  (<span class="name">average</span> guess (<span class="name"><span class="built_in">/</span></span> x guess)))</span><br></pre></td></tr></table></figure>
<p>guess를 1로 상정한다면 아래와 같은 계산흐름을 따라갑니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-7-1.png" alt="너무 큰 수일 경우" /></p>
<p>3162277.6601683795라는 인간이 생각하기에 적당한 값을 구했음에도 불구하고, goodenough?의 조건에 맞지 않기 때문에 계속 같은 값을 계산하는 모습입니다. 이런 문제가 발생하는 이유는 goodenough?의 판단기준인 (&lt; (- guess x) 0.001)가 매우 큰 수를 다룰 때에는 너무 높은 허들을 제시하기 때문입니다. 제곱근의 값이 크다면 보다 넓은 오차범위를 생각해야 하고, 제곱근의 값이 작다면 보다 좁은 오차범위를 생각하는 것이 사용자의 목적에 맞는 기준입니다.</p>
<p>또 반대로 매우 작은 수의 제곱근을 구하는 과정을 살펴보겠습니다. 이번에는 0.0000000000001의 제곱근을 구해보겠습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-7-2.png" alt="너무 작은 수일 경우" /></p>
<p>예상보다 너무 큰 숫자인 0.03125000000106562이 반환되었습니다. 참고로 이 값을 제곱하면 0.1767766953가 됩니다. 이 또한 작은 수를 다룰 때에는 좀 더 까다로운 기준을 세워야 하는데 goodenough?의 기준이 너무 쉬웠기 때문에 발생한 문제입니다.</p>
<p>따라서 우리가 지금부터 만들어야 하는 goodenough?는 큰 값이 들어오면 쉬운 기준을 제시하고, 작은 값이 들어오면 어려운 기준을 제시해야 합니다. 이 문제의 해결법을 찾아보던 중 가장 깔끔해 보이는 해결법을 찾았습니다. 바로 guess<sup>2</sup>와 x의 비율 즉, (/ (square guess) x)를 기준으로 생각하는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">good-enough?</span> guess x)</span><br><span class="line">  (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">/</span></span> (<span class="name">square</span> guess) x) <span class="number">1</span>)) <span class="number">0.001</span>))</span><br></pre></td></tr></table></figure>
<p>위와 같이 코드를 수정하고 다시 10,000,000,000,000과 0.0000000000001을 계산해 보겠습니다.</p>
<p><img data-src="/img/sicp/chapter-1/exercise-1-7-3.png" alt="큰 수일 경우 조정된 모습" /><br />
<img data-src="/img/sicp/chapter-1/exercise-1-7-4.png" alt="작은 수일 경우 조정된 모습" /></p>
<p>꽤나 유효한 값을 얻어내는 것을 확인할 수 있습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.8 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-8/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>세 제곱근을 구하는 뉴턴법은, x의 세제곱근에 가까운 y라고 할때 다음 식에 따라 y보다 더 가까운 값을 계산하는 방식이다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>x</mi><mi mathvariant="normal">/</mi><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>y</mi></mrow><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{x/y^2 + 2y}{3}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>제곱근 프로시저처럼 세제곱근 프로시저를 만들어 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>처음에는 improve 프로시저만 바꾸면 되는 줄 알았지만 goodenough?도 바꿔야 합니다. 모듈 방식으로 프로그램의 한 부분을 수정할 때, 다른 부분에서 에러가 생길 수 있다는 교훈을 얻었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><img data-src="/img/sicp/chapter-1/exercise-1-8.png" alt="실제 코드로 구현된 모습" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 1.9 친절한 풀이</title>
    <url>/sicp/chapter-1/exercise-1-9/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음 두 프로시저는 모두 0보다 큰 정수 두 개를 더하는 일을 하는데, 인자에 1을 더하는 inc 프로시저와 인자에서 1을 빼는 dec 프로시저를 가져다 쓴다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">+</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> a <span class="number">0</span>)</span><br><span class="line">    b</span><br><span class="line">    (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> a) b))))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">+</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> a <span class="number">0</span>)</span><br><span class="line">    b</span><br><span class="line">    (<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> a) (<span class="name">inc</span> b))))</span><br></pre></td></tr></table></figure>
<p>맞바꿈 계산법에 따라 두 프로시저가 (+ 4 5)를 계산하는 과정을 밝혀라 이 프로세스는 반복하는가? 아니면 되도는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>반복하는 프로세스는 계산을 거듭해도 식이 늘어나지 않는 프로세스를 말합니다. 반복하는 프로세스를 설계함으로써 메모리를 아낄 수 있습니다. 또한 이 문제를 풀어 본다면, 설계한 프로시저가 반복하는 프로세스인지 되도는 프로세스인지 판단할 수 있는 방법을 알 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>아쉽게도 Dr.Racket으로는 +식을 프로시저로 다시 정의하지 못합니다. 때문에 이론적으로 문제를 풀어보겠습니다. 앞부분의 내용을 이해하신 분이라면, 두 프로시저 중 어느 것이 되도는 프로세스이고 반복하는 프로세스인지 눈치챌 수 있을 것입니다. 각각의 프로시저의 실행되는 과정을 맞바꿈 계산법으로 나타내면 다음과 같습니다.<br />
<span style="color:#999">if식을 따로 과정에 넣지는 않겠습니다.</span></p>
<h3 id="a-1번-프로시저"><a class="markdownIt-Anchor" href="#a-1번-프로시저"></a> a. 1번 프로시저</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">4</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">4</span>) <span class="number">5</span>))   </span><br><span class="line">(<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">3</span>) <span class="number">5</span>))        </span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">5</span>))     </span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">2</span>) <span class="number">5</span>))))        </span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">5</span>))))  </span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">1</span>) <span class="number">5</span>)))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">5</span>)))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> <span class="number">5</span>))))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> (<span class="name">inc</span> <span class="number">6</span>)))</span><br><span class="line">(<span class="name">inc</span> (<span class="name">inc</span> <span class="number">7</span>))</span><br><span class="line">(<span class="name">inc</span> <span class="number">8</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<h3 id="b-2번-프로시저"><a class="markdownIt-Anchor" href="#b-2번-프로시저"></a> b. 2번 프로시저</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">4</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">4</span>) (<span class="name">inc</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">6</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">3</span>) (<span class="name">inc</span> <span class="number">6</span>))</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">7</span>)</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">2</span>) (<span class="name">inc</span> <span class="number">7</span>))</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">8</span></span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> (<span class="name">dec</span> <span class="number">1</span>) (<span class="name">inc</span> <span class="number">8</span>))</span><br><span class="line">(<span class="name"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">9</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>되도는 프로세스는 프로세스가 진행함에 따라 계산을 뒤로 미루는 탓에 식이 길게 늘어지는 특징이 있습니다.<sup>교재</sup> <sup>44p</sup> 반대로 반복하는 프로세스는 프로세스가 진행하면서 식의 길이가 늘거나 줄어들지 않습니다. 따라서 1번 프로시저는 되도는 프로세스이고, 2번 프로시저는 반복하는 프로세스입니다.</p>
<p>이 문제의 풀이과정 중에서 왜 (dec (dec (dec (dec 5))))와 같은 식으로 표현하지 않는지 궁금하신 분들도 계실것입니다. 맞바꿈 계산법은 정의대로 계산법과는 다릅니다. 정의대로 계산법으로 계산한다면, 끝까지 dec계산을 넘기기 때문에 (dec (dec (dec (dec 5))))같은 모습이 나오지만, 맞바꿈 계산법은 (dec 4)를 3으로 바꾸어서 계산하기 때문에 위와 같은 결과가 도출됩니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>1장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 3.1 친절한 풀이</title>
    <url>/sicp/chapter-3/exercise-3-1/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>어큐뮤레이터란 여러 수를 차례대로 이어 받아서 합을 내는 프로시저인데, 이 프로시저를 돌리면 그때까지 받은 인자 값을 모두 더한 값이 나온다고 하자. 새 어큐뮬레이터를 찍어내는 프로시저 make-accumulator를 정의하라. 단, 어큐뮬레이터마다 더한 값을 따로 들게 해야 한다. make-accumulator는 인자로 첫 값을 받는다 아래는 그 사례다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> A (<span class="name">make-accumulator</span> <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">A</span> <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">A</span> <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>가볍게 set!을 이용한 상태변수 활용을 연습해볼 수 있는 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-accumulator</span> base)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (amount)</span><br><span class="line">    (<span class="name"><span class="built_in">begin</span></span> (<span class="name"><span class="built_in">set!</span></span> base (<span class="name"><span class="built_in">+</span></span> base amount))</span><br><span class="line">           base)))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>3장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 1장 복습 체크리스트</title>
    <url>/sicp/review/chapter-1-review/</url>
    <content><![CDATA[<blockquote>
<h2 id="일러두기"><a class="markdownIt-Anchor" href="#일러두기"></a> 일러두기</h2>
<p>아래의 체크리스트에서 언급하는 모든 프로시저는 책을 보지 않고 짤 수 있을 정도로 숙달되어야 책을 제대로 읽었다고 할 수 있습니다. Dr.Racket을 열고 자신을 시험해보시기 바랍니다.</p>
</blockquote>
<h2 id="scheme의-기본-문법"><a class="markdownIt-Anchor" href="#scheme의-기본-문법"></a> scheme의 기본 문법</h2>
<ul>
<li>전위표기식<sup>prefix</sup> <sup>notation</sup>으로 프로시저를 작성하는 법을 설명할 수 있어야 합니다.</li>
<li><code>define</code>, <code>cond</code>, <code>if</code>, <code>let</code>의 사용에 완전히 익숙해져야 합니다.</li>
</ul>
<h2 id="컴파일러가-언어를-처리하는-법"><a class="markdownIt-Anchor" href="#컴파일러가-언어를-처리하는-법"></a> 컴파일러가 언어를 처리하는 법</h2>
<ul>
<li>컴파일러가 언어를 처리하는 두가지 방식인, 인자먼저 계산법과 정의대로 계산법의 정의를 각각 설명할 수 있어야 합니다.</li>
<li>또 각각의 방법의 차이가 두드러지는 예시를 들 수 있어야 합니다.</li>
</ul>
<h2 id="시간복잡도와-공간복잡도"><a class="markdownIt-Anchor" href="#시간복잡도와-공간복잡도"></a> 시간복잡도와 공간복잡도</h2>
<ul>
<li>프로세스의 자람차수 즉, 시간복잡도를 빅 세타 표기법으로 나타낼 수 있습니다.</li>
<li>복잡한 프로세스의 시간복잡도와 공간복잡도를 구할 수 있어야 합니다. (ex. change-count)</li>
</ul>
<h2 id="프로시저-설계-기법"><a class="markdownIt-Anchor" href="#프로시저-설계-기법"></a> 프로시저 설계 기법</h2>
<ul>
<li>람다식의 의미와 사용법을 정확히 알고 있어야 합니다.</li>
<li>프로시저와 프로세스의 차이를 설명할 수 있어야 합니다.</li>
<li>되도는 프로시저가 무엇인지 설명할 수 있고, 구현할 수 있어야 합니다.</li>
<li>되도는 프로세스와 반복하는 프로세스를 구현하는 기법에 완벽히 익숙해져야 합니다.</li>
<li><code>expmod</code>나 <code>fast-exp</code>처럼 시행 범위를 반씩 줄여서 자람차수를 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>으로 만드는 기법을 이해해야 합니다.</li>
<li>차수 높은 프로시저로 여러 복잡한 연산을 단순화할 수 있어야 합니다.</li>
</ul>
<h2 id="코드-구현-능력"><a class="markdownIt-Anchor" href="#코드-구현-능력"></a> 코드 구현 능력</h2>
<p>아래의 프로시저들의 수학적인 의미를 이해하고, 책을 보지 않고도 똑같이 구현할 수 있어야 합니다.</p>
<h3 id="1-뉴턴법을-이용한-제곱근"><a class="markdownIt-Anchor" href="#1-뉴턴법을-이용한-제곱근"></a> 1. 뉴턴법을 이용한 제곱근</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;case 1</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">sqrt</span></span> x)</span><br><span class="line">  (<span class="name">sqrt-iter</span> <span class="number">1.0</span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sqrt-iter</span> guess x)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">good-enough?</span> guess x)</span><br><span class="line">      guess</span><br><span class="line">      (<span class="name">sqrt-iter</span> (<span class="name">improve</span> guess x) x)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">good-enough?</span> guess x)</span><br><span class="line">  (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">square</span> guess) x)) <span class="number">0.001</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">improve</span> guess x)</span><br><span class="line">  (<span class="name">average</span> guess (<span class="name"><span class="built_in">/</span></span> x guess)))</span><br><span class="line"></span><br><span class="line"><span class="comment">;case2</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">sqrt</span></span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">good-enough?</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">square</span> guess) x)) <span class="number">0.001</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">improve</span> guess)</span><br><span class="line">    (<span class="name">average</span> guess (<span class="name"><span class="built_in">/</span></span> x guess)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">sqrt-iter</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name">good-enough?</span> guess)</span><br><span class="line">        guess</span><br><span class="line">        (<span class="name">sqrt-iter</span> (<span class="name">improve</span> guess))))</span><br><span class="line">  (<span class="name">sqrt-iter</span> <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>
<h3 id="2-팩토리얼"><a class="markdownIt-Anchor" href="#2-팩토리얼"></a> 2. 팩토리얼</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;recursion </span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">factorial</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>)</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      (<span class="name"><span class="built_in">*</span></span> n (<span class="name">factorial</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line">    </span><br><span class="line"><span class="comment">;iteration</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">factorial</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> product counter)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> counter n)</span><br><span class="line">        product</span><br><span class="line">        (<span class="name">iter</span> (<span class="name"><span class="built_in">*</span></span> counter product)</span><br><span class="line">              (<span class="name"><span class="built_in">+</span></span> counter <span class="number">1</span>))))</span><br><span class="line">  (<span class="name">iter</span> <span class="number">1</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<h3 id="3-피보나치-수열"><a class="markdownIt-Anchor" href="#3-피보나치-수열"></a> 3. 피보나치 수열</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;recursion</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fib</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>) <span class="number">1</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">fib</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br><span class="line">                 (<span class="name">fib</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">2</span>))))))</span><br><span class="line"></span><br><span class="line"><span class="comment">;iteration</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fib</span> n)</span><br><span class="line">  (<span class="name">fib-iter</span> <span class="number">1</span> <span class="number">0</span> n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fib-iter</span> a b count)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> count <span class="number">0</span>)</span><br><span class="line">      b</span><br><span class="line">      (<span class="name">fib-iter</span> (<span class="name"><span class="built_in">+</span></span> a b) a (<span class="name"><span class="built_in">-</span></span> count <span class="number">1</span>))))</span><br></pre></td></tr></table></figure>
<h3 id="4-거스름돈"><a class="markdownIt-Anchor" href="#4-거스름돈"></a> 4. 거스름돈</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">count-change</span> amount)</span><br><span class="line">  (<span class="name">cc</span> amount <span class="number">5</span>))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cc</span> amount kinds-of-coins)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> amount <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">&lt;</span></span> amount <span class="number">0</span>) (<span class="name"><span class="built_in">=</span></span> kinds-of-coins <span class="number">0</span>)) <span class="number">0</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">+</span></span></span><br><span class="line">                (<span class="name">cc</span> amount </span><br><span class="line">                    (<span class="name"><span class="built_in">-</span></span> kinds-of-coins <span class="number">1</span>))</span><br><span class="line">                (<span class="name">cc</span> (<span class="name"><span class="built_in">-</span></span> amount </span><br><span class="line">                       (<span class="name">first-denomination</span> kinds-of-coins)) </span><br><span class="line">                    kinds-of-coins)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">first-denomination</span> kinds-of-coins)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> kinds-of-coins <span class="number">1</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> kinds-of-coins <span class="number">2</span>) <span class="number">5</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> kinds-of-coins <span class="number">3</span>) <span class="number">10</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> kinds-of-coins <span class="number">4</span>) <span class="number">25</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> kinds-of-coins <span class="number">5</span>) <span class="number">50</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-거듭제곱"><a class="markdownIt-Anchor" href="#5-거듭제곱"></a> 5. 거듭제곱</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;recursion</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">expt</span></span> b n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      (<span class="name"><span class="built_in">*</span></span> b (<span class="name"><span class="built_in">expt</span></span> b (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line">    </span><br><span class="line"><span class="comment">;iteration</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">expt</span></span> b n)</span><br><span class="line">  (<span class="name">expt-iter</span> b n <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expt-iter</span> b counter product)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> counter <span class="number">0</span>)</span><br><span class="line">      product</span><br><span class="line">      (<span class="name">expt-iter</span> b</span><br><span class="line">                 (<span class="name"><span class="built_in">-</span></span> counter <span class="number">1</span>)</span><br><span class="line">                 (<span class="name"><span class="built_in">*</span></span> b product))))</span><br><span class="line"></span><br><span class="line"><span class="comment">;Θ(log n) recursion</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fast-expt</span> b n)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> n) (<span class="name">square</span> (<span class="name">fast-expt</span> b (<span class="name"><span class="built_in">/</span></span> n <span class="number">2</span>))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">*</span></span> b (<span class="name">fast-expt</span> b (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))  </span><br><span class="line">    </span><br><span class="line"><span class="comment">;Θ(log n) iteration</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expt-iter</span> b count product)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> count <span class="number">0</span>) product)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> count)</span><br><span class="line">         (<span class="name">expt-iter</span> (<span class="name">square</span> b)</span><br><span class="line">                    (<span class="name"><span class="built_in">/</span></span> count <span class="number">2</span>)</span><br><span class="line">                    product))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name">expt-iter</span> b</span><br><span class="line">                    (<span class="name"><span class="built_in">-</span></span> count <span class="number">1</span>)</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> b product)))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="6-최대-공약수"><a class="markdownIt-Anchor" href="#6-최대-공약수"></a> 6. 최대 공약수</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">gcd</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> b <span class="number">0</span>)</span><br><span class="line">      a</span><br><span class="line">      (<span class="name"><span class="built_in">gcd</span></span> b (<span class="name"><span class="built_in">remainder</span></span> a b))))</span><br></pre></td></tr></table></figure>
<h3 id="7-소수판별"><a class="markdownIt-Anchor" href="#7-소수판별"></a> 7. 소수판별</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;general</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">divides?</span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> b a) <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">smallest-divisor</span> n)</span><br><span class="line">  (<span class="name">find-divisor</span> n <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">find-divisor</span> n test-divisor)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&gt;</span></span> (<span class="name">square</span> test-divisor) n) n)</span><br><span class="line">        ((<span class="name">divides?</span> test-divisor n) test-divisor)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">find-divisor</span> n (<span class="name"><span class="built_in">+</span></span> test-divisor <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> n (<span class="name">smallest-divisor</span> n)))</span><br><span class="line">  </span><br><span class="line"><span class="comment">;Fermat</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">expmod</span> base exp m)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name">square</span> (<span class="name">expmod</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>) m))</span><br><span class="line">                    m))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">remainder</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">expmod</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) m))</span><br><span class="line">                    m))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fermat-test</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try-it</span> a)</span><br><span class="line">    (<span class="name"><span class="built_in">=</span></span> (<span class="name">expmod</span> a n n) a))</span><br><span class="line">  (<span class="name">try-it</span> (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> (<span class="name">random</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fast-prime?</span> n times)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> times <span class="number">0</span>) <span class="literal">#t</span>)</span><br><span class="line">        ((<span class="name">fermat-test</span> n) (<span class="name">fast-prime?</span> n (<span class="name"><span class="built_in">-</span></span> times <span class="number">1</span>)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> <span class="literal">#f</span>)))</span><br></pre></td></tr></table></figure>
<h3 id="8-수열의-덧셈"><a class="markdownIt-Anchor" href="#8-수열의-덧셈"></a> 8. 수열의 덧셈</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="built_in">+</span></span> (<span class="name">term</span> a)</span><br><span class="line">         (<span class="name">sum</span> term (<span class="name">next</span> a) next b))))</span><br></pre></td></tr></table></figure>
<h3 id="9-이분법"><a class="markdownIt-Anchor" href="#9-이분법"></a> 9. 이분법</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">half-interval-method</span> f a b)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">a-value</span> (<span class="name">f</span> a))</span><br><span class="line">        (<span class="name">b-value</span> (<span class="name">f</span> b)))</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">negative?</span></span> a-value) (<span class="name"><span class="built_in">positive?</span></span> b-value))</span><br><span class="line">           (<span class="name">search</span> f a b))</span><br><span class="line">          ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">negative?</span></span> b-value) (<span class="name"><span class="built_in">positive?</span></span> a-value))</span><br><span class="line">           (<span class="name">search</span> f b a))</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">           (<span class="name">error</span> <span class="string">&quot;Values are not of opposite sign&quot;</span> a b)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">search</span> f neg-point pos-point)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">mid-point</span> (<span class="name">average</span> neg-point pos-point)))</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name">close-enough?</span> neg-point pos-point)</span><br><span class="line">         mid-point</span><br><span class="line">         (<span class="name"><span class="built_in">let</span></span> ((<span class="name">test-value</span> (<span class="name">f</span> mid-point)))</span><br><span class="line">           (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">positive?</span></span> test-value)</span><br><span class="line">                  (<span class="name">search</span> f neg-point mid-point))</span><br><span class="line">                 ((<span class="name"><span class="built_in">negative?</span></span> test-value)</span><br><span class="line">                  (<span class="name">search</span> f mid-point pos-point))</span><br><span class="line">                 (<span class="name"><span class="built_in">else</span></span> mid-point))))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">close-enough?</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> x y)) <span class="number">0.001</span>))</span><br><span class="line">  </span><br><span class="line">(<span class="name">half-interval-method</span> sin <span class="number">2.0</span> <span class="number">4.0</span>)</span><br><span class="line"><span class="comment">;π</span></span><br></pre></td></tr></table></figure>
<h3 id="10-고정점"><a class="markdownIt-Anchor" href="#10-고정점"></a> 10. 고정점</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fixed-point</span> f first-guess)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">close-enough?</span> v1 v2)</span><br><span class="line">    (<span class="name"><span class="built_in">&lt;</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> v1 v2)) tolerance))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">try</span> guess)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next</span> (<span class="name">f</span> guess)))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name">close-enough?</span> next guess)</span><br><span class="line">          next</span><br><span class="line">          (<span class="name">try</span> next))))</span><br><span class="line">  (<span class="name">try</span> first-guess))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="11-뉴턴-방법"><a class="markdownIt-Anchor" href="#11-뉴턴-방법"></a> 11. 뉴턴 방법</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">newton-transform</span> g)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">    (<span class="name"><span class="built_in">-</span></span> x (<span class="name"><span class="built_in">/</span></span> (<span class="name">g</span> x) ((<span class="name">deriv</span> g) x)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">newtons-method</span> g guess)</span><br><span class="line">  (<span class="name">fixed-point</span> (<span class="name">newton-transform</span> g) guess))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">sqrt</span></span> x)</span><br><span class="line">  (<span class="name">newtons-method</span> (<span class="name"><span class="built_in">lambda</span></span> (y) (<span class="name"><span class="built_in">-</span></span> (<span class="name">square</span> y) x))</span><br><span class="line">                  <span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>
<h3 id="12-기타-다시-풀어볼-문제들"><a class="markdownIt-Anchor" href="#12-기타-다시-풀어볼-문제들"></a> 12. 기타 다시 풀어볼 문제들</h3>
<ul>
<li><a href="/sicp/chapter-1/exercise-1-41/">연습문제 1.41</a></li>
</ul>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>되짚어 생각하기</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP를 공부하는 데 필요한 준비물</title>
    <url>/sicp/review/sicp-materials/</url>
    <content><![CDATA[<p><img data-src="/img/sicp/review/sicp-book-cover.jpg" alt="SICP book cover" /></p>
<h2 id="sicp-책"><a class="markdownIt-Anchor" href="#sicp-책"></a> SICP 책</h2>
<p>당연히 SICP 교재는 필수입니다. 저는 <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=75122015">알라딘</a>에서 구입했습니다. 영어 실력이 충분하신 분이라면 <a href="https://libgen.is/book/index.php?md5=2E2D076C195F245EED60A5D3B00BE993">Library Genesis</a>에서 pdf를 다운받으셔도 좋을 것 같습니다.</p>
<h2 id="scheme-실행기"><a class="markdownIt-Anchor" href="#scheme-실행기"></a> Scheme 실행기</h2>
<p>SICP의 이론설명과 실습문제는 모두 Scheme 언어로 작성되었습니다. 따라서 이 책을 공부하기 위해서는 Scheme 언어를 실행할 수 있는 환경이 필요합니다. 저는 인터넷에서 여러 실행기를 찾아봤는데, 쓸만한 것은 <a href="https://www.tutorialspoint.com/execute_scheme_online.php">온라인 컴파일러</a>와 <a href="https://racket-lang.org/">Dr.Racket</a>입니다. 저는 Dr.Racket을 선택했습니다. 공부하시는 여러분들의 취향것 선택하시기 바랍니다. Dr.Racket을 사용하는 경우에는 아래 사진처럼 왼쪽 하단을 클릭해서 choose language -&gt; other languages -&gt; R5RS 를 선택해주시면 잘 실행됩니다.</p>
<p><img data-src="/img/sicp/review/sicp-materials-01.png" alt="R5RS" /></p>
<p>하지만, R5RS에는 (runtime)같은 프로시저가 내장되어있지 않습니다. 대부분의 문제를 푸는 데에는 상관이 없지만, <a href="/sicp/chapter-1/exercise-1-22">연습문제 1.22</a>같은 문제에는 sicp package가 반드시 필요합니다. Dr.Racket을 실행해서 file -&gt; Package Manager -&gt; sicp를 검색 -&gt; 패키지 설치 순으로 진행해 주시기 바랍니다.</p>
<p><img data-src="/img/sicp/review/sicp-package-manager.png" alt="SICP-package-manager" /></p>
<p>위와 같이 설정한 뒤 choose langauage -&gt; The Racket Language를 선택한 뒤 실행기 위에 #lang sicp를 붙여주면 잘 실행되는 모습을 볼 수 있습니다.</p>
<p><img data-src="/img/sicp/review/lang-sicp.png" alt="lang-sicp" /></p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>되짚어 생각하기</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.1 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-1/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>양수뿐 아니라 음수까지 다룰 수 있는 make-rat을 정의하라. 새 make-rat은, 유리수가 양수라면 분자와 분모 모두 양수이고, 유리수가 음수라면 분자만 음수가 되도록 처리해야 한다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>쉬워보이는 문제일수록 언제나 다양한 해답이 존재한다는 것을 알았습니다.<br />
구글에 검색해 보시면 더 다양한 해답들을 보실 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>처음 문제를 읽고 무지성으로 짜본 make-rat은 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">gcd</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> b <span class="number">0</span>)</span><br><span class="line">      a</span><br><span class="line">      (<span class="name"><span class="built_in">gcd</span></span> b (<span class="name"><span class="built_in">remainder</span></span> a b))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-rat</span> n d)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">negative?</span></span> x) (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">0</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> g (<span class="name"><span class="built_in">gcd</span></span> n d))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">negative?</span></span> (<span class="name"><span class="built_in">*</span></span> n d))</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">/</span></span> n g))) (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">/</span></span> d g)))</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">/</span></span> n g)) (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">/</span></span> d g)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">make-rat</span> <span class="number">51</span> <span class="number">-34</span>)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>대충 훑어봐도 로직을 간결하게 만드려는 최소한의 노력도 없이 덕지덕지 붙은 코드입니다.</p>
<p>조금 더 신경을 써서 로직을 개선해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-rat</span> n d)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> g (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">gcd</span></span> n d)))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> d <span class="number">0</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">/</span></span> n g)) (<span class="name"><span class="built_in">-</span></span> (<span class="name"><span class="built_in">/</span></span> d g)))</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">/</span></span> n g) (<span class="name"><span class="built_in">/</span></span> d g))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>스스로 만족하고 있는 코드입니다.<br />
(d&lt;0)이라면, n이 음수인지 양수인지에 상관없이 -n을 분자로 가져야 합니다.<br />
반대의 경우는 n이 음수인지 양수인지에 상관없이 n을 분자로 가져야 합니다.<br />
이 원리를 기반으로 짠 코드입니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-1.png" alt="정상적으로 쌍을 만드는 모습" /></p>
<p><br/><br/></p>
<p>인터넷을 찾아보니 조금 더 간추린 설계도 있었습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-rat</span> n d)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> g (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">gcd</span></span> n d)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">sign</span> x) (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">0</span>) - +))</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> ((<span class="name">sign</span> d) (<span class="name"><span class="built_in">/</span></span> n g)) ((<span class="name">sign</span> d) (<span class="name"><span class="built_in">/</span></span> d g))))</span><br></pre></td></tr></table></figure>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.10 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-10/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>전문 시스템 프로그래머 Ben Bitdiddle는 Alyssa가 한 일을 어깨 너머로 보다가, 0이 들어 있는 구간 값으로 나누어야 할 때 무슨 일을 하는지 깨끗하게 드러나지 않는다고 했다. 구간에 0이 들어 있는지 따져서 문제가 생겼을 때 잘못되었다고 알려줄 수 있도록, Alyssa의 코드를 고쳐 보아라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>error를 써서 요류처리를 하는 방법을 배웠습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>우선 구간 안에 0이 포함되는지 감별하는 프로시저부터 만들어 보겠습니다.<br />
구간 안에 0이 포함되려면 아래의 경우 중 하나를 만족해야 합니다.</p>
<ol>
<li>하한값이 음수이면서 상한값이 양수이다.</li>
<li>상한값이 0이다.</li>
<li>하한값이 0이다.</li>
</ol>
<p><br/><br/></p>
<p>위의 조건에 따라 프로시저를 구성하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pos?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">&gt;</span></span> x <span class="number">0</span>) (<span class="name"><span class="built_in">=</span></span> x <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">neg?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">0</span>))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">contain-zero?</span> z)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">and</span></span> (<span class="name">neg?</span> (<span class="name">lower-bound</span> z))</span><br><span class="line">              (<span class="name">pos?</span> (<span class="name">upper-bound</span> z)))</span><br><span class="line">         <span class="literal">#t</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name">lower-bound</span> z) <span class="number">0</span>)</span><br><span class="line">             (<span class="name"><span class="built_in">=</span></span> (<span class="name">upper-bound</span> z) <span class="number">0</span>))</span><br><span class="line">         <span class="literal">#t</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> <span class="literal">#f</span>)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>나눗셈에서 0이 포함된 구간을 어떤 수로 나누는 것은 크게 오류를 발생시키지 않습니다.<br />
하지만 0이 포함된 구간으로 나누는 것은 예상치 못한 오류를 발생시킵니다.<br />
예를들어 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>인 구간을 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(-2,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>로 나누는 상황을 가정해 봅시다.<br />
상한값과 하한값을 구할 수 있습니까?<br />
상한값과 하한값은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">∞</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-∞</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span>입니다.<br />
3을 0에 무한히 가까운 양수로 나눈 것과 0에 무한히 가까운 음수로 나는 값이기 때문입니다.<br />
이처럼 예상치 못한 범위가 출력될 수 있습니다.<br />
그렇기 때문에 코드에 에러 메세지를 넣어서 계산을 종료시키도록 프로시저를 수정하겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">div-interval</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">contain-zero?</span> y)</span><br><span class="line">      (<span class="name">error</span> <span class="string">&quot;second argument contains 0 in range&quot;</span>))</span><br><span class="line">  (<span class="name">mul-interval</span> x</span><br><span class="line">                (<span class="name">make-interval</span> (<span class="name"><span class="built_in">/</span></span> <span class="number">1.0</span> (<span class="name">upper-bound</span> y))</span><br><span class="line">                               (<span class="name"><span class="built_in">/</span></span> <span class="number">1.0</span> (<span class="name">lower-bound</span> y)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-10.png" alt="범위에 0이 포함되어 있을때 에러를 발생시키는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.11 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-11/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>또, Ben은 지나가다가 살짝 귀띔하기를 '구간 양 끝점의 부호가 어떻게 되는지 검사하면, mul-interval 프로시저는 계산하는 방법을 아홉 가지 경우로 나타낼 수 있는데, 그 중에 두 번 이상 곱셈 할 일은 한 번밖에 없다’고 한다. Ben이 제안한대로 mul-interval 프로시저를 다시 짜보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>특별히 얻은 것은 없습니다. 각각의 경우의 수를 구현하는 것이 귀찮았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제를 보면, 구간 양 끝점의 부호를 알면 경우의 수를 아홉가지로 줄일 수 있다고 합니다.<br />
이 말이 참말인지 한번 알아보도록 하겠습니다.<br />
하나의 구간은 세가지 경우로 나뉠 수 있습니다.</p>
<ol>
<li>양 끝점이 둘 다 양수인 경우 (pospos)</li>
<li>하한값은 음수고 상한값은 양수인 경우 (appo)</li>
<li>양 끝점이 둘 다 음수인 경우 (negneg)</li>
</ol>
<p><br/><br/></p>
<p>하나의 구간이 3가지 경우의 수로 나뉘므로<br />
2개의 구간을 곱셈연산하는 것은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn><mo>=</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">3×3=9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span>의 경우의 수로 나눌 수 있습니다.<br />
이를 define과 cond를 이용해 9가지의 경우의 수를 표현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pos?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">&gt;</span></span> x <span class="number">0</span>) (<span class="name"><span class="built_in">=</span></span> x <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">neg?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">0</span>))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pospos?</span> z)</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name">pos?</span> (<span class="name">lower-bound</span> z)) (<span class="name">pos?</span> (<span class="name">upper-bound</span> z))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">negpos?</span> z)</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name">neg?</span> (<span class="name">lower-bound</span> z)) (<span class="name">pos?</span> (<span class="name">upper-bound</span> z))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">negneg?</span> z)</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name">neg?</span> (<span class="name">lower-bound</span> z)) (<span class="name">neg?</span> (<span class="name">upper-bound</span> z))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">cond</span></span> </span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">pospos?</span> x) (<span class="name">pospos?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">pospos?</span> x) (<span class="name">negpos?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">pospos?</span> x) (<span class="name">negneg?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negpos?</span> x) (<span class="name">pospos?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negpos?</span> x) (<span class="name">negpos?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negpos?</span> x) (<span class="name">negneg?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negneg?</span> x) (<span class="name">pospos?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negneg?</span> x) (<span class="name">negpos?</span> y)))</span><br><span class="line">  ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negneg?</span> x) (<span class="name">negneg?</span> y))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>각각의 경우에 맞는 곱셈 결과를 cond문에 추가해서 프로시저를 완성시키겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">mul-interval</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">pospos?</span> z)</span><br><span class="line">    (<span class="name"><span class="built_in">and</span></span> (<span class="name">pos?</span> (<span class="name">lower-bound</span> z)) (<span class="name">pos?</span> (<span class="name">upper-bound</span> z))))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">negpos?</span> z)</span><br><span class="line">    (<span class="name"><span class="built_in">and</span></span> (<span class="name">neg?</span> (<span class="name">lower-bound</span> z)) (<span class="name">pos?</span> (<span class="name">upper-bound</span> z))))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">negneg?</span> z)</span><br><span class="line">    (<span class="name"><span class="built_in">and</span></span> (<span class="name">neg?</span> (<span class="name">lower-bound</span> z)) (<span class="name">neg?</span> (<span class="name">upper-bound</span> z))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> </span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">pospos?</span> x) (<span class="name">pospos?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">lower-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">upper-bound</span> y))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">pospos?</span> x) (<span class="name">negpos?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">upper-bound</span> y))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">pospos?</span> x) (<span class="name">negneg?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">upper-bound</span> y))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negpos?</span> x) (<span class="name">pospos?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">upper-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">upper-bound</span> y))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negpos?</span> x) (<span class="name">negpos?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">min</span></span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">upper-bound</span> y))</span><br><span class="line">                         (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> y)))</span><br><span class="line">                    (<span class="name"><span class="built_in">max</span></span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">lower-bound</span> y))</span><br><span class="line">                         (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">upper-bound</span> y)))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negpos?</span> x) (<span class="name">negneg?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">lower-bound</span> y))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negneg?</span> x) (<span class="name">pospos?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">upper-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> y))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negneg?</span> x) (<span class="name">negpos?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">upper-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">lower-bound</span> y))))</span><br><span class="line">    ((<span class="name"><span class="built_in">and</span></span> (<span class="name">negneg?</span> x) (<span class="name">negneg?</span> y))</span><br><span class="line">     (<span class="name">make-interval</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">upper-bound</span> y))</span><br><span class="line">                    (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">lower-bound</span> y))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>문제에서 말한 두번 이상 곱셈을 해야 하는 경우는 x와 y 둘다 음수 하한값과 양수 상한값을 가질 때입니다.<br />
이 경우 하한끼리 곱한 값과 상한 끼리 곱한 값 중 어떤 것이 더 클지는 알 수 없기 때문입니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.13 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-13/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>허용 오차를 아주 작은 퍼센트 값으로 나타냈다 치고, 허용 오차를 퍼센트로 나타낸 두 구간 값을 받아서 곱셈을 했을 때, 두 구간 값을 곱해서 나온 구간 값의 퍼센트 오차를 어림잡아 구할 수 있는 간단한 공식이 있음을 밝혀라. 이 문제를 풀 때 모든 수가 양수라고 가정하면, 문제가 쉬워진다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>변수를 상정하고 일반적인 경우의 계산을 통해 가설을 증명하는 좋은 연습이 되었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제에서 제안한 대로 모든 수가 양수인 두 구간을 상정하겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>:</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>p</mi><mi>e</mi><mi>r</mi><mo>:</mo><msub><mi>p</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r_1 = (center: c_1, per: p_1 )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>:</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator="true">,</mo><mi>p</mi><mi>e</mi><mi>r</mi><mo>:</mo><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r_2 = (center: c_2, per: p_2 )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>위의 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mo>×</mo><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">r_1 × r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>를 계산하면 아래와 같은 하한값과 상한값을 얻을 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mo>:</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><mn>100</mn><msub><mi>c</mi><mn>1</mn></msub><msub><mi>p</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>2</mn></msub><mo>+</mo><mn>100</mn><msub><mi>c</mi><mn>2</mn></msub><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">upper: (c_1+100c_1p_1)(c_2+100c_2p_2)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mo>:</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo>−</mo><mn>100</mn><msub><mi>c</mi><mn>1</mn></msub><msub><mi>p</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>2</mn></msub><mo>−</mo><mn>100</mn><msub><mi>c</mi><mn>2</mn></msub><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lower: (c_1-100c_1p_1)(c_2-100c_2p_2)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>위의 범위에서 중간값, 넓이, 오차를 구하면 아래와 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>:</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub><mo>+</mo><mn>10000</mn><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">center: c_1c_2+10000c_1c_2p_1p_2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>:</mo><mn>100</mn><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mo>+</mo><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">width: 100c_1c_2(p_1+p_2)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>:</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mo>+</mo><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><mrow><mn>0.0001</mn><mo>+</mo><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>2</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">percent: \frac{(p_1+p_2)}{0.0001+p_1p_2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><br/><br/><br />
즉, 두 구간 값을 곱해서 나온 구간 값의 퍼센트 오차는 어림잡아서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mo>+</mo><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>2</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{(p_1+p_2)}{p_1p_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.491108em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>라는 것을 알 수 있습니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.12 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-12/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>구간의 가운데 값과 허용 오차를 인자로 받되, 허용 오차는 퍼센트 단위로 넘겨 받아서 구간 값을 만드는 make-center-percent를 정의하라. 또, 구간 값에서 허용 오차가 몇 퍼센트인지 알아보는 percent 프로시저도 정의하라. 구간의 가운데 값을 골라내는 center 프로시저는 바로 앞에 나온 것과 같다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>딱히 없었습니다. 굳이 의미를 찾아보자면,<br />
데이터의 짜맞추개를 다르게 짜보는 시간이었습니다.<br />
다른 방법으로 데이터의 짜맞추개를 만들더라도, 요약의 경계 덕분에 다른 프로시저의 입장에서는 크게 신경쓸 일이 없을 것 같습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제를 푸는 것은 크게 어렵지 않으므로 자세한 성명은 생략하겠습니다</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>=</mo><mo stretchy="false">(</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">width = (upper-lower)/2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>=</mo><mo stretchy="false">(</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">center = (upper+lower)/2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mi mathvariant="normal">/</mi><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo stretchy="false">)</mo><mo>×</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">percent = (width/center) × 100
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord">/</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-center-percent</span> c p)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">w</span> (<span class="name"><span class="built_in">*</span></span> c p <span class="number">0.01</span>)))</span><br><span class="line">    (<span class="name">make-interval</span> (<span class="name"><span class="built_in">-</span></span> c w) (<span class="name"><span class="built_in">+</span></span> c w))))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">width</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> x)) <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">center</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> x)) <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">percent</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">*</span></span> (<span class="name"><span class="built_in">/</span></span> (<span class="name">width</span> x) (<span class="name">center</span> x)) <span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>테스트를 위해 아래의 코드를 실행해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> R (<span class="name">make-center-percent</span> <span class="number">100</span> <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">display</span></span> R)</span><br><span class="line">(<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line">(<span class="name">width</span> R)</span><br><span class="line">(<span class="name">center</span> R)</span><br><span class="line">(<span class="name">percent</span> R)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>테스트 코드가 잘 동작한다면, (90, 110)과 그 외의 수치들을 결과로 내놔야 합니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-12.png" alt="(90,110)을 반환하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.14 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-14/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Lem의 말이 옳다는 것을 실험으로 알아보자. 그러려면, 여러 가지 계산식을 가지고 Alyssa가 만든 시스템이 어떻게 돌아가는지 살펴봐야 알 수 있다. 구간 값 A,B가 있고 A/A와 A/B를 구할 때, Alyssa가 만든 시스템을 써보라. 이 문제에 대한 문제점을 제대로 알아보려면, 가운데 값의 폭이 아주 작은 퍼센트 값을 가진다고 해놓고 문제를 풀어야 한다. (<a href="/sicp/chapter-2/exercise-2-12">연습문제 2.12</a>중간값-퍼센트 꼴로 실현해 보라.)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>왜 구간 산술 연산에서는 대수적 차원의 동치를 적용하기 힘든지 알게되었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>대수적인 차원에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">/</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">A/A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord">/</span><span class="mord mathdefault">A</span></span></span></span>는 항상 1이어야 합니다.<br />
하지만, Alyssa가 만든 시스템에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">/</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">A/A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord">/</span><span class="mord mathdefault">A</span></span></span></span>는 1이 아니라 범위로 나타납니다.<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(2,8)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mclose">)</span></span></span></span>이라고 할때, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">/</mi><mi>A</mi><mo>=</mo><mo stretchy="false">(</mo><mn>0.25</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A/A=(0.25,4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord">/</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span>로 계산하는 것입니다.</p>
<p><br/><br/></p>
<p>그렇기 때문에 대수적 차원에서 같은 의미인 두 식이지만,</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msub><mi>R</mi><mn>1</mn></msub><msub><mi>R</mi><mn>2</mn></msub></mrow><mrow><msub><mi>R</mi><mn>1</mn></msub><mo>+</mo><msub><mi>R</mi><mn>2</mn></msub></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>R</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>R</mi><mn>2</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{R_1R_2}{R_1+R_2} = \frac{1}{1/R_1 + 1/R_2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<br/>
<p>두번째 식에서는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">1/R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span>을 정상적으로 계산해서 옳은 결과를 내고</p>
<p>첫번째 식에서는 자기자신을 나누는 일이 발생하는데,<br />
Alyssa의 시스템은 자기 자신을 나누는 데에 오류가 있으므로 틀린 결과를 내놓는 것입니다.</p>
<br/>
<p>결론은, 대수적 차원에서 같은 수식이더라도 Alyssa의 시스템에서는 다른 식으로 계산될 수 있다는 것입니다.</p>
<br/>
<br/>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.15 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-15/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Alyssa의 시스템을 써본 또 다른 사용자 Eva Lu Ator는 대수적으로 같은 식이지만 다른 식이 있을 때 계산된 구간 값이 다르게 나오는 문제점을 또 알아차렸다. Alyssa의 시스템으로 구간 계산을 할 때 부정확한 수를 나타내는 변수가 있는데, 그 변수를 되풀이해서 쓰지 않는 어떤 공식을 쓸 수 있으면, 그 공식이 오차 범위를 더 줄인다고 했다. 그렇게 보면, 병렬 저항을 구할 대 같은 병렬 저항을 구하는 공식이라 하더라도 par2가 par1보다 나은 프로그램이라고 말했다. 이 말이 옳은가? 그렇다면 그 까닭은 무엇인가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>왜 구간 산술 연산에서는 대수적 차원의 동치를 적용하기 힘든지 알게되었습니다.<br />
시험을 위해 테스트 케이스를 만드는 스킬의 경험치가 조금 증가했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="/sicp/chapter-2/exercise-2-14">연습문제 2.14</a>에서도 보았듯, 대수적 차원에서 같은 표현식도 Alyssa의 시스템에서는 다른 값을 산출한다는 것을 확인했습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">/</mi><mi>A</mi><mi mathvariant="normal">≠</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">A/A \neq 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord">/</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p><br/><br/></p>
<p>이 사례는 한 표현식에서 같은 문자가 여러번 사용될 수록 오차의 범위가 늘어난다는 것으로 일반화할 수 있습니다. 그러므로 par1보다는 par2가 더 정확한 계산법이라는 것을 알 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mn>1</mn><mo>=</mo><mfrac><mrow><msub><mi>R</mi><mn>1</mn></msub><msub><mi>R</mi><mn>2</mn></msub></mrow><mrow><msub><mi>R</mi><mn>1</mn></msub><mo>+</mo><msub><mi>R</mi><mn>2</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">par1 = \frac{R_1R_2}{R_1+R_2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mn>2</mn><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>R</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>R</mi><mn>2</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">par2 = \frac{1}{1/R_1+1/R_2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><br/><br/></p>
<p>같은 문자가 여러번 사용될 수록 오차의 범위가 늘어난다는 것을 시험하기 위해 다음의 테스트코드를 실행시켜 보기로 했습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mfrac><msup><mi>A</mi><mn>2</mn></msup><mi>A</mi></mfrac><mo>=</mo><mfrac><msup><mi>A</mi><mn>3</mn></msup><msup><mi>A</mi><mn>2</mn></msup></mfrac><mo>=</mo><mfrac><msup><mi>A</mi><mn>4</mn></msup><msup><mi>A</mi><mn>3</mn></msup></mfrac><mo>=</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">A= \frac{A^2}{A}= \frac{A^3}{A^2} = \frac{A^4}{A^3}= ⋯
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span></span></p>
<p><br/><br/></p>
<p>계산을 도와줄 pow-interval 프로시저입니다. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>을 구하는 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pow-interval</span> b n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      (<span class="name">make-interval</span> <span class="number">1.0</span> <span class="number">1.0</span>)</span><br><span class="line">      (<span class="name">mul-interval</span> b</span><br><span class="line">                    (<span class="name">pow-interval</span> b (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>A는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>95</mn><mo separator="true">,</mo><mn>105</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(95, 105)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">9</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mclose">)</span></span></span></span>입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> A (<span class="name">make-center-percent</span> <span class="number">100</span> <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">display</span></span> A)</span><br><span class="line">(<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">div-interval</span> (<span class="name">pow-interval</span> A <span class="number">2</span>)</span><br><span class="line">              (<span class="name">pow-interval</span> A <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">div-interval</span> (<span class="name">pow-interval</span> A <span class="number">3</span>)</span><br><span class="line">              (<span class="name">pow-interval</span> A <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">div-interval</span> (<span class="name">pow-interval</span> A <span class="number">4</span>)</span><br><span class="line">              (<span class="name">pow-interval</span> A <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">div-interval</span> (<span class="name">pow-interval</span> A <span class="number">5</span>)</span><br><span class="line">              (<span class="name">pow-interval</span> A <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br />
산출되는 값에서 A가 많아질 수록, 오차가 커지는 것을 확인할 수 있습니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-15.png" alt="갈수록 오차가 커지는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.17 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-17/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>(빈 리스트가 아닌) 리스트를 인자로 받아, 그 리스트의 마지막 원소만으로 이루어진 리스트를 내놓는 last-pair 프로시저를 정의하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>스킴에서 리스트를 어떻게 표현하는 지에 관한 이해도가 상승했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>어떤 리스트의 원소가 마지막 원소인지 알기 위해서는 그 원소의 바로 뒤 원소가 null임을 확인해야 합니다. 이 아이디어를 기반으로 프로시저를 구성하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">last-pair</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">last-element</span> z)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">cdr</span></span> z))</span><br><span class="line">        (<span class="name"><span class="built_in">car</span></span> z)</span><br><span class="line">        (<span class="name">last-element</span> (<span class="name"><span class="built_in">cdr</span></span> z))))</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> (<span class="name">last-element</span> x)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>테스트 코드로 문제에서 제시한 코드를 사용하면 제대로 동작하는 것을 확인할 수 있습니다.</p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-17.png" alt="(34)를 반한하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.18 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-18/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>리스트를 인자로 받아 그 원소들의 차례를 거꾸로 뒤집는 reverse 프로시저를 정의하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>스킴에서 리스트를 어떻게 표현하는 지에 관한 이해도가 상승했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>리스트의 원소를 뒤집는 것은 새로운 리스트를 만들고 꺼내는 순서대로 다시 넣는 것으로 생각할 수 있습니다. 하지만 scheme에서는 다른 언어들 처럼 또다른 배열을 만들어 놓고 append하는 것이 불가능하므로 아래와 같이 result 인자를 이용한 재귀 프로시저로 구현합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">reverse</span></span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">reverse-iter</span> x result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> x)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">reverse-iter</span> (<span class="name"><span class="built_in">cdr</span></span> x) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> x) result))))</span><br><span class="line">  (<span class="name">reverse-iter</span> x nil))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>문제에서 제공한 테스트 코드도 실행시켜 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">reverse</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span> <span class="number">25</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-18.png" alt="예상한 결과를 잘 반환하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.19 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-19/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>1.2.2절의 동전 바꾸기 프로그램을 살펴보자. 정해진 돈을 동전으로 바꾸는 방법이 몇 가지나 되는지 알아봤는데, 어떤 화폐로 쓸지 바꿔 끼울 수도 있도록 프로그램을 짜두면 좋다. 앞서 만든 프로그램에서는, 어떤 화폐를 쓰느냐는 first-denomination에서 결정하고, 동전 바꾸는 방법은 count-change 프로시저로 나누어 짰다(미국 동전은 다섯 가지라서 이 프로시저에는 5라는 값이 들어가 있다.). 여기에 화폐를 바꿔 끼울 수 있으려면 동전 리스트를 인자값으로 건넬 수 있어야 한다.</p>
<p>아울러, 두번째 인자에 어떤 동전을 쓸지 나타내는 정수값 말고, 동전 값어치의 리스트를 받을 수 있게끔 cc 프로시저를 다시 정의하려 한다. 이때, 어느나라 화폐인지에 따라 동전 리스트를 정의하면 다음과 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> us-coins (<span class="name"><span class="built_in">list</span></span> <span class="number">50</span> <span class="number">25</span> <span class="number">10</span> <span class="number">5</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> uk-coins (<span class="name"><span class="built_in">list</span></span> <span class="number">100</span> <span class="number">50</span> <span class="number">20</span> <span class="number">10</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>
<p>이렇게 고쳤을 때, cc 프로시저의 결과는 다음과 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">cc</span> <span class="number">100</span> us-coins)</span><br><span class="line">&gt;&gt; <span class="number">292</span></span><br></pre></td></tr></table></figure>
<p>이런 결과가 나오도록 cc 프로시저를 좀 고쳐 써야 한다. 앞에서 만들어 본 cc 프로시저의 구조는 가만히 두고, 두 번째 인자를 고쳐 써 보면 다음과 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">cc</span> amount coin-values)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> amount <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">&lt;</span></span> amount <span class="number">0</span>) (<span class="name">no-more?</span> coin-values)) <span class="number">0</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">+</span></span> (<span class="name">cc</span> amount</span><br><span class="line">                (<span class="name">except-first-denomination</span> coin-values))</span><br><span class="line">            (<span class="name">cc</span> (<span class="name"><span class="built_in">-</span></span> amount</span><br><span class="line">                   (<span class="name">first-denomination</span> coin-values))</span><br><span class="line">                coin-values)))))</span><br></pre></td></tr></table></figure>
<p>리스트 구조를 다루는 기본 연산으로 first-denomination, except-first-denomination, no-more? 프로시저를 정의하라… coin-values 리스트 원소들의 차례가 cc 프로시저의 결과에 영향을 주는가? 그렇다면 그 까닭은 무엇인가? 또는 그렇지 않다면 그 까닭은 무엇인가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>list를 이용해 프로시저의 표현력을 높일 수 있습니다.<br />
왜 nil과 직접 비교하지 않고 null?을 사용하는지 알 수 있었습니다.<br />
프로시저의 이름만으로 프로시저의 의미를 섣불리 예측할 수 없다는 것을 실감했습니다.<br />
no-more? 프로시저는 원소가 한개만 남았을 때가 아니라, 아무것도 남지 않았을 때에 참을 반환하는 프로시저였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>cc 프로시저가 기억나지 않으시는 분들들은 책의 1.2.2절을 다시 읽고 와주시기 바랍니다.<br />
문제에서 요구하는 프로시저 3가지는 다음과 같습니다.</p>
<ul>
<li>no-more? 동전 리스트에 더이상 동전이 없는지 확인하는 프로시저</li>
<li>except-first-denomination 리스트의 첫번째 원소를 제거한 리스트를 반환하는 프로시저</li>
<li>first-denomination 리스트의 첫번째 원소를 반환하는 프로시저</li>
</ul>
<p><br/><br/></p>
<p>차례로 구현하면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">no-more?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">null?</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">except-first-denomination</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">first-denomination</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> x))</span><br></pre></td></tr></table></figure>
<br/>
<p>책에 있는 예시로 테스트 코드를 실행시켜 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">cc</span> <span class="number">100</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">50</span> <span class="number">25</span> <span class="number">10</span> <span class="number">5</span> <span class="number">1</span>))</span><br><span class="line">&gt;&gt;&gt; <span class="number">292</span></span><br></pre></td></tr></table></figure>
<br/>
<p><img data-src="/img/sicp/chapter-2/exercise-2-19.png" alt="292를 반환하는 모습" /></p>
<p><br/><br/></p>
<p>처음 이 문제를 풀었을 때에는 no-more?를 구현할 때 다음과 같은 코드를 사용했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">no-more?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">cdr</span></span> x) nil))</span><br></pre></td></tr></table></figure>
<br/>
<p>위의 코드가 틀린 이유는 '='는 숫자끼리만 비교가 가능하기 때문입니다.<br />
(list 1 2 3)과 nil은 비교가 불가능합니다.</p>
<br/>
<p>또 이렇게도 구현해 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">no-more?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">length</span></span> (<span class="name"><span class="built_in">cdr</span></span> x)) <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<br/>
<p>마지막 원소가 남았을 때에 참을 반환하는 프로시저로 생각하고 있었던 것입니다.<br />
하지만 프로시저를 다시 찬찬히 읽어보았더니 원소가 아무것도 남지 않았을 때에 참을 반환하는 프로시저였습니다.</p>
<p>프로시저의 이름만으로 의미를 완벽하게 추측할 수 없다는 클린코드 법칙을 실감했습니다.</p>
<br/>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.16 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-16/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>흔히 대수적으로 같은 식들이 왜 다른 결과를 내놓는지 설명하라. 이런 흠이 없도록, 구간-산술 연산 꾸러미를 만들 수 있는가? 아니면 이런 일은 불가능한 일인가? (경고: 이 문제는 아주 어렵다.)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>왜 구간 산술 연산에서는 대수적 차원의 동치를 적용하기 힘든지 알게 되었습니다.<br />
자신의 한계를 알게 되었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="/sicp/chapter-2/exercise-2-14">연습문제 1.14</a>, <a href="/sicp/chapter-2/exercise-2-15">연습문제 1.15</a>에서 보앗듯 하나의 식에 같은 변수가 많이 쓰일수록 오차의 범위가 넓어집니다. 이 규칙은 몇가지 사칙연산에서 볼 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>+</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A+A
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A-A
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>×</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A×A
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>÷</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A÷A
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p>
<p><br/><br/><br />
대수적으로 동일한 값을 얻기 위해서는 아래 식들에서 expected 값을 반환해야 합니다. 하지만 Alyssa의 시스템에서는 Alyssa 값을 반환합니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A=[-2,2]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>+</mo><mi>A</mi><mtext>    </mtext><mi>e</mi><mi>x</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mo>:</mo><mo stretchy="false">[</mo><mo>−</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo><mtext>    </mtext><mi>A</mi><mi>l</mi><mi>y</mi><mi>s</mi><mi>s</mi><mi>a</mi><mo>:</mo><mo stretchy="false">[</mo><mo>−</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A+A \ \ \ \ expected:[-4,4] \ \ \ \ Alyssa:[-4,4]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mi>A</mi><mtext>    </mtext><mi>e</mi><mi>x</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mo>:</mo><mn>0</mn><mtext>    </mtext><mi>A</mi><mi>l</mi><mi>y</mi><mi>s</mi><mi>s</mi><mi>a</mi><mo>:</mo><mo stretchy="false">[</mo><mo>−</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A-A \ \ \ \ expected:0 \ \ \ \ Alyssa:[-4,4]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>×</mo><mi>A</mi><mtext>    </mtext><mi>e</mi><mi>x</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mo>:</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo><mtext>    </mtext><mi>A</mi><mi>l</mi><mi>y</mi><mi>s</mi><mi>s</mi><mi>a</mi><mo>:</mo><mo stretchy="false">[</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A×A \ \ \ \ expected:[0,4] \ \ \ \ Alyssa:[4,4]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>÷</mo><mi>A</mi><mtext>    </mtext><mi>e</mi><mi>x</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mo>:</mo><mn>1</mn><mtext>    </mtext><mi>A</mi><mi>l</mi><mi>y</mi><mi>s</mi><mi>s</mi><mi>a</mi><mo>:</mo><mo stretchy="false">[</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A÷A \ \ \ \ expected:1 \ \ \ \ Alyssa:[-∞,+∞]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">]</span></span></span></span></span></p>
<p><br/><br/></p>
<p>위와 같은 기본적인 사칙연산부터 대수적인 오류가 있기 때문에, 대수적으로 같은 식들도 다른 결과를 내놓는 것입니다. 이런 흠이 없도록 구간-산술 연산 꾸러미를 만드는 것은 제 수준에서는 불가능하다는 것을 빠르게 인정했습니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.2 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-2/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>평면에 선분을 긋는 문제를 생각해 보자. 모든 선분은 시작 점과 끝 점의 쌍으로 나타낼 수 있다. 두 점을 짜맞춰 선분을 만들어 내는 make-segment와 선분에서 두 끝 점을 골라내는 start-segment, end-segment를 정의하라. 또한, 점도 x좌표를 나타내는 수와 y 좌표를 나타내는 수를 한 쌍으로 해서 나타낼 수 있다. 그에 따라 make-point와 x-point, y-point를 만들어서 이런 표현 방법을 정의하라. 끝으로 지금까지 만든 짜맞추개와 고르개를 써서 선분을 인자로 받아 가운데 점(선분의 두 끝점을 편균하여 얻어낸 좌표점)을 내놓는 프로시저 midpoint-segment를 정의하라. 그 다음에 아래와 같이 점의 좌표를 찍어내는 프로시저를 써서 결과가 제대로 나오는지 확인해 보라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">print-point</span> p)</span><br><span class="line">  (<span class="name"><span class="built_in">newline</span></span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;(&quot;</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> (<span class="name">x-point</span> p))</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;,&quot;</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> (<span class="name">y-point</span> p))</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;)&quot;</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>cons, car, cdr의 사용을 연습할 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>point와 segment의 짜맞추개와 고르개 프로시저들은 cons, car, cdr을 이용해서 쉽게 표현할 수 있었습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-point</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> x y))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">x-point</span> p)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> p))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">y-point</span> p)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> p))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-segment</span> p1 p2)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> p1 p2))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">start-segment</span> seg)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> seg))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">end-segment</span> seg)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> seg))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>(midpoint-segment seg)는 점과 점 사이의 중점을 구하는 프로시저 (midpoint p1 p2)를 이용해서 표현했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">midpoint</span> p1 p2)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">x</span> (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">x-point</span> p1) (<span class="name">x-point</span> p2)) <span class="number">2</span>))</span><br><span class="line">        (<span class="name">y</span> (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">y-point</span> p1) (<span class="name">y-point</span> p2)) <span class="number">2</span>)))</span><br><span class="line">    (<span class="name">make-point</span> x y)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">midpoint-segment</span> seg)</span><br><span class="line">  (<span class="name">midpoint</span> (<span class="name">start-segment</span> seg) (<span class="name">end-segment</span> seg)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>문제에서 제공한 (print-point p)를 이용해서 아래의 테스트를 진행해 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> point1 (<span class="name">make-point</span> <span class="number">2</span> <span class="number">0</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> point2 (<span class="name">make-point</span> <span class="number">4</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> segment (<span class="name">make-segment</span> point1 point2))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> mid (<span class="name">midpoint-segment</span> segment))</span><br><span class="line">(<span class="name">print-point</span> mid)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-2.png" alt="(2,0)과 (4,5)의 중점인 (3,2.5)" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.20 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-20/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>+,*,list같은 프로시저에서는 인자의 수가 정해지지 않는다. 그런 프로시저를 정의하는 방법 가운데 하나는, 꼬리점 문법<sup>dotted-tail notation</sup>을 쓰는 것이다. 이 문법으로 프로시저를 정의할 때에는, 마지막 인자 이름 앞에 '.'이 찍힌 인자 리스트를 받는다. 이때 이 문법이 뜻하는 바는, 이렇게 정의된 프로시저를 불러 썼을 때, 첫 번째 인자<sup>parameter</sup>는 다른 프로시저와 다를 바 없이 첫 번째 인자 값<sup>argument</sup>으로 맞바뀐다는 것이다. 그러나 마지막 인자는 남아 있는 인자들의 리스트가 된다. 그 보기로, 다음과 같은 프로시저 정의가 있다고 하자.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x y . z) &lt;body&gt;)</span><br></pre></td></tr></table></figure>
<p>프로시저 f는 인자를 두 개 이상 받을 수 있다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>f</mi><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>2</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>5</mn><mtext> </mtext><mn>6</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(f \ 1 \ 2 \ 3 \ 4 \ 5 \ 6)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord">1</span><span class="mspace"> </span><span class="mord">2</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">5</span><span class="mspace"> </span><span class="mord">6</span><span class="mclose">)</span></span></span></span></span></p>
<p>이 경우에, f의 몸에서 x는 1로, y는 2로, z는 리스트 (3 4 5 6)의 값으로 맞바뀐다. 또, 다음과 같은 정의가 있다고 하자.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">g</span> . w) &lt;body&gt;)</span><br></pre></td></tr></table></figure>
<p>이때, 프로시저 g는 인자를 0개 이상으로 받을 수 있다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>g</mi><mtext> </mtext><mn>1</mn><mtext> </mtext><mn>2</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mn>4</mn><mtext> </mtext><mn>5</mn><mtext> </mtext><mn>6</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(g \ 1 \ 2 \ 3 \ 4 \ 5 \ 6)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mord">1</span><span class="mspace"> </span><span class="mord">2</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mord">4</span><span class="mspace"> </span><span class="mord">5</span><span class="mspace"> </span><span class="mord">6</span><span class="mclose">)</span></span></span></span></span></p>
<p>g의 몸에서 w는 리스트 (1 2 3 4 5 6)의 값을 받는다.<br />
이 문법을 써서, 하나 이상의 정수를 인자로 받아, 첫 번째 인자가 짝수라면 짝수 원소만, 홀수라면 홀수 원소만 들어 있는 리스트를 결과로 내놓는 프로시저 same-parity를 짜보라. 이 프로시저에 다음 인자 값을 건네어 계산하면, 그 아래에 있는 결과가 나온다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">same-parity</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>)</span><br><span class="line">&gt;&gt; (<span class="name">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>여러 인자를 받는 프로시저를 정의할 수 있는 방법을 배웠습니다.<br />
iter를 이용해서 리스트를 만들때 받은 순서대로 만드는 방법과, 그 반대로 만드는 방법을 둘 다 사용해볼 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>저는 내부적으로 되도는 프로시저를 구현할 때, 홀수인지 짝수인지 결정하는 프로시저 even?과 odd?를 인자로 넘겨주어 사용했습니다. 지금 생각해보니, filter 프로시저를 사용해서 구현하는 것도 좋은 방법같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">same-parity</span> a . b)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">list-iter</span> term x)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> x)</span><br><span class="line">        nil</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name">term</span> (<span class="name"><span class="built_in">car</span></span> x))</span><br><span class="line">            (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> x) (<span class="name">list-iter</span> term (<span class="name"><span class="built_in">cdr</span></span> x)))</span><br><span class="line">            (<span class="name">list-iter</span> term (<span class="name"><span class="built_in">cdr</span></span> x)))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">even?</span></span> a)</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> a (<span class="name">list-iter</span> even? b))</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> a (<span class="name">list-iter</span> odd? b))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>아래의 테스트 코드를 사용해서 프로시저를 테스트해 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">same-parity</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span>)</span><br><span class="line">(<span class="name">same-parity</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<br/>
<p><img data-src="/img/sicp/chapter-2/exercise-2-20.png" alt="홀수 리스트와 짝수 리스트를 출력하는 모습" /></p>
<br/>
<br/>
<p>filter를 사용해서 한번 구현해 보았습니다. 아래의 filter 프로시저는 책의 151p에 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">filter</span> predicate sequence)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> sequence) nil)</span><br><span class="line">        ((<span class="name">predicate</span> (<span class="name"><span class="built_in">car</span></span> sequence))</span><br><span class="line">         (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> sequence) (<span class="name">filter</span> predicate (<span class="name"><span class="built_in">cdr</span></span> sequence))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">filter</span> predicate (<span class="name"><span class="built_in">cdr</span></span> sequence)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">same-parity</span> a . b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">even?</span></span> a)</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> a (<span class="name">filter</span> even? b))</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> a (<span class="name">filter</span> odd? b))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-20-1.png" alt="동일하게 홀수 리스트와 짝수 리스트를 출력하는 모습" /></p>
<br/>
<br/>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.21 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-21/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>square-list 프로시저는 다음과 같이 수 리스트를 인자로 받아서 모든 원소를 제곱한 다음 그 결과로 묶어서 리스트를 내놓는다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">sqaure-list</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>))</span><br><span class="line">&gt;&gt;&gt; (<span class="name">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<p>square-list 프로시저를 정의하는 방법은 다음 두 가지다. 빈 곳을 채워 프로시저를 완성하라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-list</span> items)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> items)</span><br><span class="line">      nil</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> &lt;??&gt; &lt;??&gt;)))</span><br><span class="line">    </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-list</span> items)</span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; &lt;??&gt;))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>map 프로시저의 구현 방법과 활용법을 알 수 있었습니다.<br />
map 프로시저가 다른 함수를 인자로 받는 차수 높은 프로시저라는 것을 이해했습니다.<br />
map 프로시저가 사용자로부터 어떻게 리스트가 배열되는지는 숨겨주는 요약의 경계 역할도 하는 것을 이해했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제의 바로 앞 절에서 나온 map 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">map</span></span> proc items)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> items)</span><br><span class="line">      nil</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> (<span class="name">proc</span> (<span class="name"><span class="built_in">car</span></span> items))</span><br><span class="line">            (<span class="name"><span class="built_in">map</span></span> proc (<span class="name"><span class="built_in">cdr</span></span> items)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>프로시저의 동작 원리를 이해했다면, 물음표를 채우는 것은 어렵지 않습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-list</span> items)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> items)</span><br><span class="line">      nil</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> (<span class="name">square</span> (<span class="name"><span class="built_in">car</span></span> items))</span><br><span class="line">            (<span class="name">square-list</span> (<span class="name"><span class="built_in">cdr</span></span> items)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-list</span> items)</span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> square items))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>문제에서 나온 아래의 테스트 코드를 두 프로시저로 실행해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">square-list</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-21.png" alt="두 프로시저 모두 (1 4 9 16)을 반환하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.22 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-22/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Louis Reasoner는 <a href="/sicp/chapter-2/exercise-2-21">연습문제 2.21</a>에서 만든 square-list 프로시저가 반복 프로세스를 펼쳐낼 수 있도록 고쳐 쓰려고 한다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-list</span> items)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> things answer)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> things)</span><br><span class="line">        answer</span><br><span class="line">        (<span class="name">iter</span> (<span class="name"><span class="built_in">cdr</span></span> things)</span><br><span class="line">              (<span class="name"><span class="built_in">cons</span></span> (<span class="name">square</span> (<span class="name"><span class="built_in">car</span></span> things))</span><br><span class="line">                    answer))))</span><br><span class="line">  (<span class="name">iter</span> items nil))</span><br></pre></td></tr></table></figure>
<p>한데, 위에 나온 대로 square-iter 프로시저를 정의해 보면, 원소 차례가 거꾸로 나온다. 왜 차례가 뒤집히는지 설명하라.<br />
Louis는 cons에서 두 인자의 순서를 맞바꾸는 방법으로 이 오류를 풀어보려고 하였다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-list</span> items)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> things answer)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> things)</span><br><span class="line">        answer</span><br><span class="line">        (<span class="name">iter</span> (<span class="name"><span class="built_in">cdr</span></span> things)</span><br><span class="line">              (<span class="name"><span class="built_in">cons</span></span> answer</span><br><span class="line">                    (<span class="name">square</span> (<span class="name"><span class="built_in">car</span></span> things))))))</span><br><span class="line">  (<span class="name">iter</span> items nil))</span><br></pre></td></tr></table></figure>
<p>허나, 이리 해보아도 제대로 된 결과가 나오지 않는다. 왜 그런가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>반복 프로시저로 리스트를 거꾸로 반환하는 방법을 알 수 있었습니다.<br />
리스트의 구조에 대해 다시 생각해 보는 기회였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="1-원소가-거꾸로-나오는-이유"><a class="markdownIt-Anchor" href="#1-원소가-거꾸로-나오는-이유"></a> 1. 원소가 거꾸로 나오는 이유</h3>
<p><a href="/sicp/chapter-2/exercise-2-21">연습문제 2.21</a>에서 만든 square-list에서는 iter의 반환형이 (cons element iter)의 형태였습다.<br />
즉, element를 리스트의 앞쪽에 두고 다음으로 연산한 결과들을 element의 뒤쪽에 iter로 붙이는 방식인 것입니다.</p>
<p>반면 이번 문제에서는 iter의 반환형이 (iter items-left answer)입니다.<br />
iter가 다음 순서의 iter에게 물려주는 answer는 지금까지 계산한 결과물인 이전의 answer의 앞쪽에 element를 붙인 리스트입니다.<br />
결국 element들은 answer의 앞쪽에 계속 붙게 되고, 순서가 뒤집어지는 것입니다.</p>
<h3 id="2-두-인자의-순서를-바꿔도-해결되지-않는-이유"><a class="markdownIt-Anchor" href="#2-두-인자의-순서를-바꿔도-해결되지-않는-이유"></a> 2. 두 인자의 순서를 바꿔도 해결되지 않는 이유</h3>
<p>책의 2.1.1절에서 설명한 리스트의 구조를 이해했다면, 왜 결과가 이상하게 나오는지 알 수 있습니다.<br />
리스트의 기본 구조는 다음과 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mtext> </mtext><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>a</mi><mi>n</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">_</mi><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">list = (list \ element \ (anoter\_list))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<br/>
<p>이것을 다른 말로 표현하면, 리스트의 모든 임의의 지점에서 항상 car는 원소 하나를 반환하고, cdr은 또다른 리스트를 반환한다는 말입니다. 리스트의 car에는 list가 아닌 element가 와야 프로시저가 정상적으로 동작합니다. 그러므로 리스트를 반환해야 하는 이전의 answer를 cons의 앞쪽 원소로 주게 되면 그 결과는 리스트로 표현되지 않습니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.23 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-23/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>for-each 프로시저는, map처럼 프로시저와 리스트를 하나씩 인자로 받지만, 결과 값으로 리스트를 내놓는 게 아니라, 리스트의 원소마다 (왼쪽에서 오른쪽으로) 프로시저를 적용한 결과만 내놓는다. 원소마다 프로시저를 적용했을 때 얻은 값은 아예 쓰지 않는다. 그러므로 리스트의 원소를 차례대로 화면에 찍는 등 똑같은 명령을 처리해야 하는 프로시저를 짜는 데 쓴다. 아래는 그 보기다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">for-each</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">newline</span></span>) (<span class="name"><span class="built_in">display</span></span> x))</span><br><span class="line">          (<span class="name"><span class="built_in">list</span></span> <span class="number">57</span> <span class="number">321</span> <span class="number">88</span>))</span><br><span class="line">&gt;&gt;&gt; <span class="number">57</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">321</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">88</span></span><br></pre></td></tr></table></figure>
<p>(위에 나타내진 않았지만) for-each 프로시저의 결과 값은 (참처럼) 뭐가 되어도 상관없다. 그러니, for-each 프로시저를 정의해 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>반환값이 없는 함수를 구현할 때 사용할 수 있는 여러가지 테크닉을 배울 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="http://community.schemewiki.org/?sicp-ex-2.23">스킴 커뮤니티</a>에 가보시면 정말 다양한 솔루션들이 있습니다. 좋아보이는 것 몇가지를 소개해 드리려고 합니다.</p>
<p>우선 제가 문제를 읽자마자 무지성으로 만들어본 코드입니다. if문의 else절에는 하나의 프로시저만 실행 가능하기 때문에, 새로운 프로시저 proc-and-next를 정의해서 proc를 실행하고 다음으로 실행할 리스트를 넘겨줬습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">for-each</span></span> proc items)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">proc-and-next</span> items)</span><br><span class="line">    (<span class="name">proc</span> (<span class="name"><span class="built_in">car</span></span> items))</span><br><span class="line">    (<span class="name"><span class="built_in">for-each</span></span> proc (<span class="name"><span class="built_in">cdr</span></span> items)))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> items)</span><br><span class="line">      <span class="literal">#t</span></span><br><span class="line">      (<span class="name">proc-and-next</span> items)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>다음으로 살펴볼 프로시저는 and를 이용한 프로시저입니다. and를 이용하면, 하나의 프로시저밖에 들어갈 수 없는 if문의 else절에 여러 프로시저를 넣을 수 있다는 것을 알았습니다. for-each는 애초에 반환값이 없기 때문에 이런 구현이 가능합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">for-each</span></span> proc items)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> items)</span><br><span class="line">      <span class="literal">#t</span></span><br><span class="line">      (<span class="name"><span class="built_in">and</span></span> (<span class="name">proc</span> (<span class="name"><span class="built_in">car</span></span> items))</span><br><span class="line">           (<span class="name"><span class="built_in">for-each</span></span> proc (<span class="name"><span class="built_in">cdr</span></span> items)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>다음으로 살펴볼 프로시저는 iter를 사용한 프로시저입니다. 특이한 점은 iter의 인자인 evaluate는 기존의 iter와는 달리 값을 전달하기 위한 목적이 아니라 프로시저를 실행하는 목적으로 쓰인다는 것입니다. 이 또한 반환값이 없기 때문에 구현할 수 있는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">for-each</span></span> proc items)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> items evaluate)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> items)</span><br><span class="line">        <span class="literal">#t</span></span><br><span class="line">        (<span class="name">iter</span> (<span class="name"><span class="built_in">cdr</span></span> items) (<span class="name">proc</span> (<span class="name"><span class="built_in">car</span></span> items)))))</span><br><span class="line">  (<span class="name">iter</span> items <span class="literal">#t</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>다음으로 살펴볼 프로시저는 <a href="/sicp/chapter-2/exercise-2-21">연습문제 2.21</a>에서 사용한 map 프로시저를 이용한 프로시저입니다. map과 for-each의 차이점은 단순히 반환값이 있냐 없냐이기 때문에 이런식으로 구현이 가능한 것입니다. 천재적입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">for-each</span></span> proc items) </span><br><span class="line">   (<span class="name"><span class="built_in">map</span></span> proc items)) </span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>여러 천재들의 정답을 보자 하니 제 코드가 초라해지는 하루였습니다. 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.24 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-24/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>식 (list 1 (list 2 (list 3 4)))를 계산한다고 할 때, 실행기가 계산한 값을 어떻게 찍어내는지, 그 값은 상자와 화살표 구조로 나타내면 어떠한지, 또 (그림 2.6처럼) 나무꼴로 그려 보면 어떠한지 나타내어라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>list와 cons의 차이를 확실히 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-실행기의-계산값"><a class="markdownIt-Anchor" href="#a-실행기의-계산값"></a> a. 실행기의 계산값</h3>
<p>문제의 요구대로 바로 한번 실행시켜 보겠습니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-24.png" alt="(1 (2 (3 4)))" /></p>
<p>식 (list 1 (list 2 (list 3 4)))는 (1 (2 (3 4)))로 출력됩니다.</p>
<h3 id="b-상자와-화살표-구조"><a class="markdownIt-Anchor" href="#b-상자와-화살표-구조"></a> b. 상자와 화살표 구조</h3>
<p>(1 2 3 4)와 (1 (2 (3 4)))를 상자와 화살표 구조로 나타내면 다음과 같습니다. 흔히 범하는 오류는 (1 (2 (3 4)))를 아래 그림의 첫번째 다이어그램으로 생각하는 것입니다. 괄호 “(”, &quot;)&quot;는 리스트를 나타내는 괄호이지 cons를 나타내는 괄호가 아닙니다. 이 괄호가 cons를 나타내는 괄호였다면, (1 (2 (3 4)))는 아래 그림의 첫번째 다이어그램과 같은 모습이었을 것입니다. 잘 이해가 안되신다면, 책의 2.2.1절의 그림 2.4를 보시면 이해가 쉬울 것입니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-24-1.png" alt="비슷하지만 다른 모양의 두 리스트" /></p>
<h3 id="c-나무꼴-그림"><a class="markdownIt-Anchor" href="#c-나무꼴-그림"></a> c. 나무꼴 그림</h3>
<p>위의 상자와 화살표 구조를 이해했다면 나무꼴 그림을 그리는 것은 쉬울 것입니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-24-2.png" alt="똥손이 그린 나무꼴" /></p>
<h3 id="d-앞절의-이해"><a class="markdownIt-Anchor" href="#d-앞절의-이해"></a> d. 앞절의 이해</h3>
<p>여기까지 이해하셨다면, 앞의 2.2.2절의 length 부분을 잘 이해할 수 있을 것입니다. 이해의 핵심은 (list a b)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">≠</mi></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span></span></span></span>(cons a b)라는 것입니다. 이 식을 옳게 고친다면, (list a b)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span></span></span>(cons a (cons b nil))입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> x (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">3</span> <span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">length</span></span> x)</span><br><span class="line">&gt;&gt;&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">length</span></span> (<span class="name"><span class="built_in">list</span></span> x x))</span><br><span class="line">&gt;&gt;&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>x의 원소는 [(list 1 2), 3, 4]로 총 3개의 원소를 가지므로 길이는 3입니다.</p>
<br/>
<p>(list x x)의 원소는 [x, x]로 총 2개의 원소를 가지므로 길이는 2입니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.25 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-25/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음 리스트에서 7을 끄집어 내려면 car과 cdr 연산을 어떻게 엮어 써야 하는지 밝혀라.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mtext> </mtext><mn>3</mn><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mtext> </mtext><mn>7</mn><mo stretchy="false">)</mo><mtext> </mtext><mn>9</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \ 3 \ (5 \ 7) \ 9)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace"> </span><span class="mord">3</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">5</span><span class="mspace"> </span><span class="mord">7</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">9</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mn>7</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">((7))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord">7</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mtext> </mtext><mo stretchy="false">(</mo><mn>2</mn><mtext> </mtext><mo stretchy="false">(</mo><mn>3</mn><mtext> </mtext><mo stretchy="false">(</mo><mn>4</mn><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mtext> </mtext><mo stretchy="false">(</mo><mn>6</mn><mtext> </mtext><mn>7</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \ (2 \ (3 \ (4 \ (5 \ (6 \ 7))))))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">2</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">3</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">4</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">5</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">6</span><span class="mspace"> </span><span class="mord">7</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>list와 cons의 관계에 대한 이해도가 상승했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제에서 주어진 리스트를 스킴으로 표현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> li-1 (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">3</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">5</span> <span class="number">7</span>) <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> li-2 (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">7</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> li-3 (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">4</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">5</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">6</span> <span class="number">7</span>)))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>한번에 쉽게 풀 수 있을 줄 알았는데, 생각보다 많이 틀렸습니다. 우선 정답은 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">cdr</span></span> li-1)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">car</span></span> li-2))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> li-3))))))))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>주로 헷갈렷던 포인트는 이렇습니다. 아래의 정리들만 잘 기억해도 헷갈리지 않을 것 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>d</mi><mi>r</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">≠</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">(cdr \ (a \ b)) \neq b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>d</mi><mi>r</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(cdr \ (a \ b))=(b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>a</mi><mi>r</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>c</mi><mi>d</mi><mi>r</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>a</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">(car \ (cdr \ (a \ b)))=b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.26 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-26/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>x와 y의 정의가 다음과 같다고 하자.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> x (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> y (<span class="name"><span class="built_in">list</span></span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>))</span><br></pre></td></tr></table></figure>
<p>다음 식의 값을 구했을 때 실행기에서는 그 값을 어떻게 찍어내는가?</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">append</span></span> x y)</span><br><span class="line">(<span class="name"><span class="built_in">cons</span></span> x y)</span><br><span class="line">(<span class="name"><span class="built_in">list</span></span> x y)</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>list cons append의 관계를 조금더 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><img data-src="/img/sicp/chapter-2/exercise-2-26.png" alt="세 프로시저의 결과물" /></p>
<p>예상한 그대로의 값을 출력했습니다.</p>
<p><br/><br/></p>
<p>append는 리스트와 리스트를 이어서 새로운 리스트를 만들어 주기 때문에 아래의 리스트를 반환합니다.<br />
(1 2 3 4 5 6)</p>
<p><br/><br/></p>
<p>cons는 두번째 인자로 리스트를 받았을 때, 받은 리스트의 첫번째 원소로 cons의 첫번째 인자를 넣은 리스트를 반환합니다.<br />
((1 2 3) 4 5 6)</p>
<p><br/><br/></p>
<p>list는 두 인자를 받아서 단순한 리스트로 만들 뿐이므로 아래와 같은 리스트를 반환합니다. (이 리스트의 length는 2입니다.)<br />
((1 2 3) (4 5 6))</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.27 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-27/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-2/exercise-2-18">연습문제 2.18</a>에서 만든 reverse 프로시저를 고쳐서, 리스트를 인자로 받는 deep-reverse 프로시저를 짜보라. deep-reverse 프로시저는 리스트의 원소 차례를 뒤집을 뿐 아니라, 모든 부분 리스트를 따라 내려가서 그 원소들의 차례도 다 뒤집는다. 두 프로시저를 만들어 돌려보면, 아래와 같은 결과가 나와야 한다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> x (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">3</span> <span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line">x</span><br><span class="line">&gt;&gt; ((<span class="name">1</span> <span class="number">2</span>) (<span class="name">3</span> <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">reverse</span></span> x)</span><br><span class="line">&gt;&gt; ((<span class="name">3</span> <span class="number">4</span>) (<span class="name">1</span> <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">deep-reverse</span> x)</span><br><span class="line">&gt;&gt; ((<span class="name">4</span> <span class="number">3</span>) (<span class="name">2</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>pair?를 사용해볼 수 있는 기회였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="/sicp/chapter-2/exercise-2-18">연습문제 2.18</a>의 reverse 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">reverse</span></span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">reverse-iter</span> x result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> x)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">reverse-iter</span> (<span class="name"><span class="built_in">cdr</span></span> x) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> x) result))))</span><br><span class="line">  (<span class="name">reverse-iter</span> x nil))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>기존의 프로시저에서 제가 손댄 곳은 if문의 안쪽밖에 없습니다. 그 방법은, null?을 검사한 후에 (pair? (car x))를 한번 더 검사하는 것입니다. 만약 이번에 검사하는 리스트의 원소가 또다른 리스트라면, reverse한 값을 넘겨주면 되는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deep-reverse</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">reverse-iter</span> x result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> x)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> (<span class="name"><span class="built_in">car</span></span> x))</span><br><span class="line">            (<span class="name">reverse-iter</span> (<span class="name"><span class="built_in">cdr</span></span> x) (<span class="name"><span class="built_in">cons</span></span> (<span class="name">deep-reverse</span> (<span class="name"><span class="built_in">car</span></span> x)) result))</span><br><span class="line">            (<span class="name">reverse-iter</span> (<span class="name"><span class="built_in">cdr</span></span> x) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> x) result)))))</span><br><span class="line">  (<span class="name">reverse-iter</span> x nil))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-27.png" alt="문제의 테스트 코드에 예상대로 동작하는 모습" /></p>
<p><br/><br/><br />
읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.28 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-28/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>(리스트로 나타낸) 나무를 인자로 받아서, 모든 나뭇잎을 왼쪽에서 오른쪽으로 늘어놓은 리스트를 결과로 내놓는 fringe 프로시저를 정의하라. fringe 프로시저를 만들어 돌려보았을 때 그 결과는 아래와 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> x (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">3</span> <span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">fringe</span> x)</span><br><span class="line">&gt;&gt;&gt; (<span class="name">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">fringe</span> (<span class="name"><span class="built_in">list</span></span> x x))</span><br><span class="line">&gt;&gt;&gt; (<span class="name">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>반복하는 프로시저를 만들 때에는 핵심 반복의 논리를 먼저 구현한 후에, 나머지 자투리 처리를 하는 것이 좋은 전략인 것 같습니다. 예를 들어 이 문제의 핵심 반복의 논리는 fringe끼리 append하는 것입니다.<br />
반성을 조금 하자면, 처음부터 계획을 세우고 코드를 짜는 것이 아닌 일단 짜놓고 &quot;어 안되네? 이렇게 해볼까?&quot;같은 식으로 코딩을 해왔던 것 같습니다. 이렇게 해서는 실력이 늘지 않을 것 같습니다. 다음부터는 실행 버튼을 누르기 전에 머리속으로 시뮬레이션을 돌려서 무지성 코딩을 최대한 막아야 겠습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>제가 구상한 fringe 프로시저의 원리는 다음과 같습니다.</p>
<ol>
<li>items를 받아서 만약 첫번째 원소가 pair라면, 첫번째 원소를 fringe하고 그 다음 리스트들을 fringe한 것과 append한다. <br/> (append (fringe (car items)) (fringe (cdr items)))</li>
<li>items를 받아서 만약 첫번째 원소가 pair가 아니라면, 그 다음 리스트들을 fringe한것의 앞에 끼워 넣는다. <br/> (cons (car items) (fringe (cdr items)))</li>
<li>받은 items가 nil이라면, nil을 반환한다. <br/> ((null? items) nil)</li>
</ol>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fringe</span> items)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> items) nil)</span><br><span class="line">        ((<span class="name"><span class="built_in">pair?</span></span> (<span class="name"><span class="built_in">car</span></span> items))</span><br><span class="line">         (<span class="name"><span class="built_in">append</span></span> (<span class="name">fringe</span> (<span class="name"><span class="built_in">car</span></span> items))</span><br><span class="line">                 (<span class="name">fringe</span> (<span class="name"><span class="built_in">cdr</span></span> items))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> items) (<span class="name">fringe</span> (<span class="name"><span class="built_in">cdr</span></span> items))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-28.png" alt="문제의 테스트 코드에 잘 동작하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.29 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-29/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>왼쪽과 오른쪽에 팔이 하나씩 달린 모빌<sup>binary mobile</sup>이 있다고 하자. 두 팔 모빌은 다음과 같이 가지<sup>막대기</sup> 두 개를 (여기서는, list를 써서) 합친 데이터로 나타낼 수 있다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-mobile</span> left right)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> left right))</span><br></pre></td></tr></table></figure>
<p>또, 가지는 length(반드시 수여야 한다.)와 structure로 짜맞출 수 있다. 여기서 structure는 (추의 무게를 나타내는) 수나 다른 모빌일 수 있다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-branch</span> length structure)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> length structure))</span><br></pre></td></tr></table></figure>
<p>a. 모빌에서 가지를 골라내는 left-branch와 right-brancgh를 만들어라. 또 가지의 구성 요소를 골라내는 branch-length와 branch-structure도 만들어라.</p>
<p>b. 앞에서 만든 고르개<sup>selector</sup>를 써서, 모빌의 전체 무게를 구하는 프로시저 total-weight를 정의해 보라.</p>
<p>c. 모빌이 균형잡힌<sup>balanced</sup>상태가 되려면 왼쪽 맨 윗가지의 돌림힘<sup>토크,torque</sup>과, 오른쪽 맨 윗가지의 돌림힘이 같아야 하고(다시말해, 왼쪽 막대 길이와 그 막대에 매달린 전체 추를 곱한 값이 오른쪽 막대에서 구한 값과 같아야 하고), 가지마다 매달린 모든 부분 모빌도 마찬가지로 균형 잡힌 상태여야 한다. 두 팔 모빌이 균형 잡혔는지 알아보는 술어 프로시저를 짜라.</p>
<p>d. 짜맞추개<sup>constructor</sup>를 다음처럼 다시 정의하여 모빌 표현을 바꿨다고 하자.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-mobile</span> left right)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> left right))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-branch</span> length structure)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> length structure))</span><br></pre></td></tr></table></figure>
<p>위와 같이 짜맞추개를 고쳤다면, 지금까지 짠 프로그램은 또 얼마나 손봐야 하는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>리스트나 쌍으로 구성된 데이터를 다루는 테크닉이 좀 더 좋아진 것 같습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제 풀이에 사용할 테스트 모빌 m1, m2는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;;          4  |  5 </span></span><br><span class="line"><span class="comment">;;        +----+-----+ </span></span><br><span class="line"><span class="comment">;;        6        3 |     9 </span></span><br><span class="line"><span class="comment">;;               +---+---------+ </span></span><br><span class="line"><span class="comment">;;               7             8 </span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> m1 (<span class="name">make-mobile</span> </span><br><span class="line">            (<span class="name">make-branch</span> <span class="number">4</span> <span class="number">6</span>) </span><br><span class="line">            (<span class="name">make-branch</span> <span class="number">5</span> </span><br><span class="line">                         (<span class="name">make-mobile</span> </span><br><span class="line">                          (<span class="name">make-branch</span> <span class="number">3</span> <span class="number">7</span>) </span><br><span class="line">                          (<span class="name">make-branch</span> <span class="number">9</span> <span class="number">8</span>)))))</span><br><span class="line"></span><br><span class="line"><span class="comment">;;          4  | 2 </span></span><br><span class="line"><span class="comment">;;        +----+--+ </span></span><br><span class="line"><span class="comment">;;        6    5  |    10 </span></span><br><span class="line"><span class="comment">;;          +-----+----------+ </span></span><br><span class="line"><span class="comment">;;          8                4 </span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> m2 (<span class="name">make-mobile</span> </span><br><span class="line">            (<span class="name">make-branch</span> <span class="number">4</span> <span class="number">6</span>) </span><br><span class="line">            (<span class="name">make-branch</span> <span class="number">2</span> </span><br><span class="line">                         (<span class="name">make-mobile</span> </span><br><span class="line">                          (<span class="name">make-branch</span> <span class="number">5</span> <span class="number">8</span>) </span><br><span class="line">                          (<span class="name">make-branch</span> <span class="number">10</span> <span class="number">4</span>)))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/polygon-mobile.jpg" alt="스몰굿띵스의 폴리곤 모빌" /></p>
<h3 id="a-고르개-만들기"><a class="markdownIt-Anchor" href="#a-고르개-만들기"></a> a. 고르개 만들기</h3>
<p>모빌과 가지의 구현이 cons가 아니라 list임에 주의해야 합니다. 두번째 원소를 꺼낼 때에는 car과 cdr을 둘 다 사용해 주어야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">left-branch</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">right-branch</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> x)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">branch-length</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">branch-structure</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> x)))</span><br></pre></td></tr></table></figure>
<h3 id="b-모빌의-무게를-구하는-프로시저"><a class="markdownIt-Anchor" href="#b-모빌의-무게를-구하는-프로시저"></a> b. 모빌의 무게를 구하는 프로시저</h3>
<p>모빌의 무게를 구하는 것은 모든 가지의 끝에 묶여있는 branch-structure의 무게를 더하는 것과 같습니다. 이점을 유의하여 프로시저를 만들어 보았습니다. 프로시저의 핵심 동작 원리는 다음과 같습니다. 모빌을 탐색하면서 가지의 끝에 도달할 때마다, 만약 새로운 모빌이 가지 끝에 매여 있다면, 양쪽의 무게를 더하는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">+</span></span> (<span class="name">mobile-weight</span> (<span class="name">branch-structure</span> (<span class="name">left-branch</span> x)))</span><br><span class="line">   (<span class="name">mobile-weight</span> (<span class="name">branch-structure</span> (<span class="name">right-branch</span> x))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>구현한 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">mobile-weight</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> x) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">+</span></span> (<span class="name">mobile-weight</span> (<span class="name">branch-structure</span> (<span class="name">left-branch</span> x)))</span><br><span class="line">                      (<span class="name">mobile-weight</span> (<span class="name">branch-structure</span> (<span class="name">right-branch</span> x)))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> x)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="c-모빌의-균형을-검사하는-프로시저"><a class="markdownIt-Anchor" href="#c-모빌의-균형을-검사하는-프로시저"></a> c. 모빌의 균형을 검사하는 프로시저</h3>
<p>모빌의 균형을 검사하는 프로시저의 핵심 동작 원리는 다음과 같습니다.</p>
<ol>
<li>모빌의 왼쪽 가지와 오른쪽 가지 사이의 균형을 검사한다. (토크의 크기가 같은지 확인한다.)</li>
<li>모빌의 왼쪽 가지 끝에 매인 모빌의 균형을 검사한다.</li>
<li>모빌의 오른쪽 가지 끝네 매인 모빌의 균형을 검사한다.</li>
</ol>
<p><br/><br/></p>
<p>위의 아이디어로 구현한 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">balanced?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">torque</span> ward mobile)</span><br><span class="line">    (<span class="name"><span class="built_in">*</span></span> (<span class="name">branch-length</span> (<span class="name">ward</span> x))</span><br><span class="line">       (<span class="name">mobile-weight</span> (<span class="name">branch-structure</span> (<span class="name">ward</span> x)))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> x) <span class="literal">#t</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name">torque</span> left-branch x)</span><br><span class="line">                           (<span class="name">torque</span> right-branch x))</span><br><span class="line">                        (<span class="name">balanced?</span> (<span class="name">branch-structure</span> (<span class="name">left-branch</span> x)))</span><br><span class="line">                        (<span class="name">balanced?</span> (<span class="name">branch-structure</span> (<span class="name">right-branch</span> x)))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> <span class="literal">#t</span>)))</span><br></pre></td></tr></table></figure>
<h3 id="d-새로운-짜맞추개"><a class="markdownIt-Anchor" href="#d-새로운-짜맞추개"></a> d. 새로운 짜맞추개</h3>
<p>기존의 list로 구현한 모빌과 가지를 cons로 바꾼 것 뿐입니다. 추상화 장벽 덕분에 데이터의 고르개<sup>selector</sup>만 수정해 준다면, left-branch나 branch-structure를 사용하는 프로시저에서는 신경쓸 것이 없습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">left-branch</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">right-branch</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">branch-length</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">branch-structure</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> x))</span><br></pre></td></tr></table></figure>
<h3 id="e-프로시저-검사"><a class="markdownIt-Anchor" href="#e-프로시저-검사"></a> e. 프로시저 검사</h3>
<p>지금까지 만든 프로시저들을 m1, m2에 적용해서 예상한 결과가 나오는지 확인해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">mobile-weight</span> m1)</span><br><span class="line">(<span class="name">mobile-weight</span> m2)</span><br><span class="line">(<span class="name">balanced?</span> m1)</span><br><span class="line">(<span class="name">balanced?</span> m2)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-29.png" alt="무게와 밸런스를 잘 구해내는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.3 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-3/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-2/exercise-2-2">연습문제 2.2</a>에서 만든 프로시저를 써서 평면에 네모꼴을 나타내는 데이터를 표현해 보자. 짜맞추개와 고르개를 써서 네모꼴의 둘레와 넓이를 구하는 프로시저를 정의하라. 이번에는 네모꼴의 표현 방법을 바꾸자. 표현 방법을 바꾸어도 둘레와 넓이 구하는 프로시저는 그대로 알맞은 요약의 경계를 갖춘 시스템을 설계할 수 있는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>본문의 글만 읽었을 때에는 짜맞추개와 고르개가 무엇인지 잘 몰랐습니다.<br />
이 문제를 풀면서 짜맞추개와 고르개의 개념을 확실히 알 수 있었습니다.<br />
또 cons를 다중으로 이용해서 짜맞추개의 요소들을 저장할 수 있다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<blockquote>
<p>문제의 번역에 문제가 있습니다.<br />
원문에는 네모꼴이 아니라 rectangle(직사각형)입니다.</p>
</blockquote>
<h3 id="1-문제-풀이에-필요한-기본-프로시저들"><a class="markdownIt-Anchor" href="#1-문제-풀이에-필요한-기본-프로시저들"></a> 1. 문제 풀이에 필요한 기본 프로시저들</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-point</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> x y))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">x-point</span> p)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> p))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">y-point</span> p)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> p))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-segment</span> p1 p2)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> p1 p2))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">start-segment</span> seg)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> seg))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">end-segment</span> seg)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> seg))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>점과 점 사이의 거리를 구하는 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">distance-between-points</span> p1 p2)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> x-diff (<span class="name"><span class="built_in">-</span></span> (<span class="name">x-point</span> p1) (<span class="name">x-point</span> p2)))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> y-diff (<span class="name"><span class="built_in">-</span></span> (<span class="name">y-point</span> p1) (<span class="name">y-point</span> p2)))</span><br><span class="line">  (<span class="name"><span class="built_in">sqrt</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">square</span> x-diff) (<span class="name">square</span> y-diff))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="2-첫번째-짜맞추개와-고르개"><a class="markdownIt-Anchor" href="#2-첫번째-짜맞추개와-고르개"></a> 2. 첫번째 짜맞추개와 고르개</h3>
<p>직사각형을 어떻게 표현해야 하는 지를 오래 고민했습니다.</p>
<p>처음에는 모서리의 점 두개를 기준으로 직사각형을 표현하는 것을 생각했지만,<br />
같은 모서리를 가진 직사각형은 무수히 많습니다.</p>
<p>그 다음으로는 점 네개를 기준으로 직사각형을 표현하는 것을 생각했지만,<br />
점 네개는 필요 이상으로 많은 인자입니다.</p>
<p>결국 인터넷에서 해답을 찾았습니다.<br />
가장 y좌표가 낮은 점인 기원점, 직사각형의 폭, 높이, 폭과 기원점이 이루는 기울기를 이용하면 깔끔하게 직사각형을 표현할 수 있습니다.<br />
이 아이디어를 가지고 만든 짜맞추개<sup>constructor</sup>는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">make-rect</span> origin angle width height)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-3-2.png" alt="첫번째 직사각형" /></p>
<p><br/><br/></p>
<p>첫번째 짜맞추개와 고르개를 표현하면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;constructor</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-rect</span> origin angle width height)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> origin angle) (<span class="name"><span class="built_in">cons</span></span> width height)))</span><br><span class="line"></span><br><span class="line"><span class="comment">;selector</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">origin-rect</span> rect) (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">car</span></span> rect)))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">angle-rect</span> rect) (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> rect)))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">width-rect</span> rect) (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> rect)))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">height-rect</span> rect) (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">cdr</span></span> rect)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 짜맞추개와 고르개를 이용해 둘레와 넓이를 구하는 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">perimeter-rect</span> rect)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">width-rect</span> rect) (<span class="name">height-rect</span> rect))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">area-rect</span> rect)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> (<span class="name">width-rect</span> rect) (<span class="name">height-rect</span> rect)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>시험을 위해 아래의 코드를 실행시켜 보겠습니다. 프로시저가 정상동작한다면, 둘레와 넓이를 12와 8로 계산해야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> origin1 (<span class="name">make-point</span> <span class="number">0</span> <span class="number">0</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> angle1 <span class="number">0</span>)</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> width1 <span class="number">4.0</span>)</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> height1 <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> rect1 (<span class="name">make-rect</span> origin1 angle1 width1 height1))</span><br><span class="line"></span><br><span class="line">(<span class="name">perimeter-rect</span> rect1)</span><br><span class="line">(<span class="name">area-rect</span> rect1)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-3-1.png" alt="둘레와 넓이를 알맞게 구해내는 모습" /></p>
<p><br/><br/></p>
<h3 id="3-두번째-짜맞추개와-고르개"><a class="markdownIt-Anchor" href="#3-두번째-짜맞추개와-고르개"></a> 3. 두번째 짜맞추개와 고르개</h3>
<p>이번에는 세개의 점을 인자로 받아서 직사각형을 표현해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">make-rect</span> p1 p2 p3)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-3-3.png" alt="두번째 직사각형" /></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;constructor</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-rect</span> p1 p2 p3)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> p1 p2) p3))</span><br><span class="line"></span><br><span class="line"><span class="comment">;selector</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">p1-rect</span> rect) (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">car</span></span> rect)))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">p2-rect</span> rect) (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">car</span></span> rect)))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">p3-rect</span> rect) (<span class="name"><span class="built_in">cdr</span></span> rect))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 짜맞추개와 고르개를 이용해 둘레와 넓이를 구하는 프로시저는 다음과 같습니다. 아래의 코드에서 주목할 점은, 실제로 둘레를 구하는 프로시저와 넓이를 구하는 프로시저는 하나도 바뀌지 않았다는 것입니다. 이는, 데이터를 사용하는 쪽과 구현하는 쪽 사이에 요약의 경계가 잘 형성되었다는 것을 의미합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">width-rect</span> rect)</span><br><span class="line">  (<span class="name">distance-between-points</span> (<span class="name">p1-rect</span> rect)</span><br><span class="line">                           (<span class="name">p2-rect</span> rect)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">height-rect</span> rect)</span><br><span class="line">  (<span class="name">distance-between-points</span> (<span class="name">p2-rect</span> rect)</span><br><span class="line">                           (<span class="name">p3-rect</span> rect)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">perimeter-rect</span> rect)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">width-rect</span> rect) (<span class="name">height-rect</span> rect))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">area-rect</span> rect)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> (<span class="name">width-rect</span> rect) (<span class="name">height-rect</span> rect)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>시험을 위해 아래의 코드를 실행시켜 보겠습니다. 프로시저가 정상동작한다면, 둘레와 넓이를 20과 25로 계산해야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> p1 (<span class="name">make-point</span> <span class="number">0</span> <span class="number">0</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> p2 (<span class="name">make-point</span> <span class="number">4</span> <span class="number">3</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> p3 (<span class="name">make-point</span> <span class="number">1</span> <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> rect2 (<span class="name">make-rect</span> p1 p2 p3))</span><br><span class="line"></span><br><span class="line">(<span class="name">perimeter-rect</span> rect2)</span><br><span class="line">(<span class="name">area-rect</span> rect2)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-3-4.png" alt="둘레와 넓이를 알맞게 구해내는 모습" /></p>
<h3 id="4-두-개의-방식을-비교"><a class="markdownIt-Anchor" href="#4-두-개의-방식을-비교"></a> 4. 두 개의 방식을 비교</h3>
<p>우의 두가지 방식에서 눈여겨볼 점이 있습니다. 두가지 방식의 구현에서 짜맞추개와 고르개를 서로 다르게 설계했지만, 둘레와 넓이를 구하는 프로시저의 코드는 결국 동일하다는 것입니다. 두 데이터 표현형은 서로 같은 코드의 perimeter와 area-rect를 공유할 수 있습니다.</p>
<p>perimeter와 area-rect 프로시저의 입장에서 바라보는 width-rect와 height-rect 프로시저는, 내부가 어떻게 구현되어 있는지는 몰라도 동일한 결과를 가져다 주는 프로시저입니다. 이 프로시저들의 사이에 책에서 설명한 <strong>요약의 경계</strong>가 있는 것입니다.</p>
<p>본문의 글만 읽었을 때에는 짜맞추개와 고르개가 무엇인지 잘 몰랐습니다. 이 문제를 풀면서 짜맞추개와 고르개의 개념을 확실히 알 수 있었습니다. 또 cons를 다중으로 이용해서 짜맞추개의 요소들을 저장할 수 있다는 것을 알았습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.30 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-30/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-2/exercise-2-21">연습문제 2.21</a>의 square-list 프로시저 처럼 square-tree 프로시저를 정의해 보자. 다시 말해, square-tree 프로시저는 다음과 같이 돌아가야 한다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">square-tree</span></span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span></span><br><span class="line">        (<span class="name"><span class="built_in">list</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">3</span> <span class="number">4</span>) <span class="number">5</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">list</span></span> <span class="number">6</span> <span class="number">7</span>)))</span><br><span class="line">&gt;&gt;&gt; (<span class="name">1</span> (<span class="name">4</span> (<span class="name">9</span> <span class="number">16</span>) <span class="number">25</span>) (<span class="name">36</span> <span class="number">49</span>))</span><br></pre></td></tr></table></figure>
<p>square-tree 프로시저를 (차수 높은 프로시저를 쓰지 않고) 곧바로 정의해 보기도 하고, 또 map과 재귀를 써서 정의해 보아라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>map을 이용한 구현과 그렇지 않은 구현의 미묘한 차이를 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="1-곧바로-정의한-프로시저"><a class="markdownIt-Anchor" href="#1-곧바로-정의한-프로시저"></a> 1. 곧바로 정의한 프로시저</h3>
<p>프로시저의 핵심 동작 원리는 x라는 트리를 인자로 받았을때, (square-tree (car x))와 (square-tree (cdr x))의 쌍을 반환하는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-tree</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> x) nil)</span><br><span class="line">        ((<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">cons</span></span> (<span class="name">square-tree</span> (<span class="name"><span class="built_in">car</span></span> x))</span><br><span class="line">                         (<span class="name">square-tree</span> (<span class="name"><span class="built_in">cdr</span></span> x))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">square</span> x))))</span><br></pre></td></tr></table></figure>
<h3 id="2-map과-재귀를-이용한-프로시저"><a class="markdownIt-Anchor" href="#2-map과-재귀를-이용한-프로시저"></a> 2. map과 재귀를 이용한 프로시저</h3>
<p>map을 사용하면 null?을 사용하지 않고 프로시저를 짤 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-tree</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">square-if-number</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> x)</span><br><span class="line">        (<span class="name"><span class="built_in">map</span></span> square-if-number x)</span><br><span class="line">        (<span class="name">square</span> x)))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> square-if-number x))</span><br></pre></td></tr></table></figure>
<h3 id="3-테스트-케이스-동작-확인"><a class="markdownIt-Anchor" href="#3-테스트-케이스-동작-확인"></a> 3. 테스트 케이스 동작 확인</h3>
<p><img data-src="/img/sicp/chapter-2/exercise-2-30.png" alt="두 테스트 케이스에서 모두 잘 동작하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.32 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-32/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>같은 원소가 되풀이되지 않는 리스트로 집합을 나타낼 수 있다. 또한, 한 집합의 모든 부분 집합의 집합은 리스트의 리스트로 나타낼 수 있다. 리스트 (1 2 3)을 집합으로 보면, 모든 부분집합의 집합은 (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))이 된다. 한 집합의 모든 부분 집합의 집합을 구하는 프로시저를 아래와 같이 정의할 수 있다. 빈 곳을 채워 이 프로시저를 완성하고, 이 프로시저가 어떻게 돌아가는지 설명하라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">subsets</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> s)</span><br><span class="line">      (<span class="name"><span class="built_in">list</span></span> nil)</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">rest</span> (<span class="name">subsets</span> (<span class="name"><span class="built_in">cdr</span></span> s))))</span><br><span class="line">        (<span class="name"><span class="built_in">append</span></span> rest (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; rest)))))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>부분집합을 만드는 수학적 원리를 프로시저로 구현하면서 리스트 처리의 이해도를 높일 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>(list 1 2 3)의 부분집합을 만드는 원리를 설명해 보겠습니다.</p>
<ol>
<li>가장 첫번째 원소를 고릅니다.</li>
<li>나머지 원소들로 이루어진 리스트의 부분집합을 구했다고 가정해 봅시다.</li>
<li>전체 부분집합은, 나머지 원소들의 부분집합에 선택한 첫번째 원소를 포함한 집합과 포함하지 않은 집합의 합으로 구할 수 있습니다.</li>
</ol>
<p>(1 2 3)을 예로들자면, 집합 (2 3)의 모든 부분집합에 1을 포함시킨 집합과 그냥 (2 3)의 모든 부분집합을 더하면 전체 부분집합을 알 수 있다는 것입니다. 이는 1을 포함한 부분집합과 1을 포함하지 않은 부분집합을 더한다는 의미로도 해석할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">subsets</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> s)</span><br><span class="line">      (<span class="name"><span class="built_in">list</span></span> nil)</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">rest</span> (<span class="name">subsets</span> (<span class="name"><span class="built_in">cdr</span></span> s))))</span><br><span class="line">        (<span class="name"><span class="built_in">append</span></span> rest (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> s) x)) rest)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-32.png" alt="문제의 리스트 (1 2 3)의 모든 부분집합" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.31 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-31/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-2/exercise-2-30">연습문제 2.30</a>에서 만든 square-tree 프로시저를 요약하여<sup>간추려서</sup> 다음과 같이 정의할 수 있도록 차수 높은 프로시저 tree-map을 정의하여라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-tree</span> tree) (<span class="name">tree-map</span> square tree))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>특정 프로시저를 약간 수정해서 차수 높은 프로시저를 만드는 경험을 할 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="/sicp/chapter-2/exercise-2-30">연습문제 2.30</a>에서 만든 map을 이용한 square-tree 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-tree</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">square-if-number</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> x)</span><br><span class="line">        (<span class="name"><span class="built_in">map</span></span> square-if-number x)</span><br><span class="line">        (<span class="name">square</span> x)))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> square-if-number x))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 프로시저를 변형해서 일반적인 상황에서 쓸 수 있는 차수 높은 프로시저를 만들면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-map</span> proc tree)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">proc-if-not-tree</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> x)</span><br><span class="line">        (<span class="name"><span class="built_in">map</span></span> proc-if-not-tree x)</span><br><span class="line">        (<span class="name">proc</span> x)))</span><br><span class="line">  (<span class="name">proc-if-not-tree</span> tree))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-31.png" alt="테스트 케이스가 잘 동작하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.33 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-33/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>아래는 accumulate를 이용해서 리스트 기본 연산을 몇 개 정의하려는 것이다. 그 중 빈 곳을 채워 보아라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">map</span></span> p sequence)</span><br><span class="line">  (<span class="name">accumulate</span> (<span class="name"><span class="built_in">lambda</span></span> (x y) &lt;??&gt;) nil sequence))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">append</span></span> seq1 seq2)</span><br><span class="line">  (<span class="name">accumulate</span> cons &lt;??&gt; &lt;??&gt;))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">length</span></span> sequence)</span><br><span class="line">  (<span class="name">accumulate</span> &lt;??&gt; <span class="number">0</span> sequence))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>차례열 연산의 핵심 부품인 accumulate 프로시저의 이해도를 높일 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이 문제를 풀기 위해서는 accumulate 프로시저를 제대로 이해하고 가야 합니다. 눈으로 읽고 이해했다고 완전히 이해한 것이 아닙니다. 책을 보지 않고 직접 손으로 코딩해 보면서 어떤 원리인지를 다시 한번 알고 가셨으면 좋겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> op initial sequence)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> sequence)</span><br><span class="line">      initial</span><br><span class="line">      (<span class="name">op</span> (<span class="name"><span class="built_in">car</span></span> sequence)</span><br><span class="line">          (<span class="name">accumulate</span> op initial (<span class="name"><span class="built_in">cdr</span></span> sequence)))))</span><br></pre></td></tr></table></figure>
<h3 id="a-map"><a class="markdownIt-Anchor" href="#a-map"></a> a. map</h3>
<p>accumulate의 op 인자에는 인자를 두개 받는 프로시저를 넘겨야 합니다. map은 당장 처리해야 하는 원소 하나에 p를 적용시켜 cons로 묶어주는 프로시저이므로 (cons (p x) y)를 람다식으로 넣으면 됩니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">map</span></span> p sequence)</span><br><span class="line">  (<span class="name">accumulate</span> (<span class="name"><span class="built_in">lambda</span></span> (x y) (<span class="name"><span class="built_in">cons</span></span> (<span class="name">p</span> x) y))</span><br><span class="line">              nil</span><br><span class="line">              sequence))</span><br></pre></td></tr></table></figure>
<h3 id="b-append"><a class="markdownIt-Anchor" href="#b-append"></a> b. append</h3>
<p>accumulate의 initial은 한글로 초기값이라는 뜻을 담고 있지만, 리스트의 막바지에 달했을 때 마지막 자리에 넣을 인자입니다. 그러므로 append의 순서를 맞추기 위해서는, seq2를 initial에 넣고, seq1을 sequence에 넣어야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">append</span></span> seq1 seq2)</span><br><span class="line">  (<span class="name">accumulate</span> cons seq2 seq1))</span><br></pre></td></tr></table></figure>
<h3 id="c-length"><a class="markdownIt-Anchor" href="#c-length"></a> c. length</h3>
<p>op 인자에 들어갈 람다식의 첫번째 원소가 무엇이든 간에 최종결과에 1을 더해주는 프로시저를 정의해야 합니다. 여기서 주목할 점은, (lambda (x y) (+ 1 y))라는 표현입니다. y 인자는 시퀸스의 나머지 부분에 op를 적용한 식이 자리잡게 됩니다. 표현이 어색해 보일 수 있으므로 찬찬히 생각해 보시기 바랍니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">length</span></span> sequence)</span><br><span class="line">  (<span class="name">accumulate</span> (<span class="name"><span class="built_in">lambda</span></span> (x y) (<span class="name"><span class="built_in">+</span></span> <span class="number">1</span> y)) <span class="number">0</span> sequence))</span><br></pre></td></tr></table></figure>
<h3 id="d-테스트-코드"><a class="markdownIt-Anchor" href="#d-테스트-코드"></a> d. 테스트 코드</h3>
<p><img data-src="/img/sicp/chapter-2/exercise-2-33.png" alt="임의의 리스트 1,2에서 예상대로 동작하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.34 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-34/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>아래와 같이 정의된 x의 다항식 값 계산 과정을 accumulate로 나타내 보자.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_nx^n+a_{n-1}x^{n-1}+⋯+a_1x +a_0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8643919999999999em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.072439em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>위 다항식은 호너의 규칙<sup>Honer’s rule</sup>이라는 알고리즘을 서서 다음 방식으로 계산할 수 있다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>⋯</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>n</mi></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">(⋯(a_nx+a_{n-1})x+⋯+a_1)x +a_0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>다시 말하면, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>에 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>를 곱한 다음 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>을 더하고, 그 값에 다시 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>를 곱하는 방식으로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>에 이를 때까지 계산을 이어간다. 아래에서 빈 곳을 매워, 호너의 규칙에 따라 다항식을 구하는 프로시저의 정의를 마무리하라. 이때, 다항식의 계수들은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>에서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>까지 차례열 속에 들어 있다고 하자.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">honer-eval</span> x coefficient-sequence)</span><br><span class="line">  (<span class="name">accumulate</span> (<span class="name"><span class="built_in">lambda</span></span> (this-coeff higher-terms) &lt;??&gt;)</span><br><span class="line">              <span class="number">0</span></span><br><span class="line">              coefficient-sequence))</span><br></pre></td></tr></table></figure>
<p>보기를 들어, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">x=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>일 때 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>5</mn><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1+3x+5x^3+x^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>의 값을 계산하는 식은 다음과 같다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">honer-eval</span> <span class="number">2</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>차례열 연산의 핵심 부품인 accumulate 프로시저의 이해도를 높일 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제 풀이에 사용할 accumulate 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> op initial sequence)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> sequence)</span><br><span class="line">      initial</span><br><span class="line">      (<span class="name">op</span> (<span class="name"><span class="built_in">car</span></span> sequence)</span><br><span class="line">          (<span class="name">accumulate</span> op initial (<span class="name"><span class="built_in">cdr</span></span> sequence)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>문제의 (honer-eval x coefficient-sequence) 프로시저를 다시 해석해 보면, coefficient-sequence에 들어가는 리스트의 원소들은 차례로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">x^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>의 계수, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">x^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>의 계수,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>의 계수,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">⋯</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span>를 의미하는 것입니다. 이제 아래의 식을 람다식으로 표현하는 일만 남았습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>⋯</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>n</mi></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">(⋯(a_nx+a_{n-1})x+⋯+a_1)x +a_0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p><br/><br/><br />
(현재의 단계의 계수) + x*(다음으로 처리할 계수들)을 반복하는 것으로 구현할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">honer-eval</span> x coefficient-sequence)</span><br><span class="line">  (<span class="name">accumulate</span> (<span class="name"><span class="built_in">lambda</span></span> (this-coeff higher-terms)</span><br><span class="line">                (<span class="name"><span class="built_in">+</span></span> this-coeff</span><br><span class="line">                   (<span class="name"><span class="built_in">*</span></span> x higher-terms)))</span><br><span class="line">              <span class="number">0</span></span><br><span class="line">              coefficient-sequence))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>5</mn><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>5</mn></msup><mtext>  </mtext><mo separator="true">,</mo><mi>x</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">1+3x+5x^3+x^5 \ \ ,x=2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>1</mn><mo>+</mo><mn>6</mn><mo>+</mo><mn>40</mn><mo>+</mo><mn>32</mn><mo>=</mo><mn>79</mn></mrow><annotation encoding="application/x-tex">= 1+6+40+32=79
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">9</span></span></span></span></span></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-34.png" alt="책의 테스트코드를 실행했을때 나오는 결과 79" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.35 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-35/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>accumulate를 써서 2.2.2절에 나온 count-leaves 프로시저를 다시 정의해 보아라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">count-leaves</span> t)</span><br><span class="line">  (<span class="name">accumulate</span> &lt;??&gt; &lt;??&gt; (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; &lt;??&gt;)))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>map에 들어가는 프로시저를 구성할 때, 더 상위 프로시저를 재귀로 써보는 연습을 할 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제를 읽고 생각한 저의 풀이 전략은 이렇습니다. “accumulate의 map 인자 자리에 각 가지들에 달린 이파리의 개수를 포함한 리스트를 넘기고, accumulate로 그 리스트의 원소들의 합을 반환하면 되겠구나?” 그렇다면 코드는 아래와 같이 정리할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">count-leaves</span> t)</span><br><span class="line">  (<span class="name">accumulate</span> + <span class="number">0</span> (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; &lt;??&gt;)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>남은 것은 트리를 인자로 받아서 이파리의 개수를 반환하는 프로시저입니다. 저는 우선 프로시저의 외부에 또 프로시저를 만들어서 구현했습니다. 트리를 서치하면서 만약 새로운 트리라면 다시 count-leaves를 적용하고, 숫자 즉 이파리라면 갯수인 1을 반환하는 프로시저 입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-to-number-of-leaves</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> x)</span><br><span class="line">      (<span class="name">count-leaves</span> x)</span><br><span class="line">      <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>그리고 람다식으로 바꾸어 count-leaves에 이식했습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">count-leaves</span> t)</span><br><span class="line">  (<span class="name">accumulate</span> +</span><br><span class="line">              <span class="number">0</span></span><br><span class="line">              (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x)</span><br><span class="line">                     (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> x)</span><br><span class="line">                         (<span class="name">count-leaves</span> x)</span><br><span class="line">                         <span class="number">1</span>))</span><br><span class="line">                   t)))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br />
아래의 테스트 코드로 프로시저를 검사해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;              |   </span></span><br><span class="line"><span class="comment">;        +-----+-----+ </span></span><br><span class="line"><span class="comment">;        |           |     </span></span><br><span class="line"><span class="comment">;    +---+---+   +---+---+ </span></span><br><span class="line"><span class="comment">;    1       2   3       |  </span></span><br><span class="line"><span class="comment">;                    +---+---+ </span></span><br><span class="line"><span class="comment">;                    4       5</span></span><br><span class="line"></span><br><span class="line">(<span class="name">count-leaves</span> (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">4</span> <span class="number">5</span>))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-35.png" alt="이파리의 개수를 5개로 잘 구해내는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.36 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-36/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>accumulate-n 프로시저는 accumulate와 비슷하지만 '차례열들의 차례열’을 세 번째 인자로 받는다는 게 다르다. 이때, 모든 차례열의 원소 수는 같다고 친다. 이 프로시저는 인자로 받은 어큐뮬레이션 프로시저를 가지고 모든 차례열의 첫 번째 원소를 한데 엮고, 이어서 두 번째 원소를 모두 엮는 방식으로 차례열들의 모든 원소를 묶어서 그 결과로 차례열 하나를 내놓는다. 예컨데, s가 차례열 네 개로 이루어진 차례열 ((1 2 3) (4 5 6) (7 8 9) (10 11 12))라고 할 때, (accumulate-n + 0 s)를 계산한 값은 (22 26 30)이라는 차례열이 된다. 아래 빈 곳을 채워 accumulate-n 프로시저의 정의를 마무리하라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate-n</span> op init seqs)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">car</span></span> seqs))</span><br><span class="line">      nil</span><br><span class="line">    (<span class="name"><span class="built_in">cons</span></span> (<span class="name">accumulate</span> op init &lt;??&gt;)</span><br><span class="line">          (<span class="name">accumulate-n</span> op init &lt;??&gt;))))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>맵을 사용해서 차례열을 처리하는 스킬이 조금 더 늘었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>accumulate-n 프로시저의 cons는 두 부분으로 나뉘어 있습니다. accumulate-n의 목적을 생각해 본다면, cons의 첫번째 원소인 (accumulate op init <??>)는 모든 시퀸스의 첫번째 원소의 합을 반환해야 합니다. 이 목적을 위해 프로시저를 람다식으로 구현하면 아래와 같습니다. (op와 init의 자리에는 +와 0이 온다는 것을 기억해 주시기 바랍니다.)</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">accumulate</span> op init (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">car</span></span> x)) seqs))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>그리고 cons의 두번째 원소인 (accumulate-n op init <??>)의 물음표에는 첫번째 인자들을 제외한 차례열들이 와야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">accumulate-n</span> op init (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">cdr</span></span> x)) seqs))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>완성된 accumulate-n과 문제의 테스트 코드는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate-n</span> op init seqs)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">car</span></span> seqs))</span><br><span class="line">      nil</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> (<span class="name">accumulate</span> op init (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">car</span></span> x)) seqs))</span><br><span class="line">      (<span class="name">accumulate-n</span> op init (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">cdr</span></span> x)) seqs)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> s (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">accumulate-n</span> + <span class="number">0</span> s)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-36.png" alt="문제의 요구를 잘 수행하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.37 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-37/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>벡터 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v=(v_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>는 수열<sup>sequence of numbers</sup>로 나타내고, 행렬 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>m</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m=(m_{ij})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>은 다시 벡터 (행렬의 행)들의 차례열로 나타내기로 하자. 이를테면, 아래 행렬은 차례열 ((1 2 3 4) (4 5 6 6) (6 7 8 9))로 나타낸다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex"> \begin{bmatrix}
    1&amp;2&amp;3&amp;4\\
    4&amp;5&amp;6&amp;6\\
	6&amp;7&amp;8&amp;9
\end{bmatrix}    </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>이런 표현 방식을 바탕으로 하면, 다음과 같은 (행렬 대수 책에 흔히 나오는) 행렬과 벡터 연산들을 차례열 연산으로 간결하게 나타낼 수 있다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>d</mi><mi>o</mi><mi>t</mi><mo>−</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>t</mi><mtext>  </mtext><mi>v</mi><mtext>  </mtext><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(dot-product \ \ v \ \ w)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">Σ</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Σ_iv_iw_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<br/>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>m</mi><mi>a</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>x</mi><mo>−</mo><mo>∗</mo><mo>−</mo><mi>v</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>m</mi><mtext>  </mtext><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(matrix-*-vector \ \ m \ \ v)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>h</mi><mi>e</mi><mi>n</mi><mtext>  </mtext><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><msub><mi mathvariant="normal">Σ</mi><mi>j</mi></msub><msub><mi>m</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mi>v</mi><mi>j</mi></msub><mo separator="true">,</mo><mtext>  </mtext><mi>v</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">when \ \ t_i=Σ_jm_{ij}v_j, \ \ vector \ \ t
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">t</span></span></span></span></span></p>
<br/>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>m</mi><mi>a</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>x</mi><mo>−</mo><mo>∗</mo><mo>−</mo><mi>m</mi><mi>a</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>x</mi><mtext>  </mtext><mi>m</mi><mtext>  </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(matrix-*-matrix \ \ m \ \ n)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>h</mi><mi>e</mi><mi>n</mi><mtext>  </mtext><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msub><mi mathvariant="normal">Σ</mi><mi>k</mi></msub><msub><mi>m</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msub><mi>n</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub><mo separator="true">,</mo><mtext>  </mtext><mi>m</mi><mi>a</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>x</mi><mtext>  </mtext><mi>P</mi></mrow><annotation encoding="application/x-tex">when \ \ P_{ij}=Σ_km_{ik}n_{kj}, \ \ matrix \ \ P
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span></span></p>
<br/>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi>e</mi><mtext>  </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(transepose \ \ m)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>m</mi><mrow><mi>j</mi><mi>i</mi></mrow></msub><mtext>  </mtext><mi>m</mi><mi>a</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>x</mi><mtext>  </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">n_{ij}=m_{ji} \ \ matrix \ \ n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9456279999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">n</span></span></span></span></span></p>
<br/>
<p>행렬을 내적<sup>dot product</sup>하는 연산은 다음처럼 정의할 수 있다.<br />
<span style="color:#999">여기서 사용하는 map은 스킴에 내장된 기본 프로시저입니다. 기존까지 사용하던 map과는 다르게 같은 길이의 리스트를 여러개 인자로 받을 수 있습니다. 자세한 설명은 한글번역 책의 136p 하단의 각주 12)에 있습니다.</span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">dot-product</span> v w)</span><br><span class="line">  (<span class="name">accumulate</span> + <span class="number">0</span> (<span class="name"><span class="built_in">map</span></span> * v w)))</span><br></pre></td></tr></table></figure>
<p>아래 식에서 빈 곳을 채워 행렬 연산 프로시저의 정의를 모두 마무리하라.<br />
(accumulate-n은 <a href="/sicp/chapter-2/exercise-2-36">연습문제 2.36</a>에서 정의했다.)</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">matrix-*-vector</span> m v)</span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; m))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">transpose</span> mat)</span><br><span class="line">  (<span class="name">accumulate-n</span> &lt;??&gt; &lt;??&gt; mat))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">matrix-*-matrix</span> m n)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">cols</span> (<span class="name">transpose</span> n)))</span><br><span class="line">    (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; m)))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>익숙하지 않은 행렬 연산과 익숙하지 않은 차례열 처리로 뇌가 말랑말랑해지는 시간이었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>저는 고등교육과정에서 행렬이 빠진 세대입니다. 그래서 그런지 행렬연산 문제가 나올 때마다 구글링으로 행렬곱을 찾아봐야 합니다.<br />
<img data-src="/img/etc/matrix.gif" alt="행렬곱의 이해를 도와주는 gif 출처 imgur" /></p>
<h3 id="a-matrix와-vector의-내적"><a class="markdownIt-Anchor" href="#a-matrix와-vector의-내적"></a> a. matrix와 vector의 내적</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">matrix-*-vector</span> m v)</span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; m))</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<p>map은 행렬의 열을 하나씩 처리할 수 있도록 도와줍니다. 즉 물음표 안에는 각 열을 벡터와 내적해주는 프로시저가 들어가야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">matrix-*-vector</span> m v)</span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">dot-product</span> x v)) m))</span><br></pre></td></tr></table></figure>
<h3 id="b-matrix의-전치행렬"><a class="markdownIt-Anchor" href="#b-matrix의-전치행렬"></a> b. matrix의 전치행렬</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">transpose</span> mat)</span><br><span class="line">  (<span class="name">accumulate-n</span> &lt;??&gt; &lt;??&gt; mat))</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<p>전치 행렬은 accmumulate-n을 이용하면 어렵게 생각하지 않아도 구할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">transpose</span> mat)</span><br><span class="line">  (<span class="name">accumulate-n</span> cons nil mat))</span><br></pre></td></tr></table></figure>
<h3 id="c-matrix와-matrix의-행렬곱"><a class="markdownIt-Anchor" href="#c-matrix와-matrix의-행렬곱"></a> c. matrix와 matrix의 행렬곱</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">matrix-*-matrix</span> m n)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">cols</span> (<span class="name">transpose</span> n)))</span><br><span class="line">    (<span class="name"><span class="built_in">map</span></span> &lt;??&gt; m)))</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<p>행렬의 곱에 익숙하지 않은 저는, 구현하기도 어려웠고 설명하기도 어려웠습니다. 제 논리의 흐름을 보여드리겠습니다.<br />
<img data-src="/img/etc/matrix-mult.png" alt="이해를 돕기 위한 행렬 곱 예시" /></p>
<ol>
<li>(map &lt;??&gt; m)에서 물음표 프로시저가 하는 일은, m의 row마다 cols를 이용한 어떤 처리를 해주는 일이다.</li>
<li>그 처리는 cols의 row들 하나하나와 m으로부터 받은 row를 내적한 값을 cols의 길이만큼의 벡터로 반환하는 것이다. 이것은 행렬과 벡터의 곱이다.</li>
</ol>
<p>위의 아이디어를 코드로 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">matrix-*-matrix</span> m n)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">cols</span> (<span class="name">transpose</span> n)))</span><br><span class="line">    (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (row-from-m)</span><br><span class="line">           (<span class="name">matrix-*-vector</span> cols row-from-m))</span><br><span class="line">         m)))</span><br></pre></td></tr></table></figure>
<h3 id="d-테스트-코드로-확인"><a class="markdownIt-Anchor" href="#d-테스트-코드로-확인"></a> d. 테스트 코드로 확인</h3>
<p>matrix-*-matrix 프로시저에는 이 문제에서 만든 모든 프로시저가 들어가 있으므로 아래의 식이 제대로 동작하면 모든 프로시저가 정상적으로 동작하는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> m1 (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> m2 (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="number">10</span> <span class="number">11</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">20</span> <span class="number">21</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">30</span> <span class="number">31</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">matrix-*-matrix</span> m1 m2)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-37.png" alt="위의 예시로 든 그림의 행렬곱을 잘 수행해내는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.39 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-39/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-2/exercise-2-38">연습문제 2.38</a>에 나온 fold-right와 fold-left로 (<a href="/sicp/chapter-2/exercise-2-18">연습문제 2.18</a>에 나오는) reverse 프로시저의 정의를 마무리하라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">reverse</span></span> sequence)</span><br><span class="line">  (<span class="name">fold-right</span> (<span class="name"><span class="built_in">lambda</span></span> (x y) &lt;??&gt;) nil sequence))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">reverse</span></span> sequence)</span><br><span class="line">  (<span class="name">fold-left</span> (<span class="name"><span class="built_in">lambda</span></span> (x y) &lt;??&gt;) nil sequence))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>fold-right와 left의 개념과 사용법을 조금 더 확장할 수 있었습니다.<br />
right의 논리적인 실행순서는 가장 마지막 원소부터입니다.<br />
left의 논리적인 실행 순서는 가장 처음의 원소부터입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>fold-right와 fold-left를 수식으로 나타내면 다음과 같습니다.<br />
각 괄호 묶음은 op연산을 나타냅니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>2</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>3</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>4</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>5</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>6</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>7</mn><mtext>  </mtext><mo>⋯</mo><mtext>  </mtext><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>a</mi><mi>l</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">right = (1 \ \ (2 \ \ (3 \ \ (4 \ \ (5 \ \ (6 \ \ (7 \ \ ⋯ \ \ initial)))))))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">2</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">3</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">4</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">5</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">6</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">7</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>a</mi><mi>l</mi><mtext>  </mtext><mn>1</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>2</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>3</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>4</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>5</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>6</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>7</mn><mo stretchy="false">)</mo><mtext>  </mtext><mo>⋯</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">left = ((((((((initial \ \ 1)\ \  2)\ \  3)\ \  4)\ \  5)\ \  6)\ \  7)\ \  ⋯)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">1</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">2</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">3</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">4</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">5</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">6</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="minner">⋯</span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<h3 id="a-fold-right"><a class="markdownIt-Anchor" href="#a-fold-right"></a> a. fold-right</h3>
<p>fold-right에서 람다식의 x는 지금 처리할 원소를 나타내고 y는 x와 묶을 나머지 차례열을 의미합니다. reverse는 원소들을 차례대로 뒤로 엮는 프로시저이므로 정답은 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">reverse-1</span> sequence)</span><br><span class="line">  (<span class="name">fold-right</span> (<span class="name"><span class="built_in">lambda</span></span> (x y) (<span class="name"><span class="built_in">append</span></span> y (<span class="name"><span class="built_in">list</span></span> x))) nil sequence))</span><br></pre></td></tr></table></figure>
<h3 id="b-fold-left"><a class="markdownIt-Anchor" href="#b-fold-left"></a> b. fold-left</h3>
<p>fold-left의 람다식은 right와 의미가 조금 다릅니다. x는 지금까지 처리한 원소들의 차례열을 나타내고 y는 새로운 원소를 나타냅니다. 그러므로 list의 데이터 형식에 맞추기 위해서는 아래와 같이 정의해야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">reverse-2</span> sequence)</span><br><span class="line">  (<span class="name">fold-left</span> (<span class="name"><span class="built_in">lambda</span></span> (x y) (<span class="name"><span class="built_in">cons</span></span> y x)) nil sequence))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-39.png" alt="두 리버스 모두 잘 동작하는 모습" /></p>
<p><br/><br/></p>
<p>append 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>의 프로시저이고, cons는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>의 프로시저입니다. reverse를 구현할 때는 append를 사용하는 fold-right보다 cons를 사용하는 fold-left가 효율적이라는 것도 알 수 있었습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.38 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-38/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>accumulate 프로시저는 첫 번째 원소와 나머지 원소의 계산 결과를 오른쪽으로 엮어가면서 계산하기 때문에 fold-right라고도 한다. 이와 비슷한 연산으로 fold-left가 있는데 이것은 원소를 엮어가며 계산하는 방향이 fold-right의 반대다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fold-left</span> op initial sequence)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> result rest)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> rest)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">op</span> result (<span class="name"><span class="built_in">car</span></span> rest))</span><br><span class="line">              (<span class="name"><span class="built_in">cdr</span></span> rest))))</span><br><span class="line">  (<span class="name">iter</span> initial sequence))</span><br></pre></td></tr></table></figure>
<p>다음 식을 계산하면 어떤 결과가 나오는가?</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">fold-right</span> / <span class="number">1</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">(<span class="name">fold-left</span> / <span class="number">1</span> (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">(<span class="name">fold-right</span> list nil (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">(<span class="name">fold-left</span> list nil (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>한 차례열을 fold-right한 결과와 fold-left한 결과가 같으려면, op가 어떤 성질을 갖추어야 하는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>차례열을 순서대로 처리해서 묶는 방법에는 두가지가 있습니다.<br />
하나는 왼쪽으로 묶는 방식이고 다른 하나는 오른쪽으로 묶는 방식입니다.<br />
추상적으로 알고 있었던 두 방식의 차이를 확실히 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>쉬운 이해를 위해 accumulate 프로시저를 가져오겠습니다.<br />
<span style="color:#999">accumulate 프로시저는 fold-right와 같은 말입니다.</span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> op initial sequence)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> sequence)</span><br><span class="line">      initial</span><br><span class="line">      (<span class="name">op</span> (<span class="name"><span class="built_in">car</span></span> sequence)</span><br><span class="line">          (<span class="name">accumulate</span> op initial (<span class="name"><span class="built_in">cdr</span></span> sequence)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br />
위의 두 프로시저로 이해한 fold-right와 fold-left를 수식으로 나타내면 다음과 같습니다.<br />
각 괄호 묶음은 op연산을 나타냅니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>2</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>3</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>4</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>5</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>6</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>7</mn><mtext>  </mtext><mo>⋯</mo><mtext>  </mtext><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>a</mi><mi>l</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">right = (1 \ \ (2 \ \ (3 \ \ (4 \ \ (5 \ \ (6 \ \ (7 \ \ ⋯ \ \ initial)))))))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">2</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">3</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">4</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">5</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">6</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">7</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>a</mi><mi>l</mi><mtext>  </mtext><mn>1</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>2</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>3</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>4</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>5</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>6</mn><mo stretchy="false">)</mo><mtext>  </mtext><mn>7</mn><mo stretchy="false">)</mo><mtext>  </mtext><mo>⋯</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">left = ((((((((initial \ \ 1)\ \  2)\ \  3)\ \  4)\ \  5)\ \  6)\ \  7)\ \  ⋯)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">1</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">2</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">3</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">4</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">5</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">6</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">7</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="minner">⋯</span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>문제에서 주어진 테스트 코드를 한번 실행시켜 보겠습니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-38.png" alt="fold-left와 fold-right의 결과물, 이해하기 여렵지는 않다." /></p>
<p><br/><br/></p>
<p>fold-left와 fold-right의 결과가 같기 위해서 op가 갖추어야 하는 성질을 생각해보겠습니다. 두 프로시저의 결과가 같은 예시를 하나 떠올려 보겠습니다. 제 머리속에 바로 떠오른 예시는 +입니다. op자리에 +를 넣는다면, left나 right방식 모두 인자로 받은 리스트의 합을 반환할 것입니다. +처럼 적용 순서에 영향을 받지 않는 프로시저들은 다들 똑같은 효과를 볼 것입니다. 그 예시로 곱셈도 계산 순서에 상관 없기 때문에 영향을 받지 않을 것입니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-38-1.png" alt="cons와 달리 같은 값을 반환하는 덧셈과 곱셈" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.4 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-4/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>아래는 프로시저가 쌍을 표현하는 다른 방법이다. 이런 표현 방법으로, 어떤 물체 x와 y가 있을 때 (car (cons x y))한 값이 x임을 밝혀 보라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">cons</span></span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (m) (<span class="name">m</span> x y)))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">car</span></span> z)</span><br><span class="line">  (<span class="name">z</span> (<span class="name"><span class="built_in">lambda</span></span> (p q) p)))</span><br></pre></td></tr></table></figure>
<p>여기서 cdr를 어떻게 정의할 수 있는가? (귀띔: 이렇게 정의한 쌍이 올바로 돌아간다는 것을 따져보기 위해서, 1.1.5절의 맞바꿈 계산법을 써 보라.)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>람다식을 연습할 수 있습니다.<br />
cons를 프로시저로 새로 구현하던, 기존의 내장된 cons를 사용하던 사용자는 신경쓸 필요가 없다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>람다식의 활용이 익숙하지 않은 분들은 이번 문제를 활용해서 이해도를 높일 수 있을 것 같습니다.</p>
<p>맞바꿈 계산법을 이용해서 (car (cons x y))를 정의해 보겠습니다.</p>
<p>(car <span style="color:red;">(cons x y)</span>)<br />
(car <span style="color:red;">(lambda (m) (m x y))</span>)</p>
<p>(<span style="color:red;">car</span> (lambda (m) (m x y)))<br />
((lambda (m) (m x y)) <span style="color:red;">(lambda (p q) p)</span>)</p>
<p>(<span style="color:red;">(lambda (m) (m x y))</span> (lambda (p q) p))<br />
((lambda (p q) p) <span style="color:red;">x y</span>)</p>
<p>(car (cons x y)) = x</p>
<p><br/><br/></p>
<p>cdr을 정의하는 것은 매우 쉽습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">cdr</span></span> z)</span><br><span class="line">  (<span class="name">z</span> (<span class="name"><span class="built_in">lambda</span></span> (p q) q)))</span><br></pre></td></tr></table></figure>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.40 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-40/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>정수 n을 인자로 받아서 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 ≤ j ≤ i ≤ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>을 만족하는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span> 쌍의 차례열을 뽑아낼 수 있도록 unique-pairs 프로시저를 정의하라. 이 프로시저를 써서 prime-sum-pairs의 정의를 더 줄여 보아라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>flatmap의 사용에 조금 더 익숙해졌습니다.<br />
flatmap은 인자로 받은 프로시저가 각각의 원소에 적용되어 산출된 작은 리스트의 원소들을 밖으로 꺼내어 다시 합쳐진 리스트를 반환하는 프로시저입니다.</p>
</blockquote>
<h2 id="문제-풀이에-필요한-프로시저들"><a class="markdownIt-Anchor" href="#문제-풀이에-필요한-프로시저들"></a> 문제 풀이에 필요한 프로시저들</h2>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">enumerate-interval</span> low high)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> low high)</span><br><span class="line">      nil</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> low (<span class="name">enumerate-interval</span> (<span class="name"><span class="built_in">+</span></span> low <span class="number">1</span>) high))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> op initial sequence)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> sequence)</span><br><span class="line">      initial</span><br><span class="line">      (<span class="name">op</span> (<span class="name"><span class="built_in">car</span></span> sequence)</span><br><span class="line">          (<span class="name">accumulate</span> op initial (<span class="name"><span class="built_in">cdr</span></span> sequence)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">flatmap</span> proc seq)</span><br><span class="line">  (<span class="name">accumulate</span> append nil (<span class="name"><span class="built_in">map</span></span> proc seq)))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">filter</span> predicate seq)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> seq) nil)</span><br><span class="line">        ((<span class="name">predicate</span> (<span class="name"><span class="built_in">car</span></span> seq))</span><br><span class="line">         (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> seq)</span><br><span class="line">               (<span class="name">filter</span> predicate (<span class="name"><span class="built_in">cdr</span></span> seq))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">filter</span> predicate (<span class="name"><span class="built_in">cdr</span></span> seq)))))</span><br><span class="line">    </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">divides?</span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> a b) <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">find-divisor</span> n test-divisor)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">&gt;</span></span> (<span class="name">square</span> test-divisor) n) n)</span><br><span class="line">        ((<span class="name">divides?</span> n test-divisor) test-divisor)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">find-divisor</span> n (<span class="name"><span class="built_in">+</span></span> test-divisor <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">smallest-divisor</span> n)</span><br><span class="line">  (<span class="name">find-divisor</span> n <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime?</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name">smallest-divisor</span> n) n))</span><br></pre></td></tr></table></figure>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-unique-pair"><a class="markdownIt-Anchor" href="#a-unique-pair"></a> a. unique-pair</h3>
<p>문제 앞 절의 flatmap 설명을 이해했다면, 쌍으로 이루어진 리스트를 만들려고 할때 flatmap을 이용하면 편하다는 것을 떠올릴 수 있을 것입니다. 단순히 map 프로시저만 사용한다면, 하나의 i에 하나의 리스트밖에 만들어낼 수 없습니다. 하지만 flatmap을 이용하면 하나의 i에 대해 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(j,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>쌍을 여러개 만들어서 이어붙일 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">unique-pairs</span> n)</span><br><span class="line">  (<span class="name">flatmap</span> (<span class="name"><span class="built_in">lambda</span></span> (i)</span><br><span class="line">             (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (j) (<span class="name"><span class="built_in">list</span></span> i j))</span><br><span class="line">                  (<span class="name">enumerate-interval</span> <span class="number">1</span> (<span class="name"><span class="built_in">-</span></span> i <span class="number">1</span>))))</span><br><span class="line">           (<span class="name">enumerate-interval</span> <span class="number">1</span> n)))</span><br></pre></td></tr></table></figure>
<h3 id="b-prime-sum-pairs"><a class="markdownIt-Anchor" href="#b-prime-sum-pairs"></a> b. prime-sum-pairs</h3>
<p>기존의 prime-sum-pairs를 이해했다면 어느 부분을 바꿔야 하는지는 쉽습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime-sum?</span> pair)</span><br><span class="line">  (<span class="name">prime?</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name"><span class="built_in">car</span></span> pair) (<span class="name"><span class="built_in">cadr</span></span> pair))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-pair-sum</span> pair)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">car</span></span> pair) (<span class="name"><span class="built_in">cadr</span></span> pair) (<span class="name"><span class="built_in">+</span></span> (<span class="name"><span class="built_in">car</span></span> pair) (<span class="name"><span class="built_in">cadr</span></span> pair))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">prime-sum-pairs</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">map</span></span> make-pair-sum</span><br><span class="line">       (<span class="name">filter</span> prime-sum?</span><br><span class="line">               (<span class="name">unique-pairs</span> n))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-40.png" alt="4 이하의 합이 소수인 수들" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.42 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-42/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>'에잇-퀸 퍼즐<sup>eight-queens puzzle</sup>’은, 체스판에 퀸 여덟을 놓되 서로 공격할 수 있는 자리에 오지 못하게 두는 방법이 무엇인지 찾아내는 수수께끼다. (다시 말해서, 두 퀸이 마주보지 않도록 한 가로줄, 세로줄, 대각선 위에 퀸 두 개가 오면 안된다.) 이 수수께끼를 푸는 한 가지 방법은, 그림 2.8에서 보여주듯이 체스판을 가로지르면서 세로줄마다 하나씩 퀸을 놓는 것이다. 따라서 퀸 k-1개를 제대로 두었다고 치면, k번째 퀸은 다른 퀸을 공격하지 못하는 자리에 와야 한다.</p>
<p><img data-src="/img/sicp/chapter-2/eight-queen.gif" alt="그림 2.8 에잇-퀸 퍼즐을 푸는 한 가지 방법" /></p>
<p>이런 방식을 되돌이<sup>재귀</sup>로 정리해 보면 이러하다. 퀸 k-1개를 세로줄 k-1개에 두는 방법을 모두 찾아냈다고 치자. 그렇게 찾아낸 방법 하나하나에 대하여 k번째 세로줄의 가로줄마다 k번째 퀸을 놓는다고 치고, 그 자리 값을 보탠다. 이로부터 k번째 세로줄에 있는 퀸이 공격 받지 않는 자리 값만 골라낸다. 이리하면 k개 세로줄에 퀸 k개를 안전하게 놓을 수 있는 방법을 몽땅 얻을 수 있다. 이런 과정을 계속 밟아 가면, 답 하나가 아니라 이 수수께끼를 푸는 모든 답을 얻어낼 수 있다.</p>
<p>이 풀이법을 queens 프로시저로 실현해 보자. queens는 퀸 n개를 n×n 체스판에 놓는다고 할 때, 얻을 수 있는 모든 답을 차례열로 묶어 낸다. queens에 갇힌 프로시저 queen-cols는 세로줄 k개에 퀸을 놓을 수 있는 모든 방법을 차례열로 묶어낸다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">queens</span> board-size)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">queen-cols</span> k)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> k <span class="number">0</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">list</span></span> empty-board)</span><br><span class="line">        (<span class="name">filter</span></span><br><span class="line">         (<span class="name"><span class="built_in">lambda</span></span> (positions) (<span class="name">safe?</span> k positions))</span><br><span class="line">         (<span class="name">flatmap</span></span><br><span class="line">          (<span class="name"><span class="built_in">lambda</span></span> (rest-of-queens)</span><br><span class="line">            (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (new-row)</span><br><span class="line">                   (<span class="name">adjoin-position</span> new-row k rest-of-queens))</span><br><span class="line">                 (<span class="name">enumerate-interval</span> <span class="number">1</span> board-size)))</span><br><span class="line">          (<span class="name">queen-cols</span> (<span class="name"><span class="built_in">-</span></span> k <span class="number">1</span>))))))</span><br><span class="line">  (<span class="name">queen-cols</span> board-size))</span><br></pre></td></tr></table></figure>
<p>이 프로시저에서 rest-of-queens는 세로줄 k-1개에 퀸 k-1개를 놓는 방법 하나를 나태내고, new-row는 k번째 세로줄에 k번째 퀸을 놓을 수 있는 가로줄을 나타낸다. 이 프로그램을 마무리 짓기 위하여, 체스판의 자리 값을 원소로 하는 집합의 표현 방식을 정하라. 그 다음, 그 집합에 새로운 가로-세로 자리 값을 집어 넣는 프로시저 adjoin-position, 또 공집합을 나타내는 프로시저 empty-board를 구현하라. 이에 아울러, k번째 퀸이 나머지 다른 퀸에서 안전한지 알아볼 수도 있도록 safe?라는 술어 프로시저도 만들어라. (이때 나머지 퀸들은 벌써 안전한 자리를 잡고 있다 치고, 새로 놓을 퀸이 안전한지만 따져보면 된다.)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>프로시저의 위치를 보고 이 프로시저가 어떤 반환값을 반환해야 하는지 추론하는 능력이 상승했습니다.<br />
차례열을 처리하는 car, cadr, cdr 프로시저에 조금 더 익숙해질 수 있었습니다.<br />
append에 nil을 첫번째 원소로 넣었을 때 어떤 일이 일어나는 지를 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제-풀이에-필요한-프로시저들"><a class="markdownIt-Anchor" href="#문제-풀이에-필요한-프로시저들"></a> 문제 풀이에 필요한 프로시저들</h2>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">enumerate-interval</span> low high)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> low high)</span><br><span class="line">      nil</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> low (<span class="name">enumerate-interval</span> (<span class="name"><span class="built_in">+</span></span> low <span class="number">1</span>) high))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> op initial sequence)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> sequence)</span><br><span class="line">      initial</span><br><span class="line">      (<span class="name">op</span> (<span class="name"><span class="built_in">car</span></span> sequence)</span><br><span class="line">          (<span class="name">accumulate</span> op initial (<span class="name"><span class="built_in">cdr</span></span> sequence)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">flatmap</span> proc seq)</span><br><span class="line">  (<span class="name">accumulate</span> append nil (<span class="name"><span class="built_in">map</span></span> proc seq)))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">filter</span> predicate seq)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> seq) nil)</span><br><span class="line">        ((<span class="name">predicate</span> (<span class="name"><span class="built_in">car</span></span> seq))</span><br><span class="line">         (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> seq)</span><br><span class="line">               (<span class="name">filter</span> predicate (<span class="name"><span class="built_in">cdr</span></span> seq))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">filter</span> predicate (<span class="name"><span class="built_in">cdr</span></span> seq)))))</span><br></pre></td></tr></table></figure>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>저는 이 문제를 푸는데 상당히 애를 먹었습니다. 첫번째로 애를 먹은 부분은, 완성된 결과가 어떤 모양인지 문제에서 정확히 제시해주지 않은 점입니다. 완성된 queens 프로시저의 결과값 중 하나는 이렇게 생겼습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">((<span class="name">2</span> <span class="number">1</span>) (<span class="name">4</span> <span class="number">2</span>) (<span class="name">6</span> <span class="number">3</span>) (<span class="name">1</span> <span class="number">4</span>) (<span class="name">3</span> <span class="number">5</span>) (<span class="name">5</span> <span class="number">6</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>queens 프로시저는 모든 가능한 퀸의 위치를 flatmap을 이용해서 만들어낸 후, 그 중에서 조건에 맞는 위치들의 차례열을 필터링하는 프로시저입니다.</p>
<h3 id="1-adjoin-position"><a class="markdownIt-Anchor" href="#1-adjoin-position"></a> 1. adjoin-position</h3>
<p>adjoin-position 프로시저를 구현하기 위해서는 이 프로시저가 어떤 값을 인자로 받고 어떤 값을 반환해야 하는 지를 확인해야 합니다. 이 프로시저의 위치로 보았을때, 인자로 받는 값은 1부터 n사이의 정수값입니다. 그리고 그 정수값을 이용해서 반환해야 하는 값은, 기존의 퀸의 위치를 나타낸 차례열에 (정수값 new-row, 열 k) 쌍을 이어붙인 값입니다. 프로시저로 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">adjoin-position</span> new-row k rest-of-queens)</span><br><span class="line">  (<span class="name"><span class="built_in">append</span></span> rest-of-queens (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> new-row k))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>처음에 저는 (list (list new-row k)) 대신에 (list new-row k)를 넣었습니다. 이는 append의 기능을 착각해서 생긴 문제입니다. 우리가 원하는 기능은 다음과 같습니다. “((1 1) (2 2)) 쌍에 (3 3)을 넣어서 ((1 1) (2 2) (3 3))을 만드는 것” 하지만 리스트를 두번 사용하지 않으면 다음과 같은 과정을 진행해버립니다. “((1 1) (2 2)) 쌍에 (3 3)을 넣어서 ((1 1) (2 2) 3 3)을 만드는 것” append는 리스트의 원소들을 빼내서 다시 넣어주는 프로시저이기 때문에 쌍을 넣고 싶다면 list를 두번 사용해야 합니다.</p>
<h3 id="2-empty-board"><a class="markdownIt-Anchor" href="#2-empty-board"></a> 2. empty-board</h3>
<p>empty-board가 어떻게 쓰이는지를 살펴보겠습니다. empty-board가 반환해야 하는 값은, (queen-cols 0)을 의미해야 합니다. (queen-cols 0)은 프로시저 안의 flatmap에서 쓰이는데, 기존의 퀸의 위치를 나타내는 차례열에 새로운 퀸의 위치쌍을 append하는 형태로 쓰입니다. 즉, 아래의 식을 만족해야 하는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">append</span></span> (<span class="name">queen-cols</span> <span class="number">0</span>) (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">1</span>))</span><br><span class="line">&gt;&gt;&gt; (<span class="name"><span class="built_in">list</span></span> <span class="number">1</span> <span class="number">1</span>) </span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>appned 프로시저는 (append nil something)을 something으로 반환해 줍니다. 따라서 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> empty-board nil)</span><br></pre></td></tr></table></figure>
<h3 id="31-safe"><a class="markdownIt-Anchor" href="#31-safe"></a> 3.1 safe?</h3>
<p>가장 생각도 많이 필요하고 시간도 오래 걸린 프로시저입니다. 처음으로 완성한 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">safe?</span> k positions)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">horizontal-check-iter</span> value positions)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> positions)</span><br><span class="line">        <span class="literal">#f</span></span><br><span class="line">        (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">car</span></span> positions)) value)</span><br><span class="line">            (<span class="name">horizontal-check-iter</span> value (<span class="name"><span class="built_in">cdr</span></span> positions)))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">diagnol-check-iter</span> value distance positions)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> positions)</span><br><span class="line">        <span class="literal">#f</span></span><br><span class="line">        (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">car</span></span> positions)) (<span class="name"><span class="built_in">+</span></span> value distance))</span><br><span class="line">            (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">car</span></span> positions)) (<span class="name"><span class="built_in">-</span></span> value distance))</span><br><span class="line">            (<span class="name">diagnol-check-iter</span> value (<span class="name"><span class="built_in">+</span></span> distance <span class="number">1</span>) (<span class="name"><span class="built_in">cdr</span></span> positions)))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">check?</span> k positions)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">row-value</span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">car</span></span> positions))))</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> k <span class="number">1</span>)</span><br><span class="line">          <span class="literal">#f</span></span><br><span class="line">          (<span class="name"><span class="built_in">or</span></span> (<span class="name">horizontal-check-iter</span> row-value (<span class="name"><span class="built_in">cdr</span></span> positions))</span><br><span class="line">              (<span class="name">diagnol-check-iter</span> row-value <span class="number">1</span> (<span class="name"><span class="built_in">cdr</span></span> positions))</span><br><span class="line">              (<span class="name">check?</span> (<span class="name"><span class="built_in">-</span></span> k <span class="number">1</span>) (<span class="name"><span class="built_in">cdr</span></span> positions))))))</span><br><span class="line"></span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">check?</span> k positions)</span><br><span class="line">      <span class="literal">#f</span></span><br><span class="line">      <span class="literal">#t</span>))</span><br></pre></td></tr></table></figure>
<p>첫번째로 떠올린 아이디어입니다. 가장 첫번째 퀸의 row값을 기준으로 horizontal-check-iter로 수평 방향으로 겹치는 퀸이 있는지 확인하고, diagnol-check-iter로 대각선 방향으로 겹치는 퀸이 있는지 확인한 후 다음 퀸으로 넘어가서 다시 확인하는 프로시저입니다.</p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-42-1.png" alt="조금 조잡해 보이지만 결과를 도출해내는 프로시저" /></p>
<p><br/><br/></p>
<h3 id="32-safe"><a class="markdownIt-Anchor" href="#32-safe"></a> 3.2. safe?</h3>
<p>두번째로 떠올린 아이디어는 두 포지션간 서로 공격이 가능한지 알아보는 (check? p1 p2)를 만들어서 구현하는 것입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">safe?</span> k positions)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">check?</span> p1 p2)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">row-1</span> (<span class="name"><span class="built_in">car</span></span> p1))</span><br><span class="line">          (<span class="name">col-1</span> (<span class="name"><span class="built_in">cadr</span></span> p1))</span><br><span class="line">          (<span class="name">row-2</span> (<span class="name"><span class="built_in">car</span></span> p2))</span><br><span class="line">          (<span class="name">col-2</span> (<span class="name"><span class="built_in">cadr</span></span> p2)))</span><br><span class="line">      (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">=</span></span> row-1 row-2)</span><br><span class="line">          (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">-</span></span> col-2 col-1) (<span class="name"><span class="built_in">abs</span></span> (<span class="name"><span class="built_in">-</span></span> row-2 row-1))))))</span><br><span class="line"></span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">check-positions-iter</span> this-position other-positions)</span><br><span class="line">      (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> other-positions)</span><br><span class="line">          <span class="literal">#f</span></span><br><span class="line">          (<span class="name"><span class="built_in">or</span></span> (<span class="name">check?</span> this-position (<span class="name"><span class="built_in">car</span></span> other-positions))</span><br><span class="line">              (<span class="name">check-positions-iter</span> this-position (<span class="name"><span class="built_in">cdr</span></span> other-positions)))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">check-iter</span> k positions)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> k <span class="number">1</span>)</span><br><span class="line">        <span class="literal">#f</span></span><br><span class="line">        (<span class="name"><span class="built_in">or</span></span> (<span class="name">check-positions-iter</span> (<span class="name"><span class="built_in">car</span></span> positions) (<span class="name"><span class="built_in">cdr</span></span> positions))</span><br><span class="line">            (<span class="name">check-iter</span> (<span class="name"><span class="built_in">-</span></span> k <span class="number">1</span>) (<span class="name"><span class="built_in">cdr</span></span> positions)))))</span><br><span class="line">  </span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">check-iter</span> k positions)</span><br><span class="line">      <span class="literal">#f</span>   <span class="comment">;unsafe</span></span><br><span class="line">      <span class="literal">#t</span>)) <span class="comment">;safe</span></span><br></pre></td></tr></table></figure>
<br/>
<p><img data-src="/img/sicp/chapter-2/exercise-2-42-2.png" alt="조금 조잡해 보이지만 결과를 도출해내는 프로시저 2" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.41 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-41/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>어떤 정수 n보다 작거나 n과 같은, 서로 다른 양의 정수 i,j,k가 있다고 할 때, 그 합이 어떤 정수 s가 된다고 하자. 그와 같은 세 정수의 트리플을 차례대로 뽑아내는 프로시저를 짜라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>flatmap을 사용해야 하는 곳과 map을 사용해야 하는 곳을 구별할 수 있게 되었습니다.<br />
map은 시퀀스의 원소 각각에 대해 산출값이 하나씩만 있는 문제에 쓰입니다.<br />
반면 flatmap은 시퀀스의 원소 각각에 대해 산출값이 여러개인 문제에 쓰입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이전 문제인 <a href="/sicp/chapter-2/exercise-2-40">연습문제 2.40</a>에서 영감을 얻어서, n보다 작은 수로 이루어진 트리플들의 차례열을 먼저 만든 다음 filter를 사용하는 방향으로 풀이의 방향을 잡았습니다.</p>
<h3 id="a-n보다-작은-수의-트리플"><a class="markdownIt-Anchor" href="#a-n보다-작은-수의-트리플"></a> a. n보다 작은 수의 트리플</h3>
<p>처음 이 프로시저를 구상할 때에는 flatmap을 세 번 사용했습니다. 그리고 당연히 그 방법은 틀렸습니다. flatmap을 두번 사용한 뒤에는 map을 사용해야 합니다. 첫번째 flatmap의 람다함수가 하는 역할은, i하나를 받아서 i가 포함된 트리플들을 반환하는 것입니다. 두번째 flatmap의 람다함수의 역할은 j 하나를 받아서 선택된 i와 선택된 j가 포함된 트리플들을 반환하는 것입니다. 그렇다면 여기서 이미 i와 j값이 정해져 있을때, 트리플을 반환하는 방법은 flatmap이 아니라 map을 사용해 1~n까지의 수만큼의 트리플을 반환하는 것입니다. 그러므로 프로시저는 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">unique-triples</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">range</span> (<span class="name">enumerate-interval</span> <span class="number">1</span> n)))</span><br><span class="line">    (<span class="name">flatmap</span> (<span class="name"><span class="built_in">lambda</span></span> (i)</span><br><span class="line">             (<span class="name">flatmap</span> (<span class="name"><span class="built_in">lambda</span></span> (j)</span><br><span class="line">                        (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (k) (<span class="name"><span class="built_in">list</span></span> i j k))</span><br><span class="line">                             range))</span><br><span class="line">                      range))</span><br><span class="line">           range)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="b-필터로-구현한-프로시저"><a class="markdownIt-Anchor" href="#b-필터로-구현한-프로시저"></a> b. 필터로 구현한 프로시저</h3>
<p>프로시저에 사용될 필터를 구현하는 것은 어렵지 않습니다. 차례열을 인자로 받아서 그 합이 s와 같은지 판별하는 프로시저를 만들면 됩니다. 이 프로시저는 필터 프로시저에 들어가야 하므로 람다식의 형태로 만듭니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">is-sum-to</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (seq) (<span class="name"><span class="built_in">=</span></span> s (<span class="name">accumulate</span> + <span class="number">0</span> seq))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>완성된 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">triples-sum-to</span> s n)</span><br><span class="line">  (<span class="name">filter</span> (<span class="name">is-sum-to</span> s) (<span class="name">unique-triples</span> n)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-41.png" alt="10보다 작고 합이 5인 트리플들" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.43 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-43/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Louis Reasoner는 <a href="/sicp/chapter-2/exercise-2-42">연습문제 2.42</a>를 푸는 데 애를 먹고 있다. queens가 돌아가기는 하는 것 같은데, 너무 느려서 참기 힘들다. 또 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo>×</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">6 × 6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>문제를 푸는 데 걸리는 시간도 너무 길다고 느낀다. Louis가 Eva Lu Ator에게 도움을 요청하니, Eva는 flatmap 안에서 매핑을 겹쳐 쓸 때 그 차례가 뒤바뀐게 문제라고 한다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">flatmap</span></span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (new-row)</span><br><span class="line">    (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (rest-of-queens)</span><br><span class="line">           (<span class="name">adjoin-position</span> new-row k rest-of-queens))</span><br><span class="line">         (<span class="name">queen-cols</span> (<span class="name"><span class="built_in">-</span></span> k <span class="number">1</span>))))</span><br><span class="line">  (<span class="name">enumerate-interval</span> <span class="number">1</span> board-size))</span><br></pre></td></tr></table></figure>
<p>이렇게 매핑하는 차례가 바귀었다고 해서 프로그램이 느려지는 까닭은 무엇인가? <a href="/sicp/chapter-2/exercise-2-42">연습문제 2.42</a>에서 만든 프로그램으로 에잇-퀸 문제를 풀 때 T시간이 걸린다고 하면, Louis가 짠 프로그램으로는 같은 문제를 푸는 데 얼마나 걸리는지 어림잡아 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>map을 겹처서 사용할 때, 그 순서에 따라 프로시저의 시간복잡도가 달라진다는 것을 이해했습니다.<br />
잃어가던 시간복잡도 계산의 감을 찾을 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>기존의 프로시저와 새로운 프로시저를 비교해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="comment">;old_one</span></span><br><span class="line">(<span class="name">flatmap</span></span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (rest-of-queens)</span><br><span class="line">    (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (new-row)</span><br><span class="line">           (<span class="name">adjoin-position</span> new-row k rest-of-queens))</span><br><span class="line">         (<span class="name">enumerate-interval</span> <span class="number">1</span> board-size)))</span><br><span class="line">  (<span class="name">queen-cols</span> (<span class="name"><span class="built_in">-</span></span> k <span class="number">1</span>)))</span><br><span class="line">  </span><br><span class="line"><span class="comment">;new_one</span></span><br><span class="line">(<span class="name">flatmap</span></span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (new-row)</span><br><span class="line">    (<span class="name"><span class="built_in">map</span></span> (<span class="name"><span class="built_in">lambda</span></span> (rest-of-queens)</span><br><span class="line">           (<span class="name">adjoin-position</span> new-row k rest-of-queens))</span><br><span class="line">         (<span class="name">queen-cols</span> (<span class="name"><span class="built_in">-</span></span> k <span class="number">1</span>))))</span><br><span class="line">  (<span class="name">enumerate-interval</span> <span class="number">1</span> board-size))</span><br></pre></td></tr></table></figure>
<h3 id="a-시간차이가-나는-이유"><a class="markdownIt-Anchor" href="#a-시간차이가-나는-이유"></a> a. 시간차이가 나는 이유</h3>
<p>두 프로시저 모두 각 열에 하나씩 퀸을 두었을 때, 서로의 체크를 상관하지 않고 퀸을 둘 수 있는 모든 경우의 수를 반환하는 프로시저입니다. 문제에 대해 생각하다보니 &quot;반환하는 결과 값이 같고 각 프로시저의 실행 횟수가 같은데, 어떻게 프로시저의 속도가 다르지?&quot;라는 의문이 들었습니다. 하지만 조금 더 생각해보니, 각 프로시저의 실행 횟수가 달랐습니다. 처음에 만든 프로시저에서는 (queen-cols (- k 1))의 원소마다 enumerate-interval로 new-row값을 붙여 주었습니다. 다른말로 표현하면, 시간의 오래 걸리는 프로시저인 queen-cols를 한번 실행할 동안, 시간이 조금 걸리는 enumerate-interval을 많이 실행한다는 것입니다. 이와는 반대로 Louis의 프로시저는 시간이 조금 걸리는 enumerate-interval을 한번 실행할 동안, 시간이 많이 걸리는 queen-cols를 여러번 실행합니다. 속도의 차이는 여기서 발생하는 것입니다.</p>
<h3 id="b-시간-차이의-정도"><a class="markdownIt-Anchor" href="#b-시간-차이의-정도"></a> b. 시간 차이의 정도</h3>
<p>가장 시간이 오래 걸리는 프로시저는 queen-cols이므로, queen-cols의 실행시간 차이를 비교해보면 전페 실행시간의 차이를 어림잡을 수 있습니다. 또 queen-cols의 실행시간은 결국 (queen-cols 0)을 몇번 실행하는 지를 계산하면 알 수 있습니다. (queens 5)를 구한다고 가정해 봅시다.</p>
<p>기존의 프로시저는 (queen-cols 4)를 처음 한번 사용합니다.<br />
Louis의 프로시저는 (queen-cols 4)를 (enumerate-interval 1 board-size)의 원소의 개수인 5번만큼 실행합니다.</p>
<p>기존의 프로시저는 (queen-cols 3)을 (queen-cols 4)에 의해 한번만 사용합니다.<br />
Louis의 프로시저는 (queen-cols 3)을 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">5×4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>만큼 사용합니다.</p>
<p>기존의 프로시저는 (queen-cols 2)를 한번만 사용합니다.<br />
Louis의 프로시저는 (queen-cols 2)을 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">5×4×3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>만큼 사용합니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow><annotation encoding="application/x-tex">⋮
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></span></p>
<p>기존의 프로시저는 (queen-cols 0)를 한번만 사용합니다.<br />
Louis의 프로시저는 (queen-cols 0)을 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">(n-1)!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span>만큼 사용합니다.</p>
<p>결국 두 프로시저의 시간복잡도는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">(n-1)!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span></span></span></span>배만큼 차이가 납니다. 기존의 프로시저를 실행하는데 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>만큼의 시간이 걸렸다면, Louis의 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">(n-1)!T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>의 시간이 걸립니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.44 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-44/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>corner-split 프로시저에서 쓰는 up-split 프로시저를 정의하라. 이 프로시저는 right-split과 비슷하지만, below와 beside가 하던 일을 서로 뒤바꾼다는 게 다르다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>그림 프로시저를 사용해서 데이터를 표현하는 방법을 배웠습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="https://docs.racket-lang.org/sicp-manual/SICP_Picture_Language.html#%28def._%28%28lib._sicp-pict%2Fmain..rkt%29._einstein%29%29">dr.racket에서 그림 언어를 사용하는 법</a>에 설명된 방법으로 paint를 사용할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">#lang sicp</span><br><span class="line"></span><br><span class="line">(#%require sicp-pict)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>되도는 프로시저를 만드는 것은 지금까지 수도없이 해왔던 일이므로 설명은 생략하겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">up-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name">below</span> painter</span><br><span class="line">             (<span class="name">beside</span> (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br><span class="line">                     (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">right-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name">beside</span> painter</span><br><span class="line">              (<span class="name">below</span> (<span class="name">right-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br><span class="line">                     (<span class="name">right-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">corner-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">up</span> (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))</span><br><span class="line">            (<span class="name">right</span> (<span class="name">right-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">        (<span class="name"><span class="built_in">let</span></span> ((<span class="name">top-left</span> (<span class="name">beside</span> up up))</span><br><span class="line">              (<span class="name">bottom-right</span> (<span class="name">below</span> right right))</span><br><span class="line">              (<span class="name">corner</span> (<span class="name">corner-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">          (<span class="name">beside</span> (<span class="name">below</span> painter top-left)</span><br><span class="line">                  (<span class="name">below</span> bottom-right corner))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>사용할 수 있는 그림중에는 einstein이 가장 좋아서 einstein으로 테스트해보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">paint</span> (<span class="name">corner-split</span> einstein <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-44.png" alt="painter가 잘 실행되는 모습" /></p>
<p><br/><br/><br />
읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.46 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-46/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>원점에서 한 점에 이르는 이차원 벡터 v는 x,y좌표의 쌍으로 나타낸다. 벡터를 짜맞추는 연산 make-vect와 벡터에서 좌표를 골라내는 연산 xcor-vect, ycor-vect를 정의하여, 요약된 벡터를 구현하라. 이 짜맞추개와 고르개를 써서 벡터의 덧셈, 뺄셈, 스칼라 곱셈 연산을 다음과 같이 처리하는 add-vect, sub-vect, scale-vect 프로시저를 구현하라.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo>+</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1)+(x_2,y_2)=(x_1+x_2,y_1+y_2)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1)-(x_2,y_2)=(x_1-x_2,y_1-y_2)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>s</mi><mi>x</mi><mo separator="true">,</mo><mi>s</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s ⋅ (x,y)=(sx,sy)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>기본적인 벡터연산과, 짜맞추개, 고르개의 정의를 안다면 특별히 얻을 것은 없는 것 같습니다.<br />
다음 문제들을 풀기 위한 준비과정입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-vect</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> x y))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">xcor-vect</span> v)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> v))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">ycor-vect</span> v)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> v))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">add-vect</span> v1 v2)</span><br><span class="line">  (<span class="name">make-vect</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">xcor-vect</span> v1) (<span class="name">xcor-vect</span> v2))</span><br><span class="line">             (<span class="name"><span class="built_in">+</span></span> (<span class="name">ycor-vect</span> v1) (<span class="name">ycor-vect</span> v2))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sub-vect</span> v1 v2)</span><br><span class="line">  (<span class="name">make-vect</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">xcor-vect</span> v1) (<span class="name">xcor-vect</span> v2))</span><br><span class="line">             (<span class="name"><span class="built_in">-</span></span> (<span class="name">ycor-vect</span> v1) (<span class="name">ycor-vect</span> v2))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">scale-vect</span> s v)</span><br><span class="line">  (<span class="name">make-vect</span> (<span class="name"><span class="built_in">*</span></span> s (<span class="name">xcor-vect</span> v))</span><br><span class="line">             (<span class="name"><span class="built_in">*</span></span> s (<span class="name">ycor-vect</span> v))))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.45 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-45/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>right-split과 up-split을 이보다 더 쓰임새가 넓은 split 연산의 인스턴스로 정의할 수 있다. 두 프로시저를 다음과 같이 정의할 수 있도록 split 프로시저를 자라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> right-split (<span class="name">split</span> beside below))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> up-split (<span class="name">split</span> below beside))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>1장에서 주구장창 반복한 차수 높은 프로시저로 그림을 그려 보았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="https://docs.racket-lang.org/sicp-manual/SICP_Picture_Language.html#%28def._%28%28lib._sicp-pict%2Fmain..rkt%29._einstein%29%29">dr.racket에서 그림 언어를 사용하는 법</a>에 설명된 방법으로 paint를 사용할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">#lang sicp</span><br><span class="line"></span><br><span class="line">(#%require sicp-pict)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>기존의 right-split과 up-split을 이용하면 일반적인 프로시저 split을 쉽게 짤 수 있습니다. 또, 이번에는 프로시저 인자에 painter가 명시되어있지 않으므로 람다식으로 작성해야 합니다. n도 명시되어 있지 않으므로 임의로 10번 반복하도록 하겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">up-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name">below</span> painter</span><br><span class="line">             (<span class="name">beside</span> (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br><span class="line">                     (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">split</span> proc1 proc2)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">split-iter</span> painter n)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">        painter</span><br><span class="line">        (<span class="name">proc1</span> painter</span><br><span class="line">               (<span class="name">proc2</span> (<span class="name">split-iter</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br><span class="line">                      (<span class="name">split-iter</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (painter)</span><br><span class="line">    (<span class="name">split-iter</span> painter <span class="number">10</span>)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> right-split (<span class="name">split</span> beside below))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> up-split (<span class="name">split</span> below beside))</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">(<span class="name">paint</span> (<span class="name">right-split</span> einstein))</span><br><span class="line">(<span class="name">paint</span> (<span class="name">up-split</span> einstein))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-45.png" alt="짜부된 아인슈타인이 반복하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.47 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-47/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>그림틀 짜맞추개<sup>constructor</sup> make-frame은 아래 두 가지 방법으로 구현할 수 있다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-frame</span> origin edge1 edge2)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> origin edge1 edge2))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-frame</span> origin edge1 edge2)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> origin (<span class="name"><span class="built_in">cons</span></span> edge1 edge2)))</span><br></pre></td></tr></table></figure>
<p>이 구현을 마무리짓기 위하여 두 방법에 알맞은 고르개<sup>selector</sup> 연산들을 정의해 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>짜맞추개와 고르개의 정의를 이미 알고 있고, list와 cons의 사용에 익숙하다면 더 배울 것은 없습니다.<br />
이후의 문제들을 풀 때 쓰일 것 같습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-list를-이용한-구현"><a class="markdownIt-Anchor" href="#a-list를-이용한-구현"></a> a. list를 이용한 구현</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-frame</span> origin edge1 edge2)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> origin edge1 edge2))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">origin-frame</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> f))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">edge1-frame</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">cadr</span></span> f))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">edge2-frame</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">cadr</span></span> (<span class="name"><span class="built_in">cdr</span></span> f)))</span><br></pre></td></tr></table></figure>
<h3 id="b-cons를-이용한-구현"><a class="markdownIt-Anchor" href="#b-cons를-이용한-구현"></a> b. cons를 이용한 구현</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-frame</span> origin edge1 edge2)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> origin (<span class="name"><span class="built_in">cons</span></span> edge1 edge2)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">origin-frame</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> f))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">edge1-frame</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">cadr</span></span> f))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">edge2-frame</span> f)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">cdr</span></span> f)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.5 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-5/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>오로지 수와 산술 연산만으로 양의 정수 쌍도 표현해 보자. 정수 a,b 쌍을 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>a</mi></msup><msup><mn>3</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">2^a3^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span>로 나타낼 때, 이에 알맞은 cons, car, cdr 프로시저를 정의해 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>cons를 만들 수 있는 참신한 방법을 하나 알아갑니다.<br />
또한 이런식으로 구현해도 요약의 경계 덕분에 cons를 사용하는 데에 아무런 문제가 없을 것입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>정수 a,b 쌍을 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>a</mi></msup><msup><mn>3</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">2^a3^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span>로 나타낸다고 했을때<br />
a값을 구하기 위해서는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>a</mi></msup><msup><mn>3</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">2^a3^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span>에 a가 몇번 곱해져 있는지를 계산하면 됩니다.</p>
<p>base를 n으로 몇번 나눌 수 있지를 검사하는 프로시저 입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">divides?</span> base n)</span><br><span class="line">  (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">remainder</span></span> base n) <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">divides-time</span> base n)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> base n result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name">divides?</span> base n)</span><br><span class="line">      (<span class="name">iter</span> (<span class="name"><span class="built_in">/</span></span> base n) n (<span class="name"><span class="built_in">+</span></span> result <span class="number">1</span>))</span><br><span class="line">      result))</span><br><span class="line">  (<span class="name">iter</span> base n <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>그러면 cons, car, cdr의 구현은 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pow</span> b n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      (<span class="name"><span class="built_in">*</span></span> b (<span class="name">pow</span> b (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">cons</span></span> a b)</span><br><span class="line">  (<span class="name"><span class="built_in">*</span></span> (<span class="name">pow</span> <span class="number">2</span> a) (<span class="name">pow</span> <span class="number">3</span> b)))</span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">car</span></span> z)</span><br><span class="line">  (<span class="name">divides-time</span> z <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">cdr</span></span> z)</span><br><span class="line">  (<span class="name">divides-time</span> z <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">3</span> <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">3</span> <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-5.png" alt="(cons 3 4)가 잘 동작하는 모습" /></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.48 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-48/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>한 평면 위의 방향 잡힌 선분<sup>유향선분, directed line segment</sup>은 벡터 쌍으로 나타낼 수 있다. 하나는 원점에서 선분의 시작점에 이르는 벡터이고, 다른 하나는 원점에서 선분의 끝점에 이르는 벡터다. <a href="/sicp/chapter-2/exercise-2-46">연습문제 2.46</a>에 나온 벡터 표현을 서서 선분을 표현하라. 선분 짜맞추개는 make-segement고, 그 고르개는 start-segment, end-segment다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>기본적인 벡터연산과, 짜맞추개, 고르개의 정의를 안다면 특별히 얻을 것은 없는 것 같습니다.<br />
다음 문제들을 풀기 위한 준비과정입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-segment</span> start-vect end-vect)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> start-vect end-vect))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">start-segment</span> seg)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> seg))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">end-segment</span> seg)</span><br><span class="line">  (<span class="name"><span class="built_in">cdr</span></span> seg))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.49 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-49/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>segments-&gt;painter를 써서, 다음과 같은 기본 페인터를 정의하라.</p>
<p>a. 그림틀의 테두리를 그려주는 페인터<br />
b. 그림틀에서 마주보는 곡짓점을 서로 연결하여 'X’를 그리는 페인터<br />
c. 그림틀의 모서리 가운데 점 네 개를 연결하여 다이아몬드 꼴을 그리는 페인터<br />
d. wave 페인터</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>소모한 시간에 비해 얻는 것이 많이 없는 문제였습니다.<br />
처음 문제를 풀 때, segments-&gt;painter가 기본으로 구현되어 있는지 몰라서 많이 해맸습니다.<br />
또 segments-&gt;painter가 1.0을 최대의 값으로 가진다는 것도 몰라서 다른 풀이들을 봐도 이해가 안되었습니다.<br />
막상 풀고 나니 그렇게 얻은 것은 없는 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>이 문제를 풀기 위해서는, 책에 있는 segments-&gt;painter 프로시저를 그대로 사용하면 안됩니다. scheme의 sicp 패키지에는 자체에 내장된 segments-&gt;painter와 vect, segment가 있으니 이를 활용해야 합니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">#lang sicp </span><br><span class="line">(#%require sicp-pict) </span><br></pre></td></tr></table></figure>
<br/>
<p>내장된 프로시저 segments-&gt;painter는, 그리고자 하는 선분의 x값과 y값의 최대치가 1.0인 선분을 그릴 수 있습니다. 다시말해, 선분의 좌표가 1.0을 넘어가면 더이상 그리지 않습니다.</p>
<h3 id="a-그림틀의-테두리를-그려주는-페인터"><a class="markdownIt-Anchor" href="#a-그림틀의-테두리를-그려주는-페인터"></a> a. 그림틀의 테두리를 그려주는 페인터</h3>
<p>그림틀의 테두리의 길이는 1로 고정되어 있습니다. 그러니 원점에서 수직 수평으로 뻗은 두 선분과, 각 끝에서 (1,1)로 뻗은 두 선분을 그려주면 됩니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> outline </span><br><span class="line"> (<span class="name">segments-&gt;painter</span> </span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>) (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>)) </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>) (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>)) </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>) (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)) </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>) (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)))))</span><br></pre></td></tr></table></figure>
<h3 id="b-그림틀에서-마주보는-꼭짓점을-서로-연결하여-x를-그리는-페인터"><a class="markdownIt-Anchor" href="#b-그림틀에서-마주보는-꼭짓점을-서로-연결하여-x를-그리는-페인터"></a> b. 그림틀에서 마주보는 꼭짓점을 서로 연결하여 'X’를 그리는 페인터</h3>
<p>각 대각선의 좌표를 연결해주면 구할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> X </span><br><span class="line"> (<span class="name">segments-&gt;painter</span> </span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>) (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)) </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>) (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>)))))</span><br></pre></td></tr></table></figure>
<h3 id="c-그림틀의-모서리-가운데-점-네-개를-연결하여-다이아몬드-꼴을-그리는-페인터"><a class="markdownIt-Anchor" href="#c-그림틀의-모서리-가운데-점-네-개를-연결하여-다이아몬드-꼴을-그리는-페인터"></a> c. 그림틀의 모서리 가운데 점 네 개를 연결하여 다이아몬드 꼴을 그리는 페인터</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> diamond</span><br><span class="line"> (<span class="name">segments-&gt;painter</span> </span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.5</span> <span class="number">0.0</span>) (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.5</span>)) </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.5</span>) (<span class="name">vect</span> <span class="number">0.5</span> <span class="number">1.0</span>)) </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.5</span> <span class="number">1.0</span>) (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.5</span>)) </span><br><span class="line">   (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.5</span>) (<span class="name">vect</span> <span class="number">0.5</span> <span class="number">0.0</span>)))))</span><br></pre></td></tr></table></figure>
<h3 id="d-wave-페인터"><a class="markdownIt-Anchor" href="#d-wave-페인터"></a> d. wave 페인터</h3>
<p>과연 wave를 하나 하나 그리는 것이 컴퓨터의 구조와 해석을 공부하는 데에 도움이 될까하는 의문이 들었습니다. 그냥 인터넷에 떠도는 wave를 퍼왔습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> wave</span><br><span class="line">  (<span class="name">segments-&gt;painter</span></span><br><span class="line">   (<span class="name"><span class="built_in">list</span></span> (<span class="name">segment</span> (<span class="name">vect</span> .25 <span class="number">0</span>) (<span class="name">vect</span> .35 .5)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .35 .5) (<span class="name">vect</span> .3 .6)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .3 .6) (<span class="name">vect</span> .15 .4)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .15 .4) (<span class="name">vect</span> <span class="number">0</span> .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0</span> .65) (<span class="name">vect</span> <span class="number">0</span> .85)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0</span> .85) (<span class="name">vect</span> .15 .6)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .15 .6) (<span class="name">vect</span> .3 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .3 .65) (<span class="name">vect</span> .4 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .4 .65) (<span class="name">vect</span> .35 .85)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .35 .85) (<span class="name">vect</span> .4 <span class="number">1</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .4 <span class="number">1</span>) (<span class="name">vect</span> .6 <span class="number">1</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 <span class="number">1</span>) (<span class="name">vect</span> .65 .85)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .65 .85) (<span class="name">vect</span> .6 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 .65) (<span class="name">vect</span> .75 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .75 .65) (<span class="name">vect</span> <span class="number">1</span> .35)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">1</span> .35) (<span class="name">vect</span> <span class="number">1</span> .15)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">1</span> .15) (<span class="name">vect</span> .6 .45)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 .45) (<span class="name">vect</span> .75 <span class="number">0</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .75 <span class="number">0</span>) (<span class="name">vect</span> .6 <span class="number">0</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 <span class="number">0</span>) (<span class="name">vect</span> .5 .3)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .5 .3) (<span class="name">vect</span> .4 <span class="number">0</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .4 <span class="number">0</span>) (<span class="name">vect</span> .25 <span class="number">0</span>)))))</span><br></pre></td></tr></table></figure>
<h3 id="e-painter-테스트"><a class="markdownIt-Anchor" href="#e-painter-테스트"></a> e. painter 테스트</h3>
<p>지금까지 만든 프로시저들이 잘 작동하는지 테스트 코드를 실행시켜 보겠습니다. paint-square는 4개의 그림을 하나의 그림틀에 그리는 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">paint-square</span> p1 p2 p3 p4)</span><br><span class="line">  (<span class="name">paint</span> (<span class="name">below</span> (<span class="name">beside</span> p3 p4)</span><br><span class="line">                (<span class="name">beside</span> p1 p2))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name">paint-square</span> outline X diamond wave)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-49.png" alt="테두리, 대각선, 마름모, 웨이브의 순서로 그려진 그림" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.50 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-50/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>페인터를 수평으로 뒤집어 변환하는 flip-horiz 프로시저를 정의하라. 페인터를 시계 반대 방향으로 180도, 270도 돌리는 프로시저도 정의해 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>페인터 데이터를 추상화한 방식이 얼마나 효율적으로 다른 프로시저들을 만들 수 있는 지를 확인할 수 있었습니다.<br />
페인터를 감싼 틀을 비튼다는 방식은 수많은 변형을 쉽게 가능하게 해주었습니다.<br />
데이터를 잘 추상화하면 이렇게 좋다는 것을 보고 갑니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>책의 설명을 잘 이해했다면 transform-painter의 사용은 그렇게 어렵지 않을 것 같습니다. 이 프로시저도 그전의 프로시저와 마찬가지로 기본으로 내장된 프로시저이니 따로 구현할 필요 없습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">#lang sicp </span><br><span class="line">(#%require sicp-pict) </span><br></pre></td></tr></table></figure>
<p>결국 어떤 페이터의 틀을 조작하는 것은 그 틀의 origin의 좌표와 x축 좌표의 끝, y축 좌표의 끝를 조작하는 것입니다. 그림틀을 원하는 형태로 바꿨을 때 이 세 좌표가 새로운 그림틀의 어느 위치에 있는 지를 알면 쉽게 변형을 할 수 있습니다.</p>
<h3 id="a-flip-horiz"><a class="markdownIt-Anchor" href="#a-flip-horiz"></a> a. flip-horiz</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">flip-horiz</span> painter)</span><br><span class="line">  (<span class="name">transform-painter</span> painter</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-50-1.png" alt="수평으로 반전된 아인슈타인" /></p>
<p><br/><br/></p>
<h3 id="b-rotate180"><a class="markdownIt-Anchor" href="#b-rotate180"></a> b. rotate180</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">rotate180</span> painter)</span><br><span class="line">  (<span class="name">transform-painter</span> painter</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>)))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-50-2.png" alt="180도 회전한 아인슈타인" /><br />
<br/><br/></p>
<h3 id="c-rotate270"><a class="markdownIt-Anchor" href="#c-rotate270"></a> c. rotate270</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">rotate270</span> painter)</span><br><span class="line">  (<span class="name">transform-painter</span> painter</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>)))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-50-3.png" alt="반시계 방향으로 270도 회전한 아인슈타인" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.51 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-51/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>페인터 연산 below를 정의하라. below는 페인터 두 개를 인자로 받아서 첫 번째 페인터는 틀 아래쪽에, 두 번째 페인터는 틀 위쪽에 그림을 그리도록 합쳐진 페인터를 내놓는다. below 프로시저를 두 가지 방법으로 정의해 보라. 하나는 위에서 정의한 beside 프로시저와 비슷하게, 다른 하나는 beside와 (<a href="/sicp/chapter-2/exercise-2-50">연습문제 2.50</a>에서 정의한) 돌리는 연산을 써서 정의해 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>tansform-painter를 쓰면, 범용적인 그림 변환이 가능하지만<br />
가끔은 미리 만들어 놓은 프로시저를 조합해서 표현을 간결하게 하는 것도 좋다는 생각이 들었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>책의 설명을 잘 이해했다면 transform-painter의 사용은 그렇게 어렵지 않을 것 같습니다. 이 프로시저도 기본적으로 패키지 안에 내장된 프로시저이니 따로 구현할 필요 없습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">#lang sicp </span><br><span class="line">(#%require sicp-pict) </span><br></pre></td></tr></table></figure>
<h3 id="a-split-point"><a class="markdownIt-Anchor" href="#a-split-point"></a> a. split-point</h3>
<p>책에서 설명한 beside 프로시저는 다음과 같습니다. 이를 참고해서 below 프로시저를 만들어 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">beside</span> painter1 painter2)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">split-point</span> (<span class="name">vect</span> <span class="number">0.5</span> <span class="number">0.0</span>)))</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">paint-left</span></span><br><span class="line">           (<span class="name">transform-painter</span> painter1</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>)</span><br><span class="line">                              split-point</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>)))</span><br><span class="line">          (<span class="name">paint-right</span></span><br><span class="line">           (<span class="name">transform-painter</span> painter2</span><br><span class="line">                              split-point</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>)</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">0.5</span> <span class="number">1.0</span>))))</span><br><span class="line">      (<span class="name"><span class="built_in">lambda</span></span> (frame)</span><br><span class="line">        (<span class="name">paint-left</span> frame)</span><br><span class="line">        (<span class="name">paint-right</span> frame)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>transform-painter의 원리만 안다면 그렇게 어려운 문제는 아닙니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">below</span> painter1 painter2)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">split-point</span> (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.5</span>)))</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">paint-down</span></span><br><span class="line">           (<span class="name">transform-painter</span> painter1</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>)</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>)</span><br><span class="line">                              split-point))</span><br><span class="line">          (<span class="name">paint-up</span></span><br><span class="line">           (<span class="name">transform-painter</span> painter2</span><br><span class="line">                              split-point</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.5</span>)</span><br><span class="line">                              (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>))))</span><br><span class="line">      (<span class="name"><span class="built_in">lambda</span></span> (frame)</span><br><span class="line">        (<span class="name">paint-down</span> frame)</span><br><span class="line">        (<span class="name">paint-up</span> frame)))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-51-1.png" alt="층으로 나뉜 아인슈타인 - 1" /></p>
<p><br/><br/></p>
<h3 id="b-돌리는-연산"><a class="markdownIt-Anchor" href="#b-돌리는-연산"></a> b. 돌리는 연산</h3>
<p><a href="/sicp/chapter-2/exercise-2-50">연습문제 2.50</a>의 돌리는 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">rotate180</span> painter)</span><br><span class="line">  (<span class="name">transform-painter</span> painter</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">0.0</span>)))</span><br><span class="line">           </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">rotate270</span> painter)</span><br><span class="line">  (<span class="name">transform-painter</span> painter</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">1.0</span> <span class="number">1.0</span>)</span><br><span class="line">                     (<span class="name">vect</span> <span class="number">0.0</span> <span class="number">0.0</span>)))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br />
생각하는 과정이 재밌는 문제였습니다. beside를 써서 위 아래로 그림을 나누기 위해서는 우선 옆으로 나란히 있는 그림을 만든 뒤에 반시계 방향으로 90도 회전하면 됩니다. 그 전에 미리 양 옆의 그림들을 방향에 맞게 회전시켜 놓으면 쉽게 문제를 풀 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">below</span> painter1 painter2)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">p1</span> (<span class="name">rotate270</span> painter1))</span><br><span class="line">        (<span class="name">p2</span> (<span class="name">rotate270</span> painter2)))</span><br><span class="line">    (<span class="name">rotate90</span> (<span class="name">beside</span> p1 p2))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-51-2.png" alt="층으로 나뉜 아인슈타인 - 2" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.52 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-52/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>위에서 설명한 대로 층마다 따로 무언가를 고쳐서, 그림 2.9에서 나오는 wave의 square-limit를 바꾸자.</p>
<p>a. <a href="/sicp/chapter-2/exercise-2-49">연습문제 2.49</a>에서 만든 기본 wave 페인터에 (예컨데 웃는 모습을 그린다던가 하기 위해서) 선분을 몇 개 더 그리도록 고쳐라.</p>
<p>b. (예컨데, up-split과 right-split 그림을 두 번 복사하지 않고 한 번만 복사해서 쓴다던가 하여) corner-split이 짜맞추는 패턴을 바꿔 보라.</p>
<p>c. square-of-four를 쓰는 square-limit 프로시저를 바꿔서 모서리를 다른 패턴으로 그릴 수 있게 만들어 보라. (보기를 들어, 로저스 학장 그림이 사각형의 모서리에서 바깥을 바라보도록 할 수도 있겠다.)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>다층 설계의 각 부분만을 수정하므로서 다른 계층의 프로시저들을 손보지 않고도 다양한 변형이 가능하다는 것을 느꼈습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-smiling-wave"><a class="markdownIt-Anchor" href="#a-smiling-wave"></a> a. smiling wave</h3>
<p>웃는 wave를 구현하는 것이 이 책을 공부하는 데에 얼마나 도움이 될지는 모르겠지만, 일단 만들어 보았습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> wave</span><br><span class="line">  (<span class="name">segments-&gt;painter</span></span><br><span class="line">   (<span class="name"><span class="built_in">list</span></span> (<span class="name">segment</span> (<span class="name">vect</span> .25 <span class="number">0</span>) (<span class="name">vect</span> .35 .5))</span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .45 .85) (<span class="name">vect</span> .46 .9))</span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .48 .85) (<span class="name">vect</span> .46 .9))</span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .57 .85) (<span class="name">vect</span> .56 .9))</span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .54 .85) (<span class="name">vect</span> .56 .9))</span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .35 .5) (<span class="name">vect</span> .3 .6)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .3 .6) (<span class="name">vect</span> .15 .4)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .15 .4) (<span class="name">vect</span> <span class="number">0</span> .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0</span> .65) (<span class="name">vect</span> <span class="number">0</span> .85)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">0</span> .85) (<span class="name">vect</span> .15 .6)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .15 .6) (<span class="name">vect</span> .3 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .3 .65) (<span class="name">vect</span> .4 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .4 .65) (<span class="name">vect</span> .35 .85)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .35 .85) (<span class="name">vect</span> .4 <span class="number">1</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .4 <span class="number">1</span>) (<span class="name">vect</span> .6 <span class="number">1</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 <span class="number">1</span>) (<span class="name">vect</span> .65 .85)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .65 .85) (<span class="name">vect</span> .6 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 .65) (<span class="name">vect</span> .75 .65)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .75 .65) (<span class="name">vect</span> <span class="number">1</span> .35)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">1</span> .35) (<span class="name">vect</span> <span class="number">1</span> .15)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> <span class="number">1</span> .15) (<span class="name">vect</span> .6 .45)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 .45) (<span class="name">vect</span> .75 <span class="number">0</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .75 <span class="number">0</span>) (<span class="name">vect</span> .6 <span class="number">0</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .6 <span class="number">0</span>) (<span class="name">vect</span> .5 .3)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .5 .3) (<span class="name">vect</span> .4 <span class="number">0</span>)) </span><br><span class="line">      (<span class="name">segment</span> (<span class="name">vect</span> .4 <span class="number">0</span>) (<span class="name">vect</span> .25 <span class="number">0</span>)))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-52-1.png" alt="웃는 wave" /><br />
<br/><br/></p>
<h3 id="b-corner-split"><a class="markdownIt-Anchor" href="#b-corner-split"></a> b. corner-split</h3>
<p>기본의 corner-split입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">up-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name">below</span> painter</span><br><span class="line">             (<span class="name">beside</span> (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br><span class="line">                     (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">right-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name">beside</span> painter</span><br><span class="line">              (<span class="name">below</span> (<span class="name">right-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))</span><br><span class="line">                     (<span class="name">right-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))</span><br><span class="line">           </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">corner-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">up</span> (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))</span><br><span class="line">            (<span class="name">right</span> (<span class="name">right-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">        (<span class="name"><span class="built_in">let</span></span> ((<span class="name">top-left</span> (<span class="name">beside</span> up up))</span><br><span class="line">              (<span class="name">bottom-right</span> (<span class="name">below</span> right right))</span><br><span class="line">              (<span class="name">corner</span> (<span class="name">corner-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">          (<span class="name">beside</span> (<span class="name">below</span> painter top-left)</span><br><span class="line">                  (<span class="name">below</span> bottom-right corner))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 프로시저에서 up-split과 right-split을 두 번 복사하던 것을 한번만 복사하도록 하는 것은 매우 쉽습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">corner-split</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      painter</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">up</span> (<span class="name">up-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))</span><br><span class="line">            (<span class="name">right</span> (<span class="name">right-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>)))</span><br><span class="line">            (<span class="name">corner</span> (<span class="name">corner-split</span> painter (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">          (<span class="name">beside</span> (<span class="name">below</span> painter up)</span><br><span class="line">                  (<span class="name">below</span> right corner)))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-52-2.png" alt="수정된 corner-split" /></p>
<p><br/><br/></p>
<h3 id="c-square-limit"><a class="markdownIt-Anchor" href="#c-square-limit"></a> c. square-limit</h3>
<p>책에서 요구한 로저스 학장 대신, 이번에도 아인슈타인이 바라보는 방향을 바꾸어 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-of-four</span> tl tr bl br)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (painter)</span><br><span class="line">    (<span class="name"><span class="built_in">let</span></span> ((<span class="name">top</span> (<span class="name">beside</span> (<span class="name">tl</span> painter) (<span class="name">tr</span> painter)))</span><br><span class="line">          (<span class="name">bottom</span> (<span class="name">beside</span> (<span class="name">bl</span> painter) (<span class="name">br</span> painter))))</span><br><span class="line">      (<span class="name">below</span> bottom top))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square-limit</span> painter n)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">combine4</span> (<span class="name">square-of-four</span> identity flip-horiz</span><br><span class="line">                                  flip-vert rotate180)))</span><br><span class="line">    (<span class="name">combine4</span> (<span class="name">corner-split</span> painter n))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-52-3.png" alt="밖에서 안을 바라보고 있는 아인슈타인" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.54 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-54/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>두 리스트의 원소들이 차례대로 모두 같다면, 두 리스트가 equal? 하다고 정의한다. 보기를 들어, 아래 식의 값은 참이다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">equal?</span></span> &#x27;(this is a list) &#x27;(this is a list))</span><br></pre></td></tr></table></figure>
<p>하지만, 다음 식은 거짓이다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">equal?</span></span> &#x27;(this is a list) &#x27;(this (is a) list))</span><br></pre></td></tr></table></figure>
<p>더 정확히 설명하면, equal?은 eq?를 써서 되돌기 프로시저로 정의내릴 수 있다. 즉, 인자로 받은 a와 b가 서로 eq?한 글자거나, 두 인자가 (car a)와 (car b)가 equal?하고 (cdr a)와 (cdr b)도 equal?한 리스트라면, a와 b는 equal?하다고 볼 수 있다. 이런 생각을 바탕으로 equal? 프로시저를 구현하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>잃어버릴 뻔 했던 되돌면서 검사하는 프로시저의 감을 잃지 않게 해주었습니다.<br />
eq?와 equal? 프로시저의 존재를 알게 되었습니다. 앞으로의 문제들에 많이 쓰일 것 같습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>eqaul? 프로시저의 인자 x, y는 둘다 리스트거나, 둘다 리스트의 마지막이거나, 서로 같거나, 다릅니다. 이를 cond의 술어로 생각하고 프로시저를 짜면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">equal?</span></span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">both</span> proc x y) (<span class="name"><span class="built_in">and</span></span> (<span class="name">proc</span> x) (<span class="name">proc</span> y)))</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name">both</span> null? x y) <span class="literal">#t</span>)</span><br><span class="line">        ((<span class="name">both</span> pair? x y) (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">equal?</span></span> (<span class="name"><span class="built_in">car</span></span> x) (<span class="name"><span class="built_in">car</span></span> y))</span><br><span class="line">                               (<span class="name"><span class="built_in">equal?</span></span> (<span class="name"><span class="built_in">cdr</span></span> x) (<span class="name"><span class="built_in">cdr</span></span> y))))</span><br><span class="line">        ((<span class="name"><span class="built_in">eq?</span></span> x y) <span class="literal">#t</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> <span class="literal">#f</span>)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>문제의 테스트 코드를 실행해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">equal?</span></span> &#x27;(this is a list) &#x27;(this is a list))</span><br><span class="line">(<span class="name"><span class="built_in">equal?</span></span> &#x27;(this is a list) &#x27;(this (is a) list))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-54.png" alt="문제의 테스트 코드를 잘 판단하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.53 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-53/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>실행기에서 다음 식의 값을 구하면 어떤 답이 나오는가?</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;a</span> <span class="symbol">&#x27;b</span> <span class="symbol">&#x27;c</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;george</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">cdr</span></span> &#x27;((x1 x2) (y1 y2)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">cadr</span></span> &#x27;((x1 x2) (y1 y2)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">pair?</span></span> (<span class="name"><span class="built_in">car</span></span> &#x27;(a short list)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">memq</span></span> <span class="symbol">&#x27;red</span> &#x27;((red shoes) (blue socks)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">memq</span></span> <span class="symbol">&#x27;red</span> &#x27;(red shoes blue socks))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>예상한 결과가 나왔다면, 굳이 직접 실행해볼 필요는 없을 것 같습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><img data-src="/img/sicp/chapter-2/exercise-2-53.png" alt="실제로 실행해본 결과" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.57 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-57/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>미분 프로그램의 쓰임새를 늘려서 (둘보다 많은) 여러 마디로 이루어진 덧셈 식과 곱셈 식을 처리할 수 있도록 하자. 그리 되면, 위에서 맨 끝에 든 보기를 다음과 같이 표현할 수 있다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">deriv</span> &#x27;(* x y (+ x <span class="number">3</span>)) <span class="symbol">&#x27;x</span>)</span><br></pre></td></tr></table></figure>
<p>이 문제를 풀 때, deriv 프로그램은 손대지 말고 덧셈 식과 곱셈 식을 표현하는 방법만 바꾸도록 하라. 예컨대, 덧셈 식에서 augend는 첫 번째 마디를 가리키고, addend는 나머지 모든 마디의 덧셈 식을 가리키게 된다.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>리스트의 마지막 원소까지 cdr을 해도 마지막 원소와 nil을 인자로 가지는 리스트가 반환되므로, pair?를 통과한다는 것을 알게 되었습니다.<br />
deriv 프로시저를 일절 수정하지 않고도 멋진 일을 할 수 있다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>기존의 deriv 프로시저는 '(* x y z)같은 인자를 미분하지 못했습니다. 이는 make-multiplication 프로시저가 인자를 두개밖에 받지 못하기 때문에 deriv를 구현할 때도 세개 이상의 인자를 고려하지 않았기 때문입니다. 덧셈과 곱셈의 이런 문제는 augend와 multiplicand를 수정함으로서 해결할 수 있습니다. 간단히 (+ x y z)의 augend를 (+ y z)로 반환하면 되는 것입니다. 구현한 프로시저는 아래와 같습니다.<br />
<span style="color:#999">이미 아시겠지만, cdddr은 cdr을 세번 겹쳐 쓴 것이고, caddr은 cdr을 두번 겹쳐쓴 뒤, car을 사용한 것입니다.</span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">augend</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> (<span class="name">cdddr</span> s))</span><br><span class="line">      (<span class="name">make-sum</span> (<span class="name">caddr</span> s)</span><br><span class="line">                (<span class="name">augend</span> (<span class="name"><span class="built_in">cdr</span></span> s)))</span><br><span class="line">      (<span class="name">caddr</span> s)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplicand</span> p)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">pair?</span></span> (<span class="name">cdddr</span> p))</span><br><span class="line">      (<span class="name">make-product</span> (<span class="name">caddr</span> p)</span><br><span class="line">                    (<span class="name">multiplicand</span> (<span class="name"><span class="built_in">cdr</span></span> p)))</span><br><span class="line">      (<span class="name">caddr</span> p))) </span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 프로시저에서 왜 (pair? (cddr s))가 아닌 (pair? (cdddr s))가 되는지 궁금하신 분들도 계실 겁니다. '(+ x y)의 식을 예로 들겠습니다. '(+ x y)에 cddr을 적용하면, y를 반환하는 것이 아닌, (y)를 반환합니다. 다른 표현방식을 빌리자면, (cons y nil)을 반환하는 것입니다. pair?는 이런 데이터도 참으로 반환하기 때문에 cdddr을 적용해서 nil을 반환하도록 하는 것입니다.<br />
<br/><br/></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">deriv</span> &#x27;(* x y (+ x <span class="number">3</span>)) <span class="symbol">&#x27;x</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-57.png" alt="xy+y(x+3)" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.55 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-55/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Eva Lu Ator는 실행기에서 다음 식을 쳐보았다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">car</span></span> &#x27;<span class="symbol">&#x27;abracadabra</span>)</span><br></pre></td></tr></table></figure>
<p>한데 quote라는 글이 답으로 나와서 깜짝 놀랐다. 어째서 이런 답이 나올까?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>작은 따옴표의 개념에 대해 조금 더 이해도가 높아졌습니다.<br />
작은 따옴표는 실행기에서 quote 프로시저로 해석됩니다.<br />
또한 작은 따옴표 뒤에 오는 괄호는 무조건 리스트로 해석됩니다.<br />
또다른 작은 따옴표로 인해 생기는 quote 괄호도 예외는 아닙니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>책에 따르면 작은 따옴표 '는 뒤에 오는 표현식을 그대로 반환한다는 의미입니다. 그런데 인터넷을 찾아보니, scheme에서 작은따옴표는 quote라는 프로시저로 번역된다는 것을 발견했습니다. 즉 아래의 식들은 전부 같은 의미입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="symbol">&#x27;abracadabra</span></span><br><span class="line">(<span class="name"><span class="built_in">quote</span></span> <span class="symbol">&#x27;abracadabra</span>)</span><br><span class="line">(<span class="name"><span class="built_in">quote</span></span> (<span class="name"><span class="built_in">quote</span></span> abracadabra))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-55.png" alt="작은따옴표가 적용되는 원리" /></p>
<p><br/><br/></p>
<p>그리고 quote는 괄호로 묶인 무엇인가를 인자로 받으면, 무조건 괄호로 묶인 list로 해석합니다. 심지어 (car (quote (list 2)))는 2가 아니라 list를 반환합니다.</p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-55-1.png" alt="2가 아니라 list를 반환하는 기현상" /></p>
<p><br/><br/></p>
<p>그러므로 ''abracadabra 즉, (quote (quote abracadabra))는 (list quote abracadabra)로 해석되며, (car ''abracadabra)는 quote인 것입니다.<br />
<span style="color:#999">하지만 (list quote abracadabra)를 실행기에서 바로 실행하면, 에러가 발생합니다.</span></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.56 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-56/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>앞서 본 것들이 타입이 다른 식을 처리할 수 있게끔, 미분 프로그램의 쓰임새를 어떻게 늘리는지 밝혀라. 보기를 들어, 가음 규칙을 실현할 수 있도록 deriv 프로그램에 새로운 마디를 하나 더하고 그에 알맞은 exponentiation?, base, exponent, make-exponentiation을 정의하라.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mo stretchy="false">(</mo><msup><mi>u</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>n</mi><msup><mi>u</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mfrac><mrow><mi>d</mi><mi>u</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{d(u^n)}{dx} = nu^{n-1}\frac{du}{dx}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>(지수 연산을 나타내는 데는 **같은 글자를 쓸 수 있겠다.) 아울러 ‘무엇의 0승은 1’, '무엇의 1승은 바로 그 무엇’이라는 규칙에 따라, 줄어든 식이 나올 수 있게끔 하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>대수식을 프로시저로 표현하는 법을 연습할 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-기본-프로시저"><a class="markdownIt-Anchor" href="#a-기본-프로시저"></a> a. 기본 프로시저</h3>
<p>책에 적혀있는 문제를 푸는데 필요한 프로시저들입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">variable?</span> x) (<span class="name"><span class="built_in">symbol?</span></span> x)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">same-variable?</span> v1 v2) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name">variable?</span> v1) (<span class="name">variable?</span> v2) (<span class="name"><span class="built_in">eq?</span></span> v1 v2))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-sum</span> a1 a2) </span><br><span class="line"> (<span class="name"><span class="built_in">cond</span></span> ((<span class="name">=number?</span> a1 <span class="number">0</span>) a2) </span><br><span class="line">       ((<span class="name">=number?</span> a2 <span class="number">0</span>) a1) </span><br><span class="line">       ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> a1) (<span class="name"><span class="built_in">number?</span></span> a2)) (<span class="name"><span class="built_in">+</span></span> a1 a2)) </span><br><span class="line">       (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;+</span> a1 a2)))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-product</span> m1 m2) </span><br><span class="line"> (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">or</span></span> (<span class="name">=number?</span> m1 <span class="number">0</span>) (<span class="name">=number?</span> m2 <span class="number">0</span>)) <span class="number">0</span>) </span><br><span class="line">       ((<span class="name">=number?</span> m1 <span class="number">1</span>) m2) </span><br><span class="line">       ((<span class="name">=number?</span> m2 <span class="number">1</span>) m1) </span><br><span class="line">       ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> m1) (<span class="name"><span class="built_in">number?</span></span> m2)) (<span class="name"><span class="built_in">*</span></span> m1 m2)) </span><br><span class="line">       (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;*</span> m1 m2)))) </span><br><span class="line"> </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">=number?</span> exp num) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> exp) (<span class="name"><span class="built_in">=</span></span> exp num))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum?</span> x) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> x) <span class="symbol">&#x27;+</span>))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">addend</span> s) (<span class="name"><span class="built_in">cadr</span></span> s)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">augend</span> s) (<span class="name">caddr</span> s)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product?</span> x) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> x) <span class="symbol">&#x27;*</span>))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplier</span> p) (<span class="name"><span class="built_in">cadr</span></span> p)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplicand</span> p) (<span class="name">caddr</span> p)) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="b-deriv-수정"><a class="markdownIt-Anchor" href="#b-deriv-수정"></a> b. deriv 수정</h3>
<p>우선 지수 연산의 규칙들을 프로시저로 표현해 보겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>f</mi><mtext>  </mtext><mi>b</mi><mi mathvariant="normal">≠</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">if \ \ b \neq 0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>n</mi><msup><mi>b</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mfrac><mrow><mi>d</mi><mi>b</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{d(b^n)}{dx} = nb^{n-1}\frac{db}{dx}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><br/><br/></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">make-product</span> n</span><br><span class="line">              (<span class="name">make-exponentiation</span> b (<span class="name">make-sum</span> n <span class="number">-1</span>))</span><br><span class="line">              (<span class="name">deriv</span> b x))</span><br></pre></td></tr></table></figure>
<p>그런데, make-product는 인자를 두개만 받으므로</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">make-product</span> n</span><br><span class="line">              (<span class="name">make-product</span> (<span class="name">make-exponentiation</span> b (<span class="name">make-sum</span> n <span class="number">-1</span>))</span><br><span class="line">                            (<span class="name">deriv</span> b x))))) </span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 식을 바탕으로 책에 나와있는 deriv 프로시저에 지수연산과 관련된 절을 추가하겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv</span> exp var)   </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">number?</span></span> exp) <span class="number">0</span>) </span><br><span class="line">        ((<span class="name">variable?</span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">if</span></span> (<span class="name">same-variable?</span> exp var) <span class="number">1</span> <span class="number">0</span>)) </span><br><span class="line">        ((<span class="name">sum?</span> exp)</span><br><span class="line">         (<span class="name">make-sum</span> (<span class="name">deriv</span> (<span class="name">addend</span> exp) var)   </span><br><span class="line">                   (<span class="name">deriv</span> (<span class="name">augend</span> exp) var))) </span><br><span class="line">        ((<span class="name">product?</span> exp)</span><br><span class="line">         (<span class="name">make-sum</span></span><br><span class="line">          (<span class="name">make-product</span> (<span class="name">multiplier</span> exp)</span><br><span class="line">                        (<span class="name">deriv</span> (<span class="name">multiplicand</span> exp) var))</span><br><span class="line">          (<span class="name">make-product</span> (<span class="name">deriv</span> (<span class="name">multiplier</span> exp) var)</span><br><span class="line">                        (<span class="name">multiplicand</span> exp)))) </span><br><span class="line">        ((<span class="name">exponentiation?</span> exp) </span><br><span class="line">         (<span class="name"><span class="built_in">let</span></span> ((<span class="name">b</span> (<span class="name">base</span> exp)) (<span class="name">n</span> (<span class="name">exponent</span> exp))) </span><br><span class="line">           (<span class="name">make-product</span> n</span><br><span class="line">                         (<span class="name">make-product</span> (<span class="name">make-exponentiation</span> b (<span class="name">make-sum</span> n <span class="number">-1</span>))</span><br><span class="line">                                       (<span class="name">deriv</span> b var))))) </span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> <span class="string">&quot;unknown expression type&quot;</span>)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="c-대수식-표현"><a class="markdownIt-Anchor" href="#c-대수식-표현"></a> c. 대수식 표현</h3>
<p>그리고 데이터 타입을 표현하는 대수식들을 구현하겠습니다. 거듭제곱의 연산기호로는 &quot;^&quot;를 사용하겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">exponentiation?</span> exp)</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> exp) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> exp) <span class="symbol">&#x27;^</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">base</span> exp) (<span class="name"><span class="built_in">cadr</span></span> exp))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">exponent</span> exp) (<span class="name">caddr</span> exp))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-exponentiation</span> b n)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name">=number?</span> b <span class="number">0</span>) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name">=number?</span> b <span class="number">1</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name">=number?</span> n <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name">=number?</span> n <span class="number">1</span>) b)</span><br><span class="line">        ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> b) (<span class="name"><span class="built_in">number?</span></span> n)) (<span class="name">pow</span> b n))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;^</span> b n))))</span><br></pre></td></tr></table></figure>
<p>앞 절의 내용을 잘 이해했다면 구현하는 데에 크게 무리는 없습니다.</p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-56.png" alt="x^5를 미분하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.58 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-58/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>+와 *같은 연산자를 인자 앞에 두지 않고 수학에서 흔히 쓰던 대로 속가지 쓰기를 할 수 있도록 미분 프로그램을 고치려 한다. 미분 프로스램을 정의할 때 대수식 데이터를 간추려 썼기 때문에 대수식의 표현을 정의하는 연산, 곧 짜맞추개, 고르개, 술어 연산만 손보아도 표현 방식이 다른 대수식을 받아들이도록 만들 수 있다.</p>
<p>a. (x + (3 * (x + (y + 2))))와 같이 속가지 형태로 대수식을 표현했을 때, 이를 어떻게 미분할지 밝혀라. 일을 쉽게 만들기 위해서, +와 *가 받는 인자는 두 개뿐이며 (연산자 우선순위가 헛갈리지 않도록) 모든 식에서 괄호를 빠뜨리지 않는다고 하자.</p>
<p>b. (x + 3 * (x + y + 2))처럼 표준 대수식 쓰기법, 다시 말해서 쓸데없는 괄호를 빼고 덧셈보다 곱셈을 먼저 계산한다는 규칙을 따르기로 하면, 문제가 훨씬 어려워진다. 이런 쓰기법을 따르더라도 미분 프로스램이 제대로 돌아가도록 그에 알맞은 술어, 고르개, 짜맞추개 연산을 설계할 수 있는가?1</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>추상화 장벽을 이용해 다층 설계를 하면, 이런 것까지 할 수 있구나 하는 것을 느끼게하는 문제였습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제 풀이를 위한 기본 프로시저들입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">variable?</span> x) (<span class="name"><span class="built_in">symbol?</span></span> x)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">same-variable?</span> v1 v2) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name">variable?</span> v1) (<span class="name">variable?</span> v2) (<span class="name"><span class="built_in">eq?</span></span> v1 v2))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-sum</span> a1 a2) </span><br><span class="line"> (<span class="name"><span class="built_in">cond</span></span> ((<span class="name">=number?</span> a1 <span class="number">0</span>) a2) </span><br><span class="line">       ((<span class="name">=number?</span> a2 <span class="number">0</span>) a1) </span><br><span class="line">       ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> a1) (<span class="name"><span class="built_in">number?</span></span> a2)) (<span class="name"><span class="built_in">+</span></span> a1 a2)) </span><br><span class="line">       (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;+</span> a1 a2)))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-product</span> m1 m2) </span><br><span class="line"> (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">or</span></span> (<span class="name">=number?</span> m1 <span class="number">0</span>) (<span class="name">=number?</span> m2 <span class="number">0</span>)) <span class="number">0</span>) </span><br><span class="line">       ((<span class="name">=number?</span> m1 <span class="number">1</span>) m2) </span><br><span class="line">       ((<span class="name">=number?</span> m2 <span class="number">1</span>) m1) </span><br><span class="line">       ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> m1) (<span class="name"><span class="built_in">number?</span></span> m2)) (<span class="name"><span class="built_in">*</span></span> m1 m2)) </span><br><span class="line">       (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;*</span> m1 m2)))) </span><br><span class="line"> </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">=number?</span> exp num) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> exp) (<span class="name"><span class="built_in">=</span></span> exp num))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum?</span> x) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> x) <span class="symbol">&#x27;+</span>))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">addend</span> s) (<span class="name"><span class="built_in">cadr</span></span> s)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">augend</span> s) (<span class="name">caddr</span> s)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product?</span> x) </span><br><span class="line"> (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> x) <span class="symbol">&#x27;*</span>))) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplier</span> p) (<span class="name"><span class="built_in">cadr</span></span> p)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplicand</span> p) (<span class="name">caddr</span> p)) </span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv</span> exp var)   </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">number?</span></span> exp) <span class="number">0</span>) </span><br><span class="line">        ((<span class="name">variable?</span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">if</span></span> (<span class="name">same-variable?</span> exp var) <span class="number">1</span> <span class="number">0</span>)) </span><br><span class="line">        ((<span class="name">sum?</span> exp)</span><br><span class="line">         (<span class="name">make-sum</span> (<span class="name">deriv</span> (<span class="name">addend</span> exp) var)   </span><br><span class="line">                   (<span class="name">deriv</span> (<span class="name">augend</span> exp) var))) </span><br><span class="line">        ((<span class="name">product?</span> exp)</span><br><span class="line">         (<span class="name">make-sum</span></span><br><span class="line">          (<span class="name">make-product</span> (<span class="name">multiplier</span> exp)</span><br><span class="line">                        (<span class="name">deriv</span> (<span class="name">multiplicand</span> exp) var))</span><br><span class="line">          (<span class="name">make-product</span> (<span class="name">deriv</span> (<span class="name">multiplier</span> exp) var)</span><br><span class="line">                        (<span class="name">multiplicand</span> exp)))) </span><br><span class="line">        ((<span class="name">exponentiation?</span> exp) </span><br><span class="line">         (<span class="name"><span class="built_in">let</span></span> ((<span class="name">b</span> (<span class="name">base</span> exp)) (<span class="name">n</span> (<span class="name">exponent</span> exp))) </span><br><span class="line">           (<span class="name">make-product</span> n</span><br><span class="line">                         (<span class="name">make-product</span> (<span class="name">make-exponentiation</span> b (<span class="name">make-sum</span> n <span class="number">-1</span>))</span><br><span class="line">                                       (<span class="name">deriv</span> b var))))) </span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> <span class="string">&quot;unknown expression type&quot;</span>)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="a-속가지-형태-대수식"><a class="markdownIt-Anchor" href="#a-속가지-형태-대수식"></a> a. 속가지 형태 대수식</h3>
<p>속가지 형태의 대수식을 프로시저로 해석하는 것은 쉬웠습니다. 평소에는 리스트의 첫번째 원소이던 연산자를 두번째 원소로 바꾼 것 뿐입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">x</span> + (<span class="name">3</span> * (<span class="name">x</span> + (<span class="name">y</span> + <span class="number">2</span>))))</span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">cadr</span></span> x) <span class="symbol">&#x27;+</span>))) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">addend</span> s) (<span class="name"><span class="built_in">car</span></span> s)) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">augend</span> s) (<span class="name">caddr</span> s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product?</span> x) </span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">cadr</span></span> x) <span class="symbol">&#x27;*</span>))) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplier</span> p) (<span class="name"><span class="built_in">car</span></span> p)) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplicand</span> p) (<span class="name">caddr</span> p)) </span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-58-1.png" alt="주어진 식을 알맞게 미분해서 4를 반환하는 모습" /></p>
<h3 id="b-표준-대수식"><a class="markdownIt-Anchor" href="#b-표준-대수식"></a> b. 표준 대수식</h3>
<p>표준 대수식은 앞의 문제보다 훨씬 까다로웠습니다. 문제 해결을 위해 떠올린 저의 아이디어는 이렇습니다.<br />
우선 곱셈보다 덧셈을 기준으로 식을 쪼개기로 했습니다. 사칙연산의 규칙에 의해서 곱셈이 덧셈보다 먼저 계산되므로, 식을 쪼갤 때는 덧셈을 단위로 쪼개야 합니다. 아래의 예시의 (x + y + 2)처럼 괄호 안에 있는 덧셈을 착각해서 쪼개버리면 어떡하지라는 생각을 하실 수도 있습니다. 하지만 상위 식의 입장에서는 (x + y + 2)를 하나의 인자로 인식하기 때문에 걱정할 필요가 없습니다. 곱셈보다 덧셈을 먼저 쪼개는 것은 deriv의 cond식에 product?보다 sum?이 앞에 있으므로 수정할 코드는 없었습니다.<br />
그리고 이번 문제의 가장 까다로운 점은, +라는 기호가 식의 어디에 있는지를 탐색해야 한다는 것입니다. addend와 augend 프로시저의 내부에는 iter를 따로 정의해서 이 +라는 기호를 찾고 앞뒤에 있는 식들을 각각 반환하는 것으로 프로시저를 짰습니다. augend를 짤 때는 주의해야 할 점이 있는데, 자칫 숫자를 반환해야 하는 상황에서 숫자가 담긴 리스트를 반환할 수 있다는 것입니다. <span style="color:#999">ex. (3)</span> 때문에 +연산자의 뒤에 있는 식이 단일 숫자인지 또다른 식인지를 판단하는 기능도 추가해야 합니다.<br />
위의 아이디어를 프로시저로 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">x</span> + <span class="number">3</span> * (<span class="name">x</span> + y + <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> x)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">cdr</span></span> x)) <span class="literal">#f</span>)</span><br><span class="line">          ((<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">cadr</span></span> x) <span class="symbol">&#x27;+</span>) <span class="literal">#t</span>)</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> (<span class="name">iter</span> (<span class="name">cddr</span> x)))))</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name">iter</span> x))) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">addend</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> s result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">cadr</span></span> s) <span class="symbol">&#x27;+</span>)</span><br><span class="line">        result</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">cddr</span> s) (<span class="name"><span class="built_in">append</span></span> result (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">cadr</span></span> s) (<span class="name">caddr</span> s))))))</span><br><span class="line">  (<span class="name">iter</span> s (<span class="name"><span class="built_in">car</span></span> s))) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">augend</span> s)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> s)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">cadr</span></span> s) <span class="symbol">&#x27;+</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> (<span class="name">cdddr</span> s))</span><br><span class="line">            (<span class="name">caddr</span> s)</span><br><span class="line">            (<span class="name">cddr</span> s))</span><br><span class="line">        (<span class="name">iter</span> (<span class="name">cddr</span> s))))</span><br><span class="line">  (<span class="name">iter</span> s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">product?</span> x) </span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> x) (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">cadr</span></span> x) <span class="symbol">&#x27;*</span>))) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplier</span> p) (<span class="name"><span class="built_in">car</span></span> p)) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplicand</span> p)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> (<span class="name">cdddr</span> p))</span><br><span class="line">      (<span class="name">caddr</span> p)</span><br><span class="line">      (<span class="name">cddr</span> p)))  </span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-58-2.png" alt="주어진 식을 알맞게 미분해서 4를 반환하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.59 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-59/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>차례 없는 리스트를 써서 집합을 표현한다고 할 때, union-set 연산을 구현하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>합집합 프로시저를 어떻게 구현해야 하는지에 대한 생각을 하게 해주었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제 풀이에 필요한 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">element-of-set?</span> x set)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> set) <span class="literal">#f</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">equal?</span></span> x (<span class="name"><span class="built_in">car</span></span> set)) <span class="literal">#t</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">element-of-set?</span> x (<span class="name"><span class="built_in">cdr</span></span> set)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>책에서 intersection-set을 정의한 것과 비슷하게 재귀를 통해 합집합을 정의할 수 있습니다. set1과 set2의 합집합은, (car set1)이 set2에 포함되어 있으면, (cdr set1)과 set2의 합집합과 같고, 포함되어 있지 않으면, (cdr set1)과 (cons (car set1) set2)의 합집합과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">union-set</span> s1 s2)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> s1) s2)</span><br><span class="line">        ((<span class="name"><span class="built_in">null?</span></span> s2) s1)</span><br><span class="line">        ((<span class="name">element-of-set?</span> (<span class="name"><span class="built_in">car</span></span> s1) s2)</span><br><span class="line">         (<span class="name">union-set</span> (<span class="name"><span class="built_in">cdr</span></span> s1) s2))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">union-set</span> (<span class="name"><span class="built_in">cdr</span></span> s1)</span><br><span class="line">                         (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> s1) s2)))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-59.png" alt="합집합 (1 2 3 4 5 6)을 반환하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.61 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-61/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>차례 매긴 리스트 표현에 따라 adjoin-set을 구현하라. element-of-set?와 비슷하게, 차례 없는 표현 방식과 견주어 그 계산 단계가 평균하여 반으로 줄어들도록 프로시저를 짜는데, 차례 매김 표현 방식의 좋은 점이 어떻게 도움이 되는지 보여라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>정렬된 인자를 처리할때, 프로시저를 짜기 편할 뿐더러 실행 시간도 줄일 수 있음을 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>집합의 원소가 정렬되어 있으므로, 책에서 설명한 element-of-set?과 마찬가지로 순차적으로 검색하면서 x보다 큰 원소가 있는 지점을 찾으면 됩니다. 이때 x보다 작은 값들과 x보다 큰 값들을 pre와 post에 저장하고 iter를 돌면 쉽게 구현할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">adjoin-set</span> x set)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> x pre post)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> post) (<span class="name"><span class="built_in">append</span></span> (<span class="name"><span class="built_in">append</span></span> pre (<span class="name"><span class="built_in">list</span></span> x)) post))</span><br><span class="line">          ((<span class="name"><span class="built_in">&lt;</span></span> x (<span class="name"><span class="built_in">car</span></span> post)) (<span class="name"><span class="built_in">append</span></span> (<span class="name"><span class="built_in">append</span></span> pre (<span class="name"><span class="built_in">list</span></span> x)) post))</span><br><span class="line">          ((<span class="name"><span class="built_in">=</span></span> x (<span class="name"><span class="built_in">car</span></span> post)) set)</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> (<span class="name">iter</span> x (<span class="name"><span class="built_in">append</span></span> pre (<span class="name"><span class="built_in">list</span></span> (<span class="name"><span class="built_in">car</span></span> post))) (<span class="name"><span class="built_in">cdr</span></span> post)))))</span><br><span class="line">  (<span class="name">iter</span> x &#x27;() set))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br />
이 프로시저는 set을 순차적으로 검색하므로 가장 큰 값을 원소로 넣는다면, 프로시저는 n시간이 걸릴 것입니다. 반대로 가장 작은 값을 원소로 넣는다면 1만큼 시간이 걸릴것입니다. 즉 평균적으로 n/2의 시간이 걸린다고 할 수 있으므로, 이 프로시저의 시간 복잡도는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>입니다. 기존의 프로시저도 시간복잡도 상으로는 같은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이지만, 항상 n만큼의 시간이 걸립니다. 반면 이번에 만든 프로시저는 평균적으로 n/2시간이 걸리므로 이번에 만든 프로시저가 좀더 성능이 좋다고 할 수 있습니다.</p>
<p><br/><br/></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> s1 &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">adjoin-set</span> <span class="number">7</span> s1)</span><br><span class="line">(<span class="name">adjoin-set</span> <span class="number">3</span> s1)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-61.png" alt="예외처리까지 완벽한 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.6 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-6/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>프로시저로 쌍을 나타낼 수 있다는 것이 황당하지 않았다면, 프로시저를 다룰 수 있는 언어에서 (양의 정수만 가지고 이야기한다면) 수의 표현을 빌리지 않고, 0과 더하기 1을 다음과 같이 프로시저 연산으로 나타낼 수 있다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> zero (<span class="name"><span class="built_in">lambda</span></span> (f) (<span class="name"><span class="built_in">lambda</span></span> (x) x)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">add-1</span> n)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (f) (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">f</span> ((<span class="name">n</span> f) x)))))</span><br></pre></td></tr></table></figure>
<p>이런 표현 방법을 처치의 수<sup>Church numeral</sup>라 하는데, 이는 람다계산법을 처음 만들어 낸 논리학자 엘렌조 처치의 이름을 딴 것으로 알려져 있다. one과 two를 zero와 add-1을 쓰지 않고 곧바로 정의해 보라. (귀띔: 맞바꿈계산법으로 (add-1 zero)를 풀어 보라.) 덧셈 프로시저 +를 (add-1을 여러번 되풀이하지 말고) 곧바로 정의하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>문제를 풀기 위해 람다 대수를 따로 공부했습니다.<br />
오버헤드가 조금 큰 감이 있지만, 배우는 것이 많았습니다.<br />
다른 함수형 프로그래밍의 이론적 지식을 공부할 떄, 분명 도움이 될 것입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<blockquote>
<p>이 문제를 정확히 이해하기 위해서는 람다 대수에 관한 지식이 조금 필요합니다.<br />
이 문제를 위해 처치의 수를 간단히 설명해 보겠습니다.<br />
람다대수에서 모든 것은 함수입니다.<br />
심지어 숫자나 논리연산같은 것들도 모두 함수입니다.<br />
람다대수에서 1은 λsz.s(z)라는 함수로 표현하기로 약속했습니다.<br />
s와 z를 인자로 받아서 s(z)를 반환하겠다는 뜻입니다.<br />
비슷한 원리로 2는 λsz.s(s(z))이고 3은 λsz.s(s(s(z)))입니다.<br />
즉, z라는 인자에 s함수를 몇번 적용하는지가 그 숫자가 나타내는 값이라고 할 수 있습니다.<br />
0을 함수로 나타내면 문제에서 본 것처럼 (lambda (f) (lambda (x) x))입니다.<br />
첫번째 인자인 f를 두번째 인자인 x에 0번 적용하겠다는 뜻입니다.<br />
자세한 설명이 필요하신 분들은 <a href="/functional-programming/introduction-to-lambda-calculus/">람다 대수 입문 번역</a>을 읽어주시기 바랍니다</p>
</blockquote>
<h3 id="1-one과-two"><a class="markdownIt-Anchor" href="#1-one과-two"></a> 1. one과 two</h3>
<p>(add-1 zero)를 정리한 함수인 one은 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">lambda</span></span> (f) (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">f</span> x)))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>즉, 1을 나타내는 함수 one은 (lambda (f) (lambda (x) (f x)))입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>n</mi><mi>e</mi><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>m</mi><mi>b</mi><mi>d</mi><mi>a</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>m</mi><mi>b</mi><mi>d</mi><mi>a</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>f</mi><mtext> </mtext><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">one = (lambda (f) \ (lambda (x) \ (f \  x)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>2를 나타내는 함수 two는 (add-1 one)으로 구할 수 있습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>w</mi><mi>o</mi><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>m</mi><mi>b</mi><mi>d</mi><mi>a</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>l</mi><mi>a</mi><mi>m</mi><mi>b</mi><mi>d</mi><mi>a</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>f</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>f</mi><mtext> </mtext><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">two = (lambda (f) \ (lambda (x) \ (f \ (f \ x))))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>앞서 설명한 것처럼 두 인자 f와 x를 받아서 x에 f를 몇번 적용하는 지가 람대대수의 숫자표현입니다.</p>
<h3 id="2-더하기-함수"><a class="markdownIt-Anchor" href="#2-더하기-함수"></a> 2. 더하기 함수</h3>
<p>람다대수에서는 숫자도 함수라고 약속했습니다.<br />
람다대수로 나타낸 숫자는 함수 f와 x를 인자로 받아서 x에 f를 숫자의 크기만큼 적용하는 함수입니다.<br />
이 원리를 이용하면 더하기 함수를 짜는 힌트를 얻을 수 있습니다.<br />
n+m을 계산하는 것은, 두번째 인자로 받은 x에 f를 n번 적용하고나서 다시 m번 적용하는 것과 같습니다.<br />
다시말하면 (n f)를 x에 적용한 후에 다시 (m f)를 적용하는 것입니다.<br />
(n f)는 f를 n번 적용하는 함수를 뜻하기 때문입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mi>m</mi><mo>=</mo><mo stretchy="false">(</mo><mi>f</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>f</mi><mo>⋯</mo><mo stretchy="false">(</mo><mi>f</mi><mtext> </mtext><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n+m = (f \ (f ⋯ (f \ x)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<center>f의 갯수는 n+m개</center>
<p><br/><br/></p>
<p>그러므로 더하기 함수를 구현하면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">+</span></span> n m)</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (f)</span><br><span class="line">    (<span class="name"><span class="built_in">lambda</span></span> (z)</span><br><span class="line">      ((<span class="name">n</span> f) ((<span class="name">m</span> f) z))))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
        <tag>함수형 프로그래밍</tag>
        <tag>람다 대수</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.62 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-62/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>차례 매긴 리스트로 집합을 표현하여, 그 계산 단계가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>으로 자라나도록 union-set 프로시저를 구현하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>인자로 받은 set1과 set2가 null?인지부터 검사하고 let을 사용해야 한다는 것을 다시 또 다시 배웠습니다.<br />
자칫 let 안에서 nil값을 계산해서 오류가 생길 수 있기 때문입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>책에 나와있는 intersetcion-set을 참고하면 구현하는 것이 그렇게 어렵지는 않습니다. 확실히 정렬이 되어 있는 집합은 알고리즘을 짤때도 생각할 거리가 많이 적었습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">union-set</span> set1 set2)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> set1) set2)</span><br><span class="line">        ((<span class="name"><span class="built_in">null?</span></span> set2) set1)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">let</span></span> ((<span class="name">x1</span> (<span class="name"><span class="built_in">car</span></span> set1))</span><br><span class="line">               (<span class="name">x2</span> (<span class="name"><span class="built_in">car</span></span> set2)))</span><br><span class="line">           (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> set1) set2)</span><br><span class="line">                 ((<span class="name"><span class="built_in">null?</span></span> set2) set1)</span><br><span class="line">                 ((<span class="name"><span class="built_in">=</span></span> x1 x2) (<span class="name"><span class="built_in">cons</span></span> x1</span><br><span class="line">                            (<span class="name">union-set</span> (<span class="name"><span class="built_in">cdr</span></span> set1) (<span class="name"><span class="built_in">cdr</span></span> set2))))</span><br><span class="line">                 ((<span class="name"><span class="built_in">&gt;</span></span> x1 x2) (<span class="name"><span class="built_in">cons</span></span> x2</span><br><span class="line">                            (<span class="name">union-set</span> set1 (<span class="name"><span class="built_in">cdr</span></span> set2))))</span><br><span class="line">                 ((<span class="name"><span class="built_in">&lt;</span></span> x1 x2) (<span class="name"><span class="built_in">cons</span></span> x1</span><br><span class="line">                            (<span class="name">union-set</span> set2 (<span class="name"><span class="built_in">cdr</span></span> set1)))))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> s1 &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> s2 &#x27;(<span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">union-set</span> s1 s2)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-62.png" alt="(1 2 3 4 5 6 7 8 9)" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.60 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-60/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>앞에서는 똑같은 원소가 없는 리스트를 써서 집합을 표현한다고 하였다. 이번에는 리스트에 똑같은 원소가 나와도 된다고 치자. 그렇다면 집합 {1, 2, 3}을 리스트 (2 3 2 1 3 2 2)로 표현할 수도 있다는 말이다. 이런 표현 방식을 따르게끔 element-of-set?, adjoin-set, union-set, intersection-set 프로시저를 설계해 보자. 집합 속에 똑같은 원소가 있을 때와 없을 때, 서로 해당하는 연산들의 효율을 견주면 어떠한가? 똑같은 원소가 없는 경우보다, 이런 표현 방식에 더 잘 맞아떨어지는 문제가 있는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>집합의 중복을 없애지 않으면, 얼마나 게으르게 코드를 짤 수 있는지 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>원소의 크기 순서도 고려하지 않고, 중복도 고려하지 않는다면, 짜맞추개와 고르개를 구현하는 입장에서 이보다 편할 수는 없습니다. element-of-set?과 intersection은 집합의 두 표현방법 모두에 허용되는 프로시저이므로, 기존의 프로시저를 그대로 사용하면 됩니다. 반면에 adjoint와 union은 생각나는 대로 적어서 쉽게 구현할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">element-of-set?</span> x set)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> set) <span class="literal">#f</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">equal?</span></span> x (<span class="name"><span class="built_in">car</span></span> set)) <span class="literal">#t</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">element-of-set?</span> x (<span class="name"><span class="built_in">cdr</span></span> set)))))</span><br><span class="line">    </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">intersection-set</span> set1 set2)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">null?</span></span> set1) (<span class="name"><span class="built_in">null?</span></span> set2)) &#x27;())</span><br><span class="line">        ((<span class="name">element-of-set?</span> (<span class="name"><span class="built_in">car</span></span> set1) set2)</span><br><span class="line">         (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> set1)</span><br><span class="line">               (<span class="name">intersection-set</span> (<span class="name"><span class="built_in">cdr</span></span> set1) set2)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">intersection-set</span> (<span class="name"><span class="built_in">cdr</span></span> set1) set2))))</span><br><span class="line">    </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">adjoin-set</span> x set)</span><br><span class="line">  (<span class="name"><span class="built_in">cons</span></span> x set))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">union-set</span> set1 set2)</span><br><span class="line">  (<span class="name"><span class="built_in">append</span></span> set1 set2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>원래의 합집합과 교집합 프로시저는 시간 복잡도가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>인 프로시저입니다. 하지만 새로 만든 프로시저는 시간복잡도가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>과 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>입니다. 이는 실행 시간의 큰 차이를 불러올 것입니다. 하지만 모든 탐욕적 알고리즘이 그렇듯, 집합 연산으로 크기를 불릴 때는 쉽지만 그만큼 커진 집합으로 무엇인가 다른 연산을 하기에는 오버헤드가 커집니다. 그러므로 중복을 고려하지 않고 집합을 표현하는 방식은, 특정 원소를 찾거나 교집합 연산을 많이 하는 프로시저에서는 효율이 떨어집니다. 대신 합집합과 원소 하나를 추가하는 연산이 많은 프로시저에서는 좋은 성능을 보일 수 있을 것 같습니다.</p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-60.png" alt="만든 프로시저가 모두 정상작동하는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.63 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-63/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>아래 두 프로시저는 두 갈래 나무를 리스트로 바꾼다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-&gt;list-1</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> tree)</span><br><span class="line">      &#x27;()</span><br><span class="line">    (<span class="name"><span class="built_in">append</span></span> (<span class="name">tree-&gt;list-1</span> (<span class="name">left-branch</span> tree))</span><br><span class="line">            (<span class="name"><span class="built_in">cons</span></span> (<span class="name">entry</span> tree)</span><br><span class="line">                    (<span class="name">tree-&gt;list-1</span> (<span class="name">right-branch</span> tree))))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-&gt;list-2</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">copy-to-list</span> tree result-list)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> tree)</span><br><span class="line">        result-list</span><br><span class="line">        (<span class="name">copy-to-list</span> (<span class="name">left-branch</span> tree)</span><br><span class="line">                      (<span class="name"><span class="built_in">cons</span></span> (<span class="name">entry</span> tree)</span><br><span class="line">                            (<span class="name">copy-to-list</span> (<span class="name">right-branch</span> tree)</span><br><span class="line">                                          result-list)))))</span><br><span class="line">  (<span class="name">copy-to-list</span> tree &#x27;()))  </span><br></pre></td></tr></table></figure>
<p>a. 두 프로시저는 어떤 나무를 집어 넣어도 같은 결과를 내는가? 아니라면, 그 결과가 어떻게 다른가? 그림 2.16의 나무를 집어 넣을 때, 두 프로시저는 어떤 리스트를 내놓는가?</p>
<p>b. 원소 수가 n인 균형 잡힌 나무를 리스트로 바꾼다고 할 때, 위 프로시저들이 밟아야 할 계산 단계는 똑같은 자람 차수를 보이는가? 그게 아니라면, 계산 단계가 더 느리게 자라나는 쪽은 어느 쪽인가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>append를 cons로 바꾸는 것 만으로 시간복잡도가 크게 달라지는 것을 알았습니다.<br />
시간복잡도를 구할 때는 노트에 써서 하나 하나 계산하는 것이 가장 좋은 방법이라는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">entry</span> tree) (<span class="name"><span class="built_in">car</span></span> tree))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">left-branch</span> tree) (<span class="name"><span class="built_in">cadr</span></span> tree))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">right-branch</span> tree) (<span class="name">caddr</span> tree))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="a-두-프로시저의-결과"><a class="markdownIt-Anchor" href="#a-두-프로시저의-결과"></a> a. 두 프로시저의 결과</h3>
<p>책의 그림 2.16에 있는 트리들을 코드로 구현하면 아래와 같습니다. make-tree를 사용할 수도 있지만, 지금은 간단하게 따옴표 표기로 표현했습니다. 여기서 책을 꼼꼼히 잘 읽었다면 마지막 이파리의 원소를 (n () ())꼴로 표기하는 것을 눈치챌 수 있을 것입니다. 저는 별로 꼼꼼히 읽지 못해서 그만 n으로 표기하는 실수를 범했었습니다. 여러분은 그러지 않으셨기를 바랍니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> t1 &#x27;(<span class="number">7</span> (<span class="number">3</span> (<span class="number">1</span> () ())</span><br><span class="line">                  (<span class="number">5</span> () ()))</span><br><span class="line">               (<span class="number">9</span> ()</span><br><span class="line">                  (<span class="number">11</span> () ()))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> t2 &#x27;(<span class="number">3</span> (<span class="number">1</span> () ())</span><br><span class="line">               (<span class="number">7</span> (<span class="number">5</span> () ())</span><br><span class="line">                  (<span class="number">9</span> ()</span><br><span class="line">                     (<span class="number">11</span> () ())))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> t3 &#x27;(<span class="number">5</span> (<span class="number">3</span> (<span class="number">1</span> () ())</span><br><span class="line">                  ())</span><br><span class="line">               (<span class="number">9</span> (<span class="number">7</span> () ())</span><br><span class="line">                  (<span class="number">11</span> () ()))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">tree-&gt;list-1</span> t1)</span><br><span class="line">(<span class="name">tree-&gt;list-2</span> t1)</span><br><span class="line"></span><br><span class="line">(<span class="name">tree-&gt;list-1</span> t2)</span><br><span class="line">(<span class="name">tree-&gt;list-2</span> t2)</span><br><span class="line"></span><br><span class="line">(<span class="name">tree-&gt;list-1</span> t3)</span><br><span class="line">(<span class="name">tree-&gt;list-2</span> t3)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-63.png" alt="모두 동일한 결과를 보이는 모습" /><br />
모든 트리가 동일한 결과를 보이는 모습입니다.</p>
<p><br/><br/></p>
<h3 id="b-균형잡힌-트리"><a class="markdownIt-Anchor" href="#b-균형잡힌-트리"></a> b. 균형잡힌 트리</h3>
<p>우선 tree-&gt;list-1부터 살펴보겠습니다. 이 프로시저는 각 엔트리에 대해서 (왼쪽 가지 리스트, 엔트리, 오른쪽 가지 리스트) 순으로 리스트를 엮어 반환하는 프로시저입니다. 여기서 발견할 수 있는 점은, 트리에 있는 모든 원소에 이 프로시저가 한번씩은 적용된다는 것입니다. 심지어 노드의 끝마디에 붙어있는 '()에까지 프로시저를 적용한다는 것을 알 수 있습니다. 그러므로 이 프로시저의 총 실행 횟수는 전체 원소의 갯수 + 전체 '()의 갯수입니다. 그런데, 한 트리의 원소의 갯수가 같다면 '()의 갯수도 같다는 것을 쉽게 알 수 있습니다. 어떤 트리에서 하나의 원소가 자리를 옮기면, 그 자리에 nil이 하나 생기고, 원래 nil이 있던 자리에 새로운 원소가 오므로 전체 nil의 개수는 같습니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-63-1.png" alt="원소 하나가 자리를 옮겨도 nil의 개수는 똑같다." /></p>
<p><br/><br/></p>
<p>tree-&gt;list-2도 마찬가지로 모든 엔트리와 nil에 적용되는 프로시저이므로 실행 횟수는 동일합니다. 이를 확실히 알아보기 위해서 두 프로시저를 다음과 같이 추가해서, 프로시저가 실행될 때마다 1을 출력하도록 해보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-&gt;list-1</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;1&quot;</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> tree)</span><br><span class="line">      &#x27;()</span><br><span class="line">    (<span class="name"><span class="built_in">append</span></span> (<span class="name">tree-&gt;list-1</span> (<span class="name">left-branch</span> tree))</span><br><span class="line">            (<span class="name"><span class="built_in">cons</span></span> (<span class="name">entry</span> tree)</span><br><span class="line">                    (<span class="name">tree-&gt;list-1</span> (<span class="name">right-branch</span> tree))))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-&gt;list-2</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">copy-to-list</span> tree result-list)</span><br><span class="line">    (<span class="name"><span class="built_in">display</span></span> <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> tree)</span><br><span class="line">        result-list</span><br><span class="line">        (<span class="name">copy-to-list</span> (<span class="name">left-branch</span> tree)</span><br><span class="line">                      (<span class="name"><span class="built_in">cons</span></span> (<span class="name">entry</span> tree)</span><br><span class="line">                            (<span class="name">copy-to-list</span> (<span class="name">right-branch</span> tree)</span><br><span class="line">                                          result-list)))))</span><br><span class="line">  (<span class="name">copy-to-list</span> tree &#x27;())) </span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-63-2.png" alt="똑같은 13번의 1을 출력하는 모습" /></p>
<p><br/><br/></p>
<p>그러므로 두 프로시저의 실행 횟수는 동일합니다. 하지만, 그렇다고 해서 자람 차수가 동일한 것은 아닙니다. 1번 프로시저는 엮어내는 방식으로 append를 사용하고 있고, 2번 프로시저는 cons를 사용하고 있습니다.</p>
<p>append는 n이 커짐에 따라 자람 차수가 커지는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>의 프로시저입니다. 그리고 여기서 n은 append의 첫번째 인자를 제외한 나머지 인자의 원소들의 갯수를 의미합니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>을 프로시저를 실행하는데 필요한 시간이라고 하겠습니다.<br />
1번 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=2T(n/2) + Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>을 만족한다고 볼 수 있습니다.<br />
2번 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=2T(n/2) + Θ(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>을 만족한다고 볼 수 있습니다.</p>
<p>아래의 그림은 1번 프로시저의 시간복잡도를 구하는 그림입니다. 각 단계에서 append 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>의 시간복잡도를 차지합니다. 그리고 단계의 크기가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>이므로, 이 둘을 곱하면 1번 프로시저의 시간복잡도를 알 수 있습니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-63-3.png" alt="1번 프로시저에서 append 프로시저가 얼마만큼을 차지하는지 계산한 그림" /></p>
<p>즉, 1번 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>만큼 실행되므로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>의 시간복잡도를 가집니다.</p>
<p>2번 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>인 cons를 사용하므로 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>의 시간복잡도를 가집니다.</p>
<p><br/><br/></p>
<p>난해한 설명 읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.64 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-64/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음에 나오는 프로시저 list-&gt;tree는 차례 매긴 리스트를 균형 잡힌 두 갈래 나무로 바꾼다. 도우미 프로시저<sup>helper procedure</sup> partial-tree는 정수 n과, 원소 수가 적어도 n개인 리스트를 인자로 받아서, 그 리스트의 처음 n개 원소로 균형 잡힌 나무를 만든다. partial-tree는 (cons로 만든) 쌍을 결과로 내놓는데, 이 쌍의 car는 새로 만든 나무를 가리키고 그 cdr는 그 나무에서 빠진 원소들의 리스트를 가리킨다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">list-&gt;tree</span> elements)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> (<span class="name">partial-tree</span> elements (<span class="name"><span class="built_in">length</span></span> elements))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">partial-tree</span> elts n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> &#x27;() elts)</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">left-size</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) <span class="number">2</span>)))</span><br><span class="line">        (<span class="name"><span class="built_in">let</span></span> ((<span class="name">left-result</span> (<span class="name">partial-tree</span> elts left-size)))</span><br><span class="line">          (<span class="name"><span class="built_in">let</span></span> ((<span class="name">left-tree</span> (<span class="name"><span class="built_in">car</span></span> left-result))</span><br><span class="line">                (<span class="name">non-left-elts</span> (<span class="name"><span class="built_in">cdr</span></span> left-result))</span><br><span class="line">                (<span class="name">right-size</span> (<span class="name"><span class="built_in">-</span></span> n (<span class="name"><span class="built_in">+</span></span> left-size <span class="number">1</span>))))</span><br><span class="line">            (<span class="name"><span class="built_in">let</span></span> ((<span class="name">this-entry</span> (<span class="name"><span class="built_in">car</span></span> non-left-elts))</span><br><span class="line">                  (<span class="name">right-result</span> (<span class="name">partial-tree</span> (<span class="name"><span class="built_in">cdr</span></span> non-left-elts)</span><br><span class="line">                                              right-size)))</span><br><span class="line">              (<span class="name"><span class="built_in">let</span></span> ((<span class="name">right-tree</span> (<span class="name"><span class="built_in">car</span></span> right-result))</span><br><span class="line">                    (<span class="name">remaining-elts</span> (<span class="name"><span class="built_in">cdr</span></span> right-result)))</span><br><span class="line">                (<span class="name"><span class="built_in">cons</span></span> (<span class="name">make-tree</span> this-entry left-tree right-tree)</span><br><span class="line">                      remaining-elts))))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>a. partial-tree 프로시저가 어떻게 돌아가는지 되도록 깔끔하고 짧은 문장으로 설명해 보라. 리스트 (1 3 5 7 9 11)를 list-&gt;tree에 인자로 넘길 때, 어떤 나무가 나오는지 그려 보라.</p>
<p>b. list-&gt;tree로 원소 수가 n인 리스트를 바꾸는 데 드는 계산 단계는 어떤 자람 차수를 보이는가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>let을 다중으로 써서 난해한 프로시저를 해석하는 능력이 조금 상승했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-동작원리"><a class="markdownIt-Anchor" href="#a-동작원리"></a> a. 동작원리</h3>
<p>(quotient는 나눗셈의 몫을 의미합니다.)</p>
<p>partial-tree 프로시저의 반환값은, 인자로 받은 elts에서 왼쪽에서 n만큼의 원소를 트리로 만든뒤, 아래의 리스트를 반환하는 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">&#x27;(방금만든_트리 </span><br><span class="line">  elts에서_남은_원소_1 </span><br><span class="line">  elts에서_남은_원소_2 </span><br><span class="line">  ...)</span><br></pre></td></tr></table></figure>
<p>트리를 만드는 과정에서 left-tree를 partial-tree로 만들면, partial-tree의 첫번째 원소가 left-tree이고 나머지 원소가 남은 엘리먼트들이므로, 이 엘리먼트들로 right-tree를 만들어 병합해가는 원리입니다.<br />
즉, 이 프로시저는 반환값인 리스트의 첫번째 원소에 넣을 트리를 만들기 위해, 리스트의 나머지 부분들에서 조금씩 원소를 가져오는 메커니즘을 가진 프로시저입니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-64.png" alt="발로 그린듯한 트리" /></p>
<h3 id="b-자람차수"><a class="markdownIt-Anchor" href="#b-자람차수"></a> b. 자람차수</h3>
<p>T(n)을 n을 인자로 가지는 partial-tree의 자람차수라고 하겠습니다. T(n)으로부터 T(2n)을 유추할 수 있습니다. T(2n)은 T(n)을 왼쪽 트리와 오른쪽 트리에 사용하므로, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mo>×</mo><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(2n)=2×T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이 성립합니다.<br />
즉 partial-tree의 자람차수는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>입니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.65 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-65/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-2/exercise-2-63">연습문제 2.63</a>과 <a href="/sicp/chapter-2/exercise-2-64">연습문제 2.64</a>에서 얻은 결과를 빌려서, (균형잡힌) 두 갈래 나무로 집합을 표현하였을 때, 집합연산 union-set과 intersection-set의 자람차수가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>이 되도록 구현하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>프로시저를 구성하는 개별 프로시저의 시간 복잡도를 낮추는 방법으로 전체 프로시저의 시간 복잡도를 많이 낮출 수 있다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><a href="/sicp/chapter-2/exercise-2-63">연습문제 2.63</a>과 <a href="/sicp/chapter-2/exercise-2-64">연습문제 2.64</a> 그리고 <a href="/sicp/chapter-2/exercise-2-62">연습문제 2.62</a>에서 얻은 결과물입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-&gt;list</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">copy-to-list</span> tree result-list)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> tree)</span><br><span class="line">        result-list</span><br><span class="line">        (<span class="name">copy-to-list</span> (<span class="name">left-branch</span> tree)</span><br><span class="line">                      (<span class="name"><span class="built_in">cons</span></span> (<span class="name">entry</span> tree)</span><br><span class="line">                            (<span class="name">copy-to-list</span> (<span class="name">right-branch</span> tree)</span><br><span class="line">                                          result-list)))))</span><br><span class="line">  (<span class="name">copy-to-list</span> tree &#x27;())) </span><br><span class="line">  </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">list-&gt;tree</span> elements)</span><br><span class="line">  (<span class="name"><span class="built_in">car</span></span> (<span class="name">partial-tree</span> elements (<span class="name"><span class="built_in">length</span></span> elements))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">partial-tree</span> elts n)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>)</span><br><span class="line">      (<span class="name"><span class="built_in">cons</span></span> &#x27;() elts)</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">left-size</span> (<span class="name"><span class="built_in">quotient</span></span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) <span class="number">2</span>)))</span><br><span class="line">        (<span class="name"><span class="built_in">let</span></span> ((<span class="name">left-result</span> (<span class="name">partial-tree</span> elts left-size)))</span><br><span class="line">          (<span class="name"><span class="built_in">let</span></span> ((<span class="name">left-tree</span> (<span class="name"><span class="built_in">car</span></span> left-result))</span><br><span class="line">                (<span class="name">non-left-elts</span> (<span class="name"><span class="built_in">cdr</span></span> left-result))</span><br><span class="line">                (<span class="name">right-size</span> (<span class="name"><span class="built_in">-</span></span> n (<span class="name"><span class="built_in">+</span></span> left-size <span class="number">1</span>))))</span><br><span class="line">            (<span class="name"><span class="built_in">let</span></span> ((<span class="name">this-entry</span> (<span class="name"><span class="built_in">car</span></span> non-left-elts))</span><br><span class="line">                  (<span class="name">right-result</span> (<span class="name">partial-tree</span> (<span class="name"><span class="built_in">cdr</span></span> non-left-elts)</span><br><span class="line">                                              right-size)))</span><br><span class="line">              (<span class="name"><span class="built_in">let</span></span> ((<span class="name">right-tree</span> (<span class="name"><span class="built_in">car</span></span> right-result))</span><br><span class="line">                    (<span class="name">remaining-elts</span> (<span class="name"><span class="built_in">cdr</span></span> right-result)))</span><br><span class="line">                (<span class="name"><span class="built_in">cons</span></span> (<span class="name">make-tree</span> this-entry left-tree right-tree)</span><br><span class="line">                      remaining-elts))))))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">union-set</span> set1 set2)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> set1) set2)</span><br><span class="line">        ((<span class="name"><span class="built_in">null?</span></span> set2) set1)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name"><span class="built_in">let</span></span> ((<span class="name">x1</span> (<span class="name"><span class="built_in">car</span></span> set1))</span><br><span class="line">               (<span class="name">x2</span> (<span class="name"><span class="built_in">car</span></span> set2)))</span><br><span class="line">           (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> set1) set2)</span><br><span class="line">                 ((<span class="name"><span class="built_in">null?</span></span> set2) set1)</span><br><span class="line">                 ((<span class="name"><span class="built_in">=</span></span> x1 x2) (<span class="name"><span class="built_in">cons</span></span> x1</span><br><span class="line">                            (<span class="name">union-set</span> (<span class="name"><span class="built_in">cdr</span></span> set1) (<span class="name"><span class="built_in">cdr</span></span> set2))))</span><br><span class="line">                 ((<span class="name"><span class="built_in">&gt;</span></span> x1 x2) (<span class="name"><span class="built_in">cons</span></span> x2</span><br><span class="line">                            (<span class="name">union-set</span> set1 (<span class="name"><span class="built_in">cdr</span></span> set2))))</span><br><span class="line">                 ((<span class="name"><span class="built_in">&lt;</span></span> x1 x2) (<span class="name"><span class="built_in">cons</span></span> x1</span><br><span class="line">                            (<span class="name">union-set</span> set2 (<span class="name"><span class="built_in">cdr</span></span> set1)))))))))</span><br></pre></td></tr></table></figure>
<h3 id="a-union-set"><a class="markdownIt-Anchor" href="#a-union-set"></a> a. union-set</h3>
<p>제가 떠올린 아이디어는 이렇습니다. 트리를 집합연산을 하기 편하게 list로 바꾼뒤, 합집합 연산을 합니다. 또 이 합집합을 다시 트리로 바꾸면 문제는 해결됩니다. 트리를 list로 바꾸는 프로시저는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>으로 해결할 수 있습니다. 리스트가 정렬된 리스트이므로 합집합 연산도 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>으로 해결할 수 있습니다. 리스트를 다시 트리로 바꾸는 프로시저도 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>으로 해결할 수 있습니다. 즉, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>의 연산을 연속으로 3번 수행하므로, 전체 과정도 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>의 시간복잡도를 따른다고 할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">union-set-tree</span> s1 s2)</span><br><span class="line">  (<span class="name">list-&gt;tree</span> (<span class="name">union-set</span> (<span class="name">tree-&gt;list</span> s1)</span><br><span class="line">                         (<span class="name">tree-&gt;list</span> s2))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>아래의 균형잡힌 트리로 프로시저를 테스트해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> s1 &#x27;(<span class="number">5</span> (<span class="number">3</span> (<span class="number">1</span> () ())</span><br><span class="line">                  ())</span><br><span class="line">               (<span class="number">9</span> (<span class="number">7</span> () ())</span><br><span class="line">                  (<span class="number">11</span> () ()))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> s2 &#x27;(<span class="number">8</span> (<span class="number">6</span> (<span class="number">4</span> () ())</span><br><span class="line">                  ())</span><br><span class="line">               (<span class="number">11</span> (<span class="number">9</span> () ())</span><br><span class="line">                   (<span class="number">13</span> () ()))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-65.png" alt="합집합 결과를 트리로 바꾼 모습" /></p>
<h3 id="b-intersection-set"><a class="markdownIt-Anchor" href="#b-intersection-set"></a> b. intersection-set</h3>
<p>교집합도 합집합과 동일한 아이디어로 구현할 수 있습니다. 책의 200p에는 intersection-set이 구현되어 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">intersection-set</span> set1 set2)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">or</span></span> (<span class="name"><span class="built_in">null?</span></span> set1) (<span class="name"><span class="built_in">null?</span></span> set2))</span><br><span class="line">      &#x27;()</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">x1</span> (<span class="name"><span class="built_in">car</span></span> set1))</span><br><span class="line">            (<span class="name">x2</span> (<span class="name"><span class="built_in">car</span></span> set2)))</span><br><span class="line">        (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> x1 x2)</span><br><span class="line">               (<span class="name"><span class="built_in">cons</span></span> x1</span><br><span class="line">                     (<span class="name">intersection-set</span> (<span class="name"><span class="built_in">cdr</span></span> set1)</span><br><span class="line">                                       (<span class="name"><span class="built_in">cdr</span></span> set2))))</span><br><span class="line">              ((<span class="name"><span class="built_in">&lt;</span></span> x1 x2)</span><br><span class="line">               (<span class="name">intersection-set</span> (<span class="name"><span class="built_in">cdr</span></span> set1) set2))</span><br><span class="line">              ((<span class="name"><span class="built_in">&gt;</span></span> x1 x2)</span><br><span class="line">               (<span class="name">intersection-set</span> set1 (<span class="name"><span class="built_in">cdr</span></span> set2)))))))</span><br></pre></td></tr></table></figure>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">intersection-set-tree</span> s1 s2)</span><br><span class="line">  (<span class="name">list-&gt;tree</span> (<span class="name">union-set</span> (<span class="name">tree-&gt;list</span> s1)</span><br><span class="line">                         (<span class="name">tree-&gt;list</span> s2))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위와 동일한 테스트 코드에 차집합을 적용해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> s1 &#x27;(<span class="number">5</span> (<span class="number">3</span> (<span class="number">1</span> () ())</span><br><span class="line">                  ())</span><br><span class="line">               (<span class="number">9</span> (<span class="number">7</span> () ())</span><br><span class="line">                  (<span class="number">11</span> () ()))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> s2 &#x27;(<span class="number">8</span> (<span class="number">6</span> (<span class="number">4</span> () ())</span><br><span class="line">                  ())</span><br><span class="line">               (<span class="number">11</span> (<span class="number">9</span> () ())</span><br><span class="line">                   (<span class="number">13</span> () ()))))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-65-1.png" alt="차집합 결과를 트리로 바꾼 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.66 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-66/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>레코드 집합을 두 갈래 나무로 짜 맞춘다고 할 때, 그에 알맞은 lookup 프로시저를 구현해 보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>이진 트리로 저장된 자료는 탐색 알고리즘도 간편하게 짤 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>정렬된 트리로 집합이 구현되어 있다면, key의 값을 통해 오른쪽 가지를 탐색할 지, 왼쪽 가지를 탐색할 지 결정할 수 있습니다. 여기서 key는 트리의 원소라고 하면 따로 key 프로시저를 만들 필요는 없습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">lookup</span> given-key set-of-records)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> set-of-records)</span><br><span class="line">        <span class="literal">#f</span></span><br><span class="line">        (<span class="name"><span class="built_in">let</span></span> ((<span class="name">ent</span> (<span class="name">entry</span> set-of-records)))</span><br><span class="line">          (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">eq?</span></span> ent given-key)</span><br><span class="line">                 ent)</span><br><span class="line">                ((<span class="name"><span class="built_in">&lt;</span></span> given-key ent)</span><br><span class="line">                 (<span class="name">lookup</span> given-key (<span class="name">left-branch</span> set-of-records)))</span><br><span class="line">                ((<span class="name"><span class="built_in">&gt;</span></span> given-key ent)</span><br><span class="line">                 (<span class="name">lookup</span> given-key (<span class="name">right-branch</span> set-of-records)))))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>예시 집합 s1에서 7과 6을 찾아보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> s1 &#x27;(<span class="number">5</span> (<span class="number">3</span> (<span class="number">1</span> () ())</span><br><span class="line">                  ())</span><br><span class="line">               (<span class="number">9</span> (<span class="number">7</span> () ())</span><br><span class="line">                  (<span class="number">11</span> () ()))))</span><br><span class="line"></span><br><span class="line">(<span class="name">lookup</span> <span class="number">7</span> s1)</span><br><span class="line">(<span class="name">lookup</span> <span class="number">6</span> s1)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-66.png" alt="7를 찾아내고 6을 못찾는 모습" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.67 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-67/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>인코딩 나무와 보기 글을 다음과 같이 정의하라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> sample-tree</span><br><span class="line">  (<span class="name">make-code-tree</span> (<span class="name">make-leaf</span> <span class="symbol">&#x27;A</span> <span class="number">4</span>)</span><br><span class="line">                  (<span class="name">make-code-tree</span></span><br><span class="line">                   (<span class="name">make-leaf</span> <span class="symbol">&#x27;B</span> <span class="number">2</span>)</span><br><span class="line">                   (<span class="name">make-code-tree</span> (<span class="name">make-leaf</span> <span class="symbol">&#x27;D</span> <span class="number">1</span>)</span><br><span class="line">                                   (<span class="name">make-leaf</span> <span class="symbol">&#x27;C</span> <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> sample-message &#x27;(<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>이 문제의 가치는 문제를 실행기에 실행시키는 것이 아닙니다.<br />
symbols와 weight가 트리와 이파리를 구분하는 방법<br />
허프만 트리의 생성 원리<br />
앞가지 코드<sup>prefix code</sup>를 사용하는 이유<br />
등의 내용을 잘 이해했고 손으로 코드를 직접 짤 수 있어야 이 문제를 풀었다고 할 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-문제를-푸는데-필요한-프로시저들"><a class="markdownIt-Anchor" href="#a-문제를-푸는데-필요한-프로시저들"></a> a. 문제를 푸는데 필요한 프로시저들</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-leaf</span> symbol weight)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;leaf</span> symbol weight))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">leaf?</span> object)</span><br><span class="line">  (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> object) <span class="symbol">&#x27;leaf</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">symbol-leaf</span> object)</span><br><span class="line">  (<span class="name"><span class="built_in">cadr</span></span> object))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">weight-leaf</span> object)</span><br><span class="line">  (<span class="name">caddr</span> object))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-code-tree</span> left right)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> left</span><br><span class="line">        right</span><br><span class="line">        (<span class="name"><span class="built_in">append</span></span> (<span class="name">symbols</span> left) (<span class="name">symbols</span> right))</span><br><span class="line">        (<span class="name"><span class="built_in">+</span></span> (<span class="name">weight</span> left) (<span class="name">weight</span> right))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">left-branch</span> tree) (<span class="name"><span class="built_in">car</span></span> tree))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">right-branch</span> tree) (<span class="name"><span class="built_in">cadr</span></span> tree))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">symbols</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">leaf?</span> tree)</span><br><span class="line">    (<span class="name"><span class="built_in">list</span></span> (<span class="name">symbol-leaf</span> tree))</span><br><span class="line">    (<span class="name">caddr</span> tree)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">weight</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">leaf?</span> tree)</span><br><span class="line">    (<span class="name">weight-leaf</span> tree)</span><br><span class="line">    (<span class="name">cadddr</span> tree)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">decode</span> bits tree)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">decode-inner</span> bits current-branch)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> bits)</span><br><span class="line">      &#x27;()</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">next-branch</span> (<span class="name">choose-branch</span> (<span class="name"><span class="built_in">car</span></span> bits) current-branch)))</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name">leaf?</span> next-branch)</span><br><span class="line">          (<span class="name"><span class="built_in">cons</span></span> (<span class="name">symbol-leaf</span> next-branch)</span><br><span class="line">                (<span class="name">decode-inner</span> (<span class="name"><span class="built_in">cdr</span></span> bits) tree))</span><br><span class="line">          (<span class="name">decode-inner</span> (<span class="name"><span class="built_in">cdr</span></span> bits) next-branch)))))</span><br><span class="line">  (<span class="name">decode-inner</span> bits tree))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">choose-branch</span> bit branch)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> bit <span class="number">0</span>) (<span class="name">left-branch</span> branch))</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> bit <span class="number">1</span>) (<span class="name">right-branch</span> branch))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">error</span> <span class="string">&quot;Something is wrong in your bits -- CHOOSE BRANCH&quot;</span>))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="b-디코딩-결과"><a class="markdownIt-Anchor" href="#b-디코딩-결과"></a> b. 디코딩 결과</h3>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> sample-tree</span><br><span class="line">  (<span class="name">make-code-tree</span> (<span class="name">make-leaf</span> <span class="symbol">&#x27;A</span> <span class="number">4</span>)</span><br><span class="line">                  (<span class="name">make-code-tree</span></span><br><span class="line">                   (<span class="name">make-leaf</span> <span class="symbol">&#x27;B</span> <span class="number">2</span>)</span><br><span class="line">                   (<span class="name">make-code-tree</span> (<span class="name">make-leaf</span> <span class="symbol">&#x27;D</span> <span class="number">1</span>)</span><br><span class="line">                                   (<span class="name">make-leaf</span> <span class="symbol">&#x27;C</span> <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> sample-message &#x27;(<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">decode</span> sample-message sample-tree)</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-67.png" alt="디코딩 결과 A D A B B C A" /></p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.68 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-68/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>encode 프로시저는 글과 나무를 인자로 받아서, 그 글을 인코딩한 비트 리스트를 내놓는다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">encode</span> message tree)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> message)</span><br><span class="line">      &#x27;()</span><br><span class="line">      (<span class="name"><span class="built_in">append</span></span> (<span class="name">encode-symbol</span> (<span class="name"><span class="built_in">car</span></span> message) tree)</span><br><span class="line">        (<span class="name">encode</span> (<span class="name"><span class="built_in">cdr</span></span> message) tree))))</span><br></pre></td></tr></table></figure>
<p>인코딩 나무를 보고, 한 글자를 인코딩하여 비트 리스트를 내놓도록 encode-symbol 프로시저를 짜라. 그 글자가 나무에 없을 때에는 잘못되었음을 알려주도록 프로시저를 설계해야 한다. 이 프로시저가 올바로 돌아가는지 알아보기 위하여, <a href="/sicp/chapter-2/exercise-2-67">연습문제 2.67</a>에서 sample-tree로 얻어낸 결과를 인코딩하여, 그 결과가 처음 글과 같은지 살펴보라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>처음 푸는데 시간도 오래 걸렸고, 제 부족한 점을 많이 알았습니다.<br />
첫째로 cons를 이용해서 (iter result) 없이 묶어야 좋은 프로시저라는 것을 알면서도 문제에 적용하지 못했습니다.<br />
둘째로 tree의 고르개를 정확히 이해하지 못해서, symbols가 list를 반환하는줄 몰라서 많이 해맸습니다<br />
셋째로 길을 찾는데 아주 유용한 고르개인 symbols를 제대로 활용하지 못했습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>저의 처음 아이디어는 이렇습니다. 가능성이 높은 코드일수록 left-branch에 있을 확률이 높으므로, 왼쪽 가지의 symbols를 검사해서 찾는 값이 있다면 왼쪽 가지에 iter를 적용합니다. 왼쪽에 찾는 결과가 없다면 오른쪽 가지에서 동일한 작업을 반복하는 것입니다. 그러다가 이파리에 다다르면 목표값인지 확인하고, 맞다면 경로를 반환하고 틀리다면 #f를 반환하면 됩니다.<br />
<span style="color:#999">memq 프로시저는 찾는 변수가 리스트 안에 있는지 알려주는 프로시저입니다.</span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">encode-symbol</span> symbol tree)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">iter</span> current-tree result)</span><br><span class="line">    (<span class="name"><span class="built_in">if</span></span> (<span class="name">leaf?</span> current-tree)</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name">symbols</span> current-tree)) symbol)</span><br><span class="line">            result</span><br><span class="line">            <span class="literal">#f</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">memq</span></span> symbol (<span class="name">symbols</span> (<span class="name">left-branch</span> current-tree)))</span><br><span class="line">            (<span class="name">iter</span> (<span class="name">left-branch</span> current-tree) (<span class="name"><span class="built_in">append</span></span> result &#x27;(<span class="number">0</span>)))</span><br><span class="line">            (<span class="name">iter</span> (<span class="name">right-branch</span> current-tree) (<span class="name"><span class="built_in">append</span></span> result &#x27;(<span class="number">1</span>))))))</span><br><span class="line">  (<span class="name">iter</span> tree &#x27;()))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>하지만 알시다시피 append로 묶는 것은 cons에 비해 비효율적입니다. 게다가 코드가 아름답지 않았습니다. 결국 인터넷에서 더 아름다운 해답을 찾았습니다. cons로 데이터를 묶고, 불필요한 eq?를 없앤 프로시저입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">encode-symbol</span> symbol tree)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">leaf?</span> tree)</span><br><span class="line">      &#x27;()</span><br><span class="line">      (<span class="name"><span class="built_in">let</span></span> ((<span class="name">left</span> (<span class="name">left-branch</span> tree)))</span><br><span class="line">        (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">memq</span></span> symbol (<span class="name">symbols</span> left))</span><br><span class="line">            (<span class="name"><span class="built_in">cons</span></span> <span class="number">0</span> (<span class="name">encode-symbol</span> symbol left))</span><br><span class="line">            (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> (<span class="name">encode-symbol</span> symbol (<span class="name">right-branch</span> tree)))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 프로시저를 cond를 사용해서 좀 더 아름답게 하면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">encode-symbol</span> symbol tree) </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name">leaf?</span> tree) &#x27;()) </span><br><span class="line">        ((<span class="name"><span class="built_in">memq</span></span> symbol (<span class="name">symbols</span> (<span class="name">left-branch</span> tree))) </span><br><span class="line">         (<span class="name"><span class="built_in">cons</span></span> <span class="number">0</span> (<span class="name">encode-symbol</span> symbol (<span class="name">left-branch</span> tree)))) </span><br><span class="line">        ((<span class="name"><span class="built_in">memq</span></span> symbol (<span class="name">symbols</span> (<span class="name">right-branch</span> tree))) </span><br><span class="line">         (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> (<span class="name">encode-symbol</span> symbol (<span class="name">right-branch</span> tree)))) </span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">error</span> <span class="string">&quot;symbol not in tree&quot;</span> symbol)))) </span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>처음 푸는데 시간도 오래 걸렸고, 제 부족한 점을 많이 알았습니다.</p>
<p>첫째로 cons를 이용해서 (iter result) 없이 묶어야 좋은 프로시저라는 것을 알면서도 문제에 적용하지 못했습니다.</p>
<p>둘째로 tree의 고르개를 정확히 이해하지 못해서, symbols가 list를 반환하는줄 몰라서 많이 해맸습니다.</p>
<p>셋째로 길을 찾는데 아주 유용한 고르개인 symbols를 제대로 활용하지 못했습니다.</p>
<p>반성할 점이 많은 하루였습니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.69 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-69/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음 프로시저는 (서로 다른 두 쌍 속에 같은 글자가 들어 있지 않도록) 글자-빈도 쌍으로 이루어진 리스트를 인자로 받아서 허프만 알고리즘에 따라 인코딩 나무를 만들어 낸다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">generate-huffman-tree</span> pairs)</span><br><span class="line">  (<span class="name">successive-merge</span> (<span class="name">make-leaf-set</span> pairs)))</span><br></pre></td></tr></table></figure>
<p>make-leaf-set는 쌍 리스트를 인자로 받아서, 차례 매긴 나뭇잎 집합으로 바꿔주는 프로시저인데, 이것은 본문에서 정의한 것과 같다. make-code-tree 프로시저를 써서, 집합에 원소 하나만 남을 때까지, 곧 허프만 나무를 만들 때까지 가장 가벼운 두 원소를 잇달아 묶어내는 successive-merge 프로시저를 짜라. (이 프로시저를 짜려면 조금 잔재주를 부려야 하지만, 복잡한 것은 아니다. 따라서 복잡한 프로시저를 설계한다면, 뭔가 잘못하고 있다고 보면 틀림없다. 이때, 차례매긴 집합 표현 방식을 쓴다는 사실에서 큰 도움을 얻을 수 있다.)</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>개인적으로 시간이 굉장히 많이 걸린 문제였습니다.<br />
이 문제를 잘 풀기 위해서는 몇가지를 잘 파악했어야 했습니다.<br />
첫째로 이파리들을 트리로 엮어내기 전에 adjoint를 사용해야 했습니다.<br />
둘째로 make-leaf-set은 '오름차순으로 정렬’된 이파리 리스트를 반환하는데, 이 점을 유념했어야 했습니다.<br />
셋째로 pairs가 글자-빈도 쌍인지 모르고, 글자만으로 프로시저를 짜려고 했다가 시간을 낭비해버렸습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-기본-프로시저"><a class="markdownIt-Anchor" href="#a-기본-프로시저"></a> a. 기본 프로시저</h3>
<p>문제 풀이에 필요한 기본 프로시저들입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-leaf</span> symbol weight)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;leaf</span> symbol weight))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">leaf?</span> object)</span><br><span class="line">  (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> object) <span class="symbol">&#x27;leaf</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">symbol-leaf</span> object)</span><br><span class="line">  (<span class="name"><span class="built_in">cadr</span></span> object))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">weight-leaf</span> object)</span><br><span class="line">  (<span class="name">caddr</span> object))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">symbols</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">leaf?</span> tree)</span><br><span class="line">    (<span class="name"><span class="built_in">list</span></span> (<span class="name">symbol-leaf</span> tree))</span><br><span class="line">    (<span class="name">caddr</span> tree)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">weight</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">leaf?</span> tree)</span><br><span class="line">    (<span class="name">weight-leaf</span> tree)</span><br><span class="line">    (<span class="name">cadddr</span> tree)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-code-tree</span> left right)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> left</span><br><span class="line">        right</span><br><span class="line">        (<span class="name"><span class="built_in">append</span></span> (<span class="name">symbols</span> left) (<span class="name">symbols</span> right))</span><br><span class="line">        (<span class="name"><span class="built_in">+</span></span> (<span class="name">weight</span> left) (<span class="name">weight</span> right))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">adjoin-set</span> x set)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> set) (<span class="name"><span class="built_in">list</span></span> x))</span><br><span class="line">        ((<span class="name"><span class="built_in">&lt;</span></span> (<span class="name">weight</span> x) (<span class="name">weight</span> (<span class="name"><span class="built_in">car</span></span> set))) (<span class="name"><span class="built_in">cons</span></span> x set))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> set)</span><br><span class="line">                    (<span class="name">adjoin-set</span> x (<span class="name"><span class="built_in">cdr</span></span> set))))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="b-make-leaf-set"><a class="markdownIt-Anchor" href="#b-make-leaf-set"></a> b. make-leaf-set</h3>
<p>make-leaf-set은 문자-빈도 쌍을 정렬하는 프로시저입니다. 트리를 weight에 따라 정렬하기 위해 책에서 제시한 adjoin-set 프로시저를 이용하면 쉽게 구현할 수 있습니다. 문자-빈도 쌍을 leaf로 만들어서 집합에 넣어주면 됩니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-leaf-set</span> pairs)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">null?</span></span> pairs)</span><br><span class="line">      &#x27;()</span><br><span class="line">      (<span class="name">adjoin-set</span> (<span class="name">make-leaf</span> (<span class="name"><span class="built_in">caar</span></span> pairs)</span><br><span class="line">                             (<span class="name">cadar</span> pairs))</span><br><span class="line">                  (<span class="name">make-leaf-set</span> (<span class="name"><span class="built_in">cdr</span></span> pairs))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h3 id="c-successive-merge"><a class="markdownIt-Anchor" href="#c-successive-merge"></a> c. successive-merge</h3>
<p>정말 시간이 오래 걸린 프로시저였습니다.</p>
<p>가장 처음 떠올린 아이디어는 pairs의 가장 처음 원소 세가지를 비교해가면서, 합이 가장 작은 쌍을 골라서 tree로 만들어가는 프로시저였습니다. 하지만, pairs는 오름차순으로 정렬된 리스트입니다. 가장 작은 쌍은 항상 맨 앞의 두개입니다.</p>
<p>또, 맨 앞의 두개를 트리로 만든다고 해도 다른 리스트들 사이에 크기 순으로 정렬을 해야 합니다. 그런데, 문제를 풀 당시에는 adjoin-set의 존재를 잊어버리고 있었습니다. 무엇인가 트리를 정렬한다는 느낌이 나오면, 항상 adjoin-set을 떠올리는 습관을 들여야겠습니다.</p>
<p>만든 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">generate-huffman-tree</span> pairs)</span><br><span class="line">  (<span class="name">successive-merge</span> (<span class="name">make-leaf-set</span> pairs)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">successive-merge</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">successive-merge-iter</span> tree)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">cdr</span></span> tree))</span><br><span class="line">         tree)</span><br><span class="line">        ((<span class="name"><span class="built_in">null?</span></span> (<span class="name">cddr</span> tree))</span><br><span class="line">         (<span class="name">make-code-tree</span> (<span class="name"><span class="built_in">car</span></span> tree) (<span class="name"><span class="built_in">cadr</span></span> tree)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span></span><br><span class="line">         (<span class="name">successive-merge-iter</span></span><br><span class="line">          (<span class="name">adjoin-set</span></span><br><span class="line">           (<span class="name">make-code-tree</span> (<span class="name"><span class="built_in">car</span></span> tree) (<span class="name"><span class="built_in">cadr</span></span> tree))</span><br><span class="line">           (<span class="name">cddr</span> tree))))))</span><br><span class="line">  (<span class="name">successive-merge-iter</span> tree))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>아래의 코드를 실행해서 프로시저를 테스트해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">generate-huffman-tree</span> &#x27;((A <span class="number">1</span>) (F <span class="number">6</span>) (C <span class="number">3</span>) (B <span class="number">2</span>) (D <span class="number">4</span>) (E <span class="number">5</span>)))</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/sicp/chapter-2/exercise-2-69.png" alt="프로시저가 만들어낸 허프만 코드" /></p>
<p><br/><br/></p>
<p>위의 코드를 도식화하겠습니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-69-1.png" alt="발로 그린듯한 트리" /></p>
<p><br/><br/></p>
<p>이딴게 허프만 트리? 라고도 할 수 있겠지만, 우선순위에 따라 높이가 다른 엄연한 허프만 트리입니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.70 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-70/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>다음은 낱말 8개로 이루어진 글 집합과 그 빈도를 정리한 것인데, 1950년대에 나온 락 노래 가사를 효율적으로 인코딩하려고 설계된 것이다. (여기서 '낱말’이 되는 '글자’가 꼭 낱자가 아니어도 된다는 사실을 알아차리자.)</p>
<table>
<thead>
<tr>
<th>문자</th>
<th>빈도수</th>
<th>문자</th>
<th>빈도수</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>2</td>
<td>NA</td>
<td>16</td>
</tr>
<tr>
<td>BOOM</td>
<td>1</td>
<td>SHA</td>
<td>3</td>
</tr>
<tr>
<td>GET</td>
<td>2</td>
<td>YIP</td>
<td>9</td>
</tr>
<tr>
<td>JOB</td>
<td>2</td>
<td>WAH</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>generate-huffman-tree 프로시저 (<a href="/sicp/chapter-2/exercise-2-69">연습문제 2.69</a>)를 써서 알맞은 허프만 나무를 만든 다음에 encode 프로시저(<a href="/sicp/chapter-2/exercise-2-68">연습문제 2.68</a>)로 아래와 같은 글을 인코딩해 보라.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">Get a job</span><br><span class="line">Sha na na na na na na na na</span><br><span class="line">Get a job</span><br><span class="line">Sha na na na na na na na na</span><br><span class="line">Wah yip yip yip yip yip yip yip yip yip</span><br><span class="line">Sha boom</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>허프만 트리로 인코딩하는 것이 생각보다 좋은 용량 최적화를 보인다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-노래가사-인코딩"><a class="markdownIt-Anchor" href="#a-노래가사-인코딩"></a> a. 노래가사 인코딩</h3>
<p>다행히도 scheme에서는 대소문자 구분을 따로 안하는 것 같습니다. <span style="color:#999">휴</span><br />
우선 허프만 트리와 노래 가사를 정의하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> rock-code-tree</span><br><span class="line">  (<span class="name">generate-huffman-tree</span></span><br><span class="line">   &#x27;((a <span class="number">2</span>) (na <span class="number">16</span>) (boom  <span class="number">1</span>) (sha <span class="number">3</span>) (get <span class="number">2</span>) (yip <span class="number">9</span>) (job <span class="number">2</span>) (wah <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line"> (<span class="name"><span class="built_in">define</span></span> rock-lyrics</span><br><span class="line">   &#x27;(Get a job Sha na na na na na na na na Get a job Sha na na na na na na na na Wah yip yip yip yip yip yip yip yip yip Sha boom)) </span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>앞선 문제들의 코드를 이용해서 인코딩해 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">encode</span> rock-lyrics rock-code-tree)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>인코딩한 결과는 다음과 같습니다.</p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-70.png" alt="(0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 1 0 1 1)" /></p>
<p>총 63개의 bit를 차지합니다.</p>
<p><br/><br/></p>
<h3 id="b-길이가-정해진-코드"><a class="markdownIt-Anchor" href="#b-길이가-정해진-코드"></a> b. 길이가 정해진 코드</h3>
<p>8개의 단어를 길이가 정해진 코드로 인코딩하기 위해서 3bit가 필요하다는 것은 다들 아실 겁니다.<br />
즉, 한개의 단어마다 3bit가 필요한데, 보기로 주어진 노래 가사는 총 36개의 단어로 이루어져 있으므로 가장 적은 비트수로 만들려고 해봐야 108bit나 되는 것입니다.</p>
<p>앞의 63bit와 비교해 보았을때 2배 가까이 차이나는 용량입니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.7 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-7/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Alyssa가 짠 프로그램에는, 구간 값을 나타내는 요약된 데이터가 있다고 보고 구간 산술 연산을 만들었다. 그러므로 Alyssa의 프로그램을 돌아가게 만들려면, 실제로 구간 데이터를 만들어야 한다. 구간을 짜맞추는 연산이 아래와 같다고 하자.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-interval</span> a b) (<span class="name"><span class="built_in">cons</span></span> a b))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>이를 바탕으로, 구간의 상한과 하한을 골라내는 upper-bound와 lower-bound를 정의하여 Alyssa의 프로그램을 돌아가게 만들어라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>구간 산술 연산에 대한 지식을 얻을 수 있습니다.<br />
또 그 연산을 프로시저로 구현하는 법을 배울 수 있습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>문제 자체를 푸는 것은 어렵지 않습니다.<br />
답은 당연히 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-interval</span> a b) (<span class="name"><span class="built_in">cons</span></span> a b))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">upper-bound</span> x) (<span class="name"><span class="built_in">cdr</span></span> x))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">lower-bound</span> x) (<span class="name"><span class="built_in">car</span></span> x))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>이 문제의 가치는 2.1.4절의 구간 산술 연산을 이해하는 데에 있습니다.<br />
책에 적힌 기본 산술 연산들은 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">add-interval</span> x y)</span><br><span class="line">  (<span class="name">make-interval</span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">lower-bound</span> x) (<span class="name">lower-bound</span> y))</span><br><span class="line">                 (<span class="name"><span class="built_in">+</span></span> (<span class="name">upper-bound</span> x) (<span class="name">upper-bound</span> y))))</span><br><span class="line">         </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">mul-interval</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">p1</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">lower-bound</span> y)))</span><br><span class="line">        (<span class="name">p2</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">lower-bound</span> x) (<span class="name">upper-bound</span> y)))</span><br><span class="line">        (<span class="name">p3</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> y)))</span><br><span class="line">        (<span class="name">p4</span> (<span class="name"><span class="built_in">*</span></span> (<span class="name">upper-bound</span> x) (<span class="name">upper-bound</span> y))))</span><br><span class="line">    (<span class="name">make-interval</span> (<span class="name"><span class="built_in">min</span></span> p1 p2 p3 p4)</span><br><span class="line">                   (<span class="name"><span class="built_in">max</span></span> p1 p2 p3 p4))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">div-interval</span> x y)</span><br><span class="line">  (<span class="name">mul-interval</span> x</span><br><span class="line">                (<span class="name">make-interval</span> (<span class="name"><span class="built_in">/</span></span> <span class="number">1.0</span> (<span class="name">upper-bound</span> y))</span><br><span class="line">                               (<span class="name"><span class="built_in">/</span></span> <span class="number">1.0</span> (<span class="name">lower-bound</span> y)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>위의 프로시저들을 이용해서 책의 2.1.4절에 나온 저항 합성 문제를 계산해 보도록 하겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>p</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>R</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>R</mi><mn>2</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">R_p = \frac{1}{1/R_1 + 1/R_2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><br/><br/></p>
<p>R1을 6.8Ω에 허용오차 10%<br />
R2를 4.7Ω에 허용호차 5%라고 한다면,</p>
<p>각각의 범위는 아래와 같습니다.<br />
R1 = 6.12 ~ 7.48<br />
R2 = 4.46 ~ 4.93</p>
<p>위에서 구현한 프로시저들이 정확하다면 R1과 R2의 합성 Rp는 2.58~2.97이어야 합니다.<br />
Rp를 구하는 프로시저는 다음과 같습니다.<br />
<span style="color:#999">아래의 프로시저에서 one은 범위가 1부터 1까지인 구간입니다.</span></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">Rp</span> R1 R2)</span><br><span class="line">  (<span class="name"><span class="built_in">let</span></span> ((<span class="name">one</span> (<span class="name">make-interval</span> <span class="number">1.0</span> <span class="number">1.0</span>)))</span><br><span class="line">    (<span class="name">div-interval</span> one</span><br><span class="line">                  (<span class="name">add-interval</span> (<span class="name">div-interval</span> one R1)</span><br><span class="line">                                (<span class="name">div-interval</span> one R2)))))</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>그리고 아래의 코드를 실행시켰습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> R1 (<span class="name">make-interval</span> <span class="number">6.12</span> <span class="number">7.48</span>))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> R2 (<span class="name">make-interval</span> <span class="number">4.46</span> <span class="number">4.93</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">Rp</span> R1 R2)</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-7.png" alt="(2.581558809636278 . 2.97332259363673)" /><br />
예상한 범위의 값을 산출하는 모습입니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.71 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-71/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>글자 N개를 위한 허프만 트리가 있고, 글자마다 빈도가 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mo>⋯</mo><mo separator="true">,</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1,2,3,4, ⋯ , 2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>이라고 하자. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">n=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>일 때와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">n=10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>일 때 나무를 스케치해 보라. 그런 나무에서 (글자 수가 n이라고 할 때) 가장 많이 나오는 글자와 가장 덜 나오는 글자를 인코딩 하는 데 얼마나 많은 비트가 필요한가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>허프만 트리의 가장 빈도수가 낮은 글자의 인코딩 비트 자리수는 n에 비례한다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-트리-스케치"><a class="markdownIt-Anchor" href="#a-트리-스케치"></a> a. 트리 스케치</h3>
<p>각각 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">n=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>일 때와 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">n=10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>일 때 나무를 스케치한 모습입니다.<br />
<img data-src="/img/sicp/chapter-2/exercise-2-71-1.png" alt="n=5인 허프만 트리" /></p>
<p><img data-src="/img/sicp/chapter-2/exercise-2-71-2.png" alt="n=10인 허프만 트리" /></p>
<p><br/><br/></p>
<h3 id="b-빈도수에-따라-필요한-비트수"><a class="markdownIt-Anchor" href="#b-빈도수에-따라-필요한-비트수"></a> b. 빈도수에 따라 필요한 비트수</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">n=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>인 허프만 트리에서 빈도가 가장 높은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>의 빈도를 가지는 글자는, 뿌리에서 부터 왼쪽으로 1만큼 떨어져 있으므로 인코딩할때 '0’으로 표현됩니다. 빈도수가 가장 낮은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>의 빈도를 가지는 글자는 뿌리로부터 오른쪽으로 4만큼 떨어져 있으므로, &quot;1111&quot;로 표현됩니다. 즉, 가장 높은 빈도수의 글자는 1자리의 비트가 필요하고, 가장 낮은 빈도수의 글자는 4자리의 비트가 필요합니다.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">n=10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>인 허프만 트리에서 빈도가 가장 높은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">2^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>의 빈도를 가지는 글자는, 뿌리에서 부터 왼쪽으로 1만큼 떨어져 있으므로 인코딩할때 '0’으로 표현됩니다. 빈도수가 가장 낮은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>의 빈도를 가지는 글자는 뿌리로부터 오른쪽으로 9만큼 떨어져 있으므로, &quot;111111111&quot;로 표현됩니다. 즉, 가장 높은 빈도수의 글자는 1자리의 비트가 필요하고, 가장 낮은 빈도수의 글자는 9자리의 비트가 필요합니다.</p>
<p>결국 모든 허프만 트리에서 가장 높은 빈도수의 글자는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>비트가 필요하고, 가장 낮은 빈도수의 글자는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>비트가 필요합니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.72 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-72/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p><a href="/sicp/chapter-2/exercise-2-68">연습문제 2.68</a>에서 설계한 인코딩 프로시저를 생각해 보자. 한 글자를 인코딩하는 데 필요한 계산 단계는 어떤 자람 차수<sup>order of growth</sup>를 보이는가? 마디 하나를 거쳐 갈 때마다, 글자 리스트를 훑어보는 데 들어가는 계산 단계까지 모두 아울러야 함을 잊지 마라. 이 문제의 일반해<sup>general solution</sup>을 구하기는 어렵다. 글자 n개의 빈도가 <a href="/sicp/chapter-2/exercise-2.71">연습문제 2.71</a>과 같은 경우만 따져서, 가장 많이 쓰는 글자와 가장 적게 쓰는 글자를 인코딩하는 데 얼마나 많은 계산 단계를 밟아야 하는지 (n의 함수로 정의한) 자람차수로 나타내라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>허프만 트리로 문자를 인코딩할때, 빈도수가 낮아질 수록 시간복잡도가 많이 증가한다는 것을 알 수 있었습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p><img data-src="/img/sicp/chapter-2/exercise-2-72-1.png" alt="이해를 돕기 위한 문제 2.71의 허프만 트리" /></p>
<p><br/><br/></p>
<p>가장 높은 빈도의 글자를 찾는 계산단계는 쉽게 떠올릴 수 있습니다. 뿌리의 문자열 중에서 가장 왼쪽에 있는 글자이기 때문에, 1만큼의 검색시간만 필요할 뿐입니다.</p>
<p>빈도수가 낮아질수록 검색시간은 당연하게도 늘어납니다. 2번째로 높은 빈도수의 글자를 찾기 위해서는 두단계의 과정을 거쳐야 합니다. 첫번째 단계는 뿌리의 왼쪽에 있는 노드인지, 오른쪽에 있는 노드인지 확인하는 작업입니다. 이 작업은 단순하게 문자열을 왼쪽에서부터 차례대로 탐색하는 것으로 생각할 수 있습니다. 지금 찾으려는 문자는 전체 문자열의 왼쪽에서 2번째에 있으므로 2만큼의 검색시간이 필요합니다. 이 작업이 끝나면 두번째로 높은 빈도수의 문자가 문자열의 가장 첫번째에 있는 트리에서 또다시 검색을 해야 합니다. 이때 찾는 문자는 문자열의 첫번째에 있으므로 1만큼의 검색시간이 필요합니다. 총 검색시간은 3입니다.</p>
<p>위의 과정에서 유추할 수 있는 사실이 있습니다. n번째로 빈도수가 높은 문자를 찾기 위해서는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + (n-1) + (n-2) + ⋯ + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>만큼의 검색시간이 필요하다는 것입니다. 이 검색시간은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>부터 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>까지의 등차수열의 합이므로, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mi>n</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{(1+n)n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>입니다.</p>
<p>즉, 가장 높은 빈도수를 찾는 경우의 시간복잡도는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>이고 가장 낮은 빈도수를 찾는 경우의 시간 복잡도는 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Θ(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>입니다.</p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.9 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-9/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>구간 값의 폭<sup>width</sup>이란, 구간의 상한에서 하한을 빼고서 반으로 나눈 값을 말한다. 폭은 구간 값이 정확하지 않은 정도를 나타낸다. 구간 값의 산술 연산에서는 인자가 되는 두 구간 값의 폭만 가지고, 결과 값의 폭을 구할 수 있는 연산도 있으나, 그렇지 않은 연산도 있다. 두 구간 값을 더해서(또는 빼서) 나온 구간 값의 폭은, 더하고 있는(또는 빼고 있는) 구간 값의 폭으로도 구할 수 있다는 것을 밝혀라. 그리고 두 구간 값을 곱하거나 나눠서 나온 구간 값의 폭은 그렇게 구하지 못한다는 것을 뒷받침하는 보기를 찾아보아라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>구간 산술 연산에서 폭의 값만 알아도 할 수 있는 계산이 있다는 것을 알았습니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<h3 id="a-구간-값의-폭으로-결과의-폭을-구할-수-있는-연산"><a class="markdownIt-Anchor" href="#a-구간-값의-폭으로-결과의-폭을-구할-수-있는-연산"></a> a. 구간 값의 폭으로 결과의 폭을 구할 수 있는 연산</h3>
<p>덧셈 연산과 뺄셈 연산은 구간 값의 폭을 알면, 결과의 폭도 알 수 있다는 것을 직관적으로 알 수 있습니다.<br />
두 구간인 a와 b를 아래와 같이 상정하겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><msub><mi>w</mi><mi>a</mi></msub><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>a</mi><mo>+</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a = (a-w_a \ , \ a+w_a)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><msub><mi>w</mi><mi>b</mi></msub><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>b</mi><mo>+</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b = (b-w_b \ , \ b+w_b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>a와 b에 대해 a+b와 a-b는 다음과 같습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a+b = ((a-w_a) + (b-w_b) \ , \ (a+w_a) + (b+w_b))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a-b = ((a-w_a) - (b+w_b) \ , \ (a+w_a) - (b-w_b))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>양 경우에서 구간의 폭은 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span>의 값과 상관없이 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>a</mi></msub><mo>+</mo><msub><mi>w</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">w_a+w_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>라는 것을 알 수 있습니다.</p>
<h3 id="b-구간-값의-폭으로-결과의-폭을-구할-수-없는-연산"><a class="markdownIt-Anchor" href="#b-구간-값의-폭으로-결과의-폭을-구할-수-없는-연산"></a> b. 구간 값의 폭으로 결과의 폭을 구할 수 없는 연산</h3>
<p>위의 a,b에 대해 곱셈도 해보겠습니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a × b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p>
<p><br/><br/></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a × b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>의 하한은 아래의 경우 중 가장 작은 값이고, 상한은 가장 큰 값입니다.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p_1=(a-w_a) × (b-w_b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p_2=(a-w_a) × (b+w_b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>3</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p_3=(a+w_a) × (b-w_b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>4</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mi>b</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p_4=(a+w_a) × (b+w_b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p><br/><br/></p>
<p>이것들 중에서 어떤것이 상한인지 하한인지도 계산하기 전에는 알 수 없으며, 구한 상한과 하한의 차이도 제각각인데다가 a값과 b값을 포함하고 있습니다.<br />
나눗셈도 똑같은 방법으로 구간 값의 폭으로 결과의 폭을 구할 수 없다는 것을 증명할 수 있습니다.</p>
<p><br/><br/></p>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.73 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-73/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>2.3.2절에서는 글자로 이루어진 식을 다음 프로그램으로 미분하였다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv</span> exp var)   </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">number?</span></span> exp) <span class="number">0</span>) </span><br><span class="line">        ((<span class="name">variable?</span> exp)</span><br><span class="line">         (<span class="name"><span class="built_in">if</span></span> (<span class="name">same-variable?</span> exp var) <span class="number">1</span> <span class="number">0</span>)) </span><br><span class="line">        ((<span class="name">sum?</span> exp)</span><br><span class="line">         (<span class="name">make-sum</span> (<span class="name">deriv</span> (<span class="name">addend</span> exp) var)   </span><br><span class="line">                   (<span class="name">deriv</span> (<span class="name">augend</span> exp) var))) </span><br><span class="line">        ((<span class="name">product?</span> exp)</span><br><span class="line">         (<span class="name">make-sum</span></span><br><span class="line">          (<span class="name">make-product</span> (<span class="name">multiplier</span> exp)</span><br><span class="line">                        (<span class="name">deriv</span> (<span class="name">multiplicand</span> exp) var))</span><br><span class="line">          (<span class="name">make-product</span> (<span class="name">deriv</span> (<span class="name">multiplier</span> exp) var)</span><br><span class="line">                        (<span class="name">multiplicand</span> exp)))) </span><br><span class="line">        &lt;추가된 규칙들은 여기에&gt;</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> <span class="string">&quot;unknown expression type&quot;</span>)))</span><br></pre></td></tr></table></figure>
<p>이 또한 식이 어떤 타입이냐에 따라 할 일을 나누어 맡기는 프로그램이라 볼 수 있다. 이 경우에는 (+ 같은) 대수식의 연산 기호가 데이터의 '타입 흐름표’가 되고, deriv는 그 데이터를 적용할 연산이 된다. 이 프로그램을 데이터 중심 방식으로 바꾸려면 위 미분 프로시저를 다음과 같이 고쳐 쓰면 된다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv</span> exp var)</span><br><span class="line">   (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">number?</span></span> exp) <span class="number">0</span>)</span><br><span class="line">         ((<span class="name">variable?</span> exp) (<span class="name"><span class="built_in">if</span></span> (<span class="name">same-variable?</span> exp var) <span class="number">1</span> <span class="number">0</span>))</span><br><span class="line">         (<span class="name"><span class="built_in">else</span></span> ((<span class="name">get</span> <span class="symbol">&#x27;deriv</span> (<span class="name">operator</span> exp)) (<span class="name">operands</span> exp)</span><br><span class="line">                                            var))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">operator</span> exp) (<span class="name"><span class="built_in">car</span></span> exp))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">operands</span> exp) (<span class="name"><span class="built_in">cdr</span></span> exp))</span><br></pre></td></tr></table></figure>
<p>a. 위에서 한 일이 무엇인지 설명해 보라. number?나 variable?같은 술어 프로시저를 모조리 데이터 중심 방식으로 다루지 못하는 이유는 무엇인가?</p>
<p>b. 덧셈과 곱셈식을 미분하는 프로시저를 짜라. 그런 다음, 그 프로시저들을 위 프로그램에서 쓰는 표에 집어넣는데 필요한 코드를 짜라.</p>
<p>c. (<a href="/sicp/chapter-2/exercise-2-56/">연습문제 2.56</a>에서 나온 것처럼) 지수 식을 미분하는 것과 같이, 새로 보태고 싶은 규칙을 하나 골라 여기서 만든 데이터 중심 시스템에 집어넣어라.</p>
<p>d. 이런 단순한 대수 처리 방식에서는, 식에 붙은 연산자가 그 식의 타입을 나타낸다. 이때 '연산자와 타입’이 아니라 '타입과 연산자’로 프로시저 인덱스가 붙어 있다면, deriv 속에 알맞은 프로시저를 꺼내 쓰는 코드 <sup>dispatching</sup> <sup>code</sup> 가 다음과 같이 바뀐다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">((<span class="name">get</span> (<span class="name">operator</span> exp) <span class="symbol">&#x27;deriv</span>) (<span class="name">operands</span> exp) var)</span><br></pre></td></tr></table></figure>
<p>이 경우, 미분 시스템에는 어떤 변화가 필요한가?</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>데이터 중심 프로그래밍 기법으로 프로시저를 짜면 확실히 몇가지 이점을 얻을 수 있다는 것을 알게 되었습니다.</p>
<ol>
<li>패키지 내부의 프로시저를 숨길 수 있었습니다.</li>
<li>새로운 연산을 추가하기가 기존보다 훨씬 편했습니다. (additivity)</li>
</ol>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>dr.racket에는 <code>put</code>과 <code>get</code>이 빌트인되어있지 않습니다. 아래의 코드를 사용하면 <code>put</code>과 <code>get</code>을 사용할 수 있습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> global-array &#x27;())</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-entry</span> k v) (<span class="name"><span class="built_in">list</span></span> k v))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">key</span> entry) (<span class="name"><span class="built_in">car</span></span> entry))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">value</span> entry) (<span class="name"><span class="built_in">cadr</span></span> entry))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">put</span> op type item)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">put-helper</span> k array)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> array) (<span class="name"><span class="built_in">list</span></span>(<span class="name">make-entry</span> k item)))</span><br><span class="line">          ((<span class="name"><span class="built_in">equal?</span></span> (<span class="name">key</span> (<span class="name"><span class="built_in">car</span></span> array)) k) array)</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> array) (<span class="name">put-helper</span> k (<span class="name"><span class="built_in">cdr</span></span> array))))))</span><br><span class="line">  (<span class="name"><span class="built_in">set!</span></span> global-array (<span class="name">put-helper</span> (<span class="name"><span class="built_in">list</span></span> op type) global-array)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">get</span> op type)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">get-helper</span> k array)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> array) <span class="literal">#f</span>)</span><br><span class="line">          ((<span class="name"><span class="built_in">equal?</span></span> (<span class="name">key</span> (<span class="name"><span class="built_in">car</span></span> array)) k) (<span class="name">value</span> (<span class="name"><span class="built_in">car</span></span> array)))</span><br><span class="line">          (<span class="name"><span class="built_in">else</span></span> (<span class="name">get-helper</span> k (<span class="name"><span class="built_in">cdr</span></span> array)))))</span><br><span class="line">  (<span class="name">get-helper</span> (<span class="name"><span class="built_in">list</span></span> op type) global-array))</span><br></pre></td></tr></table></figure>
<p>그리고 교재의 2.3.2절의 프로시저 중, 이번 문제에 필요한 프로시저는 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">variable?</span> x)</span><br><span class="line">  (<span class="name"><span class="built_in">symbol?</span></span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">same-variable?</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">eq?</span></span> x y))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">=number?</span> exp num)</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> exp) (<span class="name"><span class="built_in">=</span></span> exp num)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-sum</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name">=number?</span> x <span class="number">0</span>) y)</span><br><span class="line">        ((<span class="name">=number?</span> y <span class="number">0</span>) x)</span><br><span class="line">        ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> x) (<span class="name"><span class="built_in">number?</span></span> y)) (<span class="name"><span class="built_in">+</span></span> x y))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;+</span> x y))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-product</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">or</span></span> (<span class="name">=number?</span> x <span class="number">0</span>) (<span class="name">=number?</span> y <span class="number">0</span>)) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name">=number?</span> x <span class="number">1</span>) y)</span><br><span class="line">        ((<span class="name">=number?</span> y <span class="number">1</span>) x)</span><br><span class="line">        ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> x) (<span class="name"><span class="built_in">number?</span></span> y)) (<span class="name"><span class="built_in">*</span></span> x y))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;*</span> x y))))</span><br></pre></td></tr></table></figure>
<h3 id="a-프로시저의-원리"><a class="markdownIt-Anchor" href="#a-프로시저의-원리"></a> a. 프로시저의 원리</h3>
<p>책의 2.4.3절에서는 데이터 중심 프로그래밍에 대해 설명하고 있습니다. 제가 이해한 데이터 중심 프로그래밍 기법은 데이터의 종류에 따라 가장 알맞은 연산을 적용하기 위한 프로그래밍 기법입니다. 위의 <code>deriv</code>는 <a href="/sicp/chapter-2/exercise-2-56/">연습문제 2.56</a>에서 처음 만들었던 것 처럼, 수식에서 변수와 연산자를 뽑아내어 각각에 맞게 미분을 하는 프로시저입니다. 미분하는 대상이 변수인지 상수인지에따라 또, 연산자가 곱셈인지 덧셈인지에 따라 즉, 데이터의 타입에 따라 다른 방식으로 미분을 진행하므로, 데이터 중심 설계를 하기에 알맞다고 할 수 있습니다.</p>
<p>number?나 variable?같은 술어 프로시저를 모조리 데이터 중심 방식으로 다루지 못하는 이유는, 술어 프로시저가 적용될 가능성이 있는 모든 데이터를 연산표에 기록하는 것은 현실적으로 불가능하기 때문이라고 생각합니다.</p>
<h3 id="b-덧셈과-곱셈식을-미분하는-프로시저"><a class="markdownIt-Anchor" href="#b-덧셈과-곱셈식을-미분하는-프로시저"></a> b. 덧셈과 곱셈식을 미분하는 프로시저</h3>
<p>원본 프로시저에 있던 +와 *을 데이터 중심 프로그래밍 방식으로 나타내면 됩니다. 미분 프로시저를 제대로 기억하고 있지 않거나, 교재의 put과 get의 용도를 이해하지 못했다면, 어렵게 느껴질 수도 있습니다. 여유를 가지고 페이지를 앞으로 넘겨서 제대로 복습하고 오시길 바랍니다.</p>
<p>기존에 만들어둔 미분 프로시저의 핵심이 되는 미분 연산을 변형하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">derive-sum</span> operands var)</span><br><span class="line">  (<span class="name">make-sum</span> (<span class="name">deriv</span> (<span class="name">addend</span> operands) var)</span><br><span class="line">            (<span class="name">deriv</span> (<span class="name">augend</span> operands) var)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv-product</span> operands var)</span><br><span class="line">  (<span class="name">make-sum</span></span><br><span class="line">   (<span class="name">make-product</span> (<span class="name">multiplier</span> operands)</span><br><span class="line">                 (<span class="name">deriv</span> (<span class="name">multiplicand</span> operands) var))</span><br><span class="line">   (<span class="name">make-product</span> (<span class="name">deriv</span> (<span class="name">multiplier</span> operands) var)</span><br><span class="line">                 (<span class="name">multiplicand</span> operands))))</span><br></pre></td></tr></table></figure>
<p>각 연산을 교재의 2.4.3절처럼 패키지 형태로 만들어 보겠습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">install-sum-deriv</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">addend</span> operands)</span><br><span class="line">    (<span class="name"><span class="built_in">car</span></span> operands))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">augend</span> operands)</span><br><span class="line">    (<span class="name"><span class="built_in">cadr</span></span> operands))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv-sum</span> operands var)</span><br><span class="line">    (<span class="name">make-sum</span> (<span class="name">deriv</span> (<span class="name">addend</span> operands) var)</span><br><span class="line">              (<span class="name">deriv</span> (<span class="name">augend</span> operands) var)))</span><br><span class="line">  </span><br><span class="line">  (<span class="name">put</span> <span class="symbol">&#x27;deriv</span> <span class="symbol">&#x27;+</span> deriv-sum))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">install-product-deriv</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplier</span> operands)</span><br><span class="line">    (<span class="name"><span class="built_in">car</span></span> operands))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">multiplicand</span> operands)</span><br><span class="line">    (<span class="name"><span class="built_in">cadr</span></span> operands))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv-product</span> operands var)</span><br><span class="line">    (<span class="name">make-sum</span></span><br><span class="line">     (<span class="name">make-product</span> (<span class="name">multiplier</span> operands)</span><br><span class="line">                   (<span class="name">deriv</span> (<span class="name">multiplicand</span> operands) var))</span><br><span class="line">     (<span class="name">make-product</span> (<span class="name">deriv</span> (<span class="name">multiplier</span> operands) var)</span><br><span class="line">                   (<span class="name">multiplicand</span> operands))))</span><br><span class="line"></span><br><span class="line">  (<span class="name">put</span> <span class="symbol">&#x27;deriv</span> <span class="symbol">&#x27;*</span> deriv-product))</span><br></pre></td></tr></table></figure>
<h3 id="c-지수식-미분"><a class="markdownIt-Anchor" href="#c-지수식-미분"></a> c. 지수식 미분</h3>
<p>(<a href="/sicp/chapter-2/exercise-2-56/">연습문제 2.56</a>의 exponentiation을 그대로 따왔습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">fast-exp</span> b n)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">even?</span></span> n) (<span class="name">square</span> (<span class="name">fast-exp</span> b (<span class="name"><span class="built_in">/</span></span> n <span class="number">2</span>))))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">*</span></span> b (<span class="name">fast-exp</span> b (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))))</span><br><span class="line">    </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-exponentiation</span> base power)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name">=number?</span> base <span class="number">0</span>) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name">=number?</span> base <span class="number">1</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name">=number?</span> power <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">        ((<span class="name">=number?</span> power <span class="number">1</span>) base)</span><br><span class="line">        ((<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">number?</span></span> base) (<span class="name"><span class="built_in">number?</span></span> power)) (<span class="name">fast-exp</span> base power))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;^</span> base power))))</span><br><span class="line">    </span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">install-exponentiation-deriv</span>)</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">base</span> operands)</span><br><span class="line">    (<span class="name"><span class="built_in">car</span></span> operands))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">power</span> operands)</span><br><span class="line">    (<span class="name"><span class="built_in">cadr</span></span> operands))</span><br><span class="line">  (<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv-exponentiation</span> operands var)</span><br><span class="line">    (<span class="name">make-product</span></span><br><span class="line">     (<span class="name">deriv</span> (<span class="name">base</span> operands) var)</span><br><span class="line">     (<span class="name">make-product</span> (<span class="name">power</span> operands)</span><br><span class="line">                   (<span class="name">make-exponentiation</span> (<span class="name">base</span> operands)</span><br><span class="line">                                        (<span class="name">make-sum</span> (<span class="name">power</span> operands) <span class="number">-1</span>)))))</span><br><span class="line">  (<span class="name">put</span> <span class="symbol">&#x27;deriv</span> <span class="symbol">&#x27;^</span> deriv-exponentiation))</span><br></pre></td></tr></table></figure>
<h3 id="d-연산자와-데이터-타입-순서-변경"><a class="markdownIt-Anchor" href="#d-연산자와-데이터-타입-순서-변경"></a> d. 연산자와 데이터 타입 순서 변경</h3>
<p>문제에서 요구한대로 <code>deriv</code>를 바꾸면 다음과 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">deriv</span> exp var)</span><br><span class="line">   (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">number?</span></span> exp) <span class="number">0</span>)</span><br><span class="line">         ((<span class="name">variable?</span> exp) (<span class="name"><span class="built_in">if</span></span> (<span class="name">same-variable?</span> exp var) <span class="number">1</span> <span class="number">0</span>))</span><br><span class="line">         (<span class="name"><span class="built_in">else</span></span> ((<span class="name">get</span> (<span class="name">operator</span> exp) <span class="symbol">&#x27;deriv</span>) (<span class="name">operands</span> exp)</span><br><span class="line">                                            var))))</span><br></pre></td></tr></table></figure>
<p>단순히 모든 put을 쓰는 프로시저들의 순서만 바꿔주면 그만입니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">put</span> <span class="symbol">&#x27;+</span> <span class="symbol">&#x27;deriv</span> deriv-sum)</span><br><span class="line"></span><br><span class="line">(<span class="name">put</span> <span class="symbol">&#x27;*</span> <span class="symbol">&#x27;deriv</span> deriv-product)</span><br><span class="line"></span><br><span class="line">(<span class="name">put</span> <span class="symbol">&#x27;^</span> <span class="symbol">&#x27;deriv</span> deriv-exponentiation)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP 연습문제 2.8 친절한 풀이</title>
    <url>/sicp/chapter-2/exercise-2-8/</url>
    <content><![CDATA[<h2 id="문제"><a class="markdownIt-Anchor" href="#문제"></a> 문제</h2>
<p>Alyssa가 했던 것처럼, 구간 값의 뺄셈을 구하는 방법을 설명하고, 이를 sub-interval 프로시저로 정의하라.</p>
<blockquote>
<h2 id="문제로-부터-얻은-것"><a class="markdownIt-Anchor" href="#문제로-부터-얻은-것"></a> 문제로 부터 얻은 것</h2>
<p>앞의 <a href="/sicp/chapter-2/exercise-2-7/">연습문제 2.7</a>을 이해했다면, 굳이 풀 필요는 없는 문제입니다.</p>
</blockquote>
<h2 id="문제풀이"><a class="markdownIt-Anchor" href="#문제풀이"></a> 문제풀이</h2>
<p>x구간과 y구간의 뺄셈의 하한은 (x의 하한 - y의 상한)인 것이 자명합니다.<br />
같은 원리로 상한은 (x의 상한 - y의 하한)입니다.<br />
이를 프로시저로 구현하면 아래와 같습니다.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sub-interval</span> x y)</span><br><span class="line">  (<span class="name">make-interval</span> (<span class="name"><span class="built_in">-</span></span> (<span class="name">lower-bound</span> x) (<span class="name">upper-bound</span> y))</span><br><span class="line">                 (<span class="name"><span class="built_in">-</span></span> (<span class="name">upper-bound</span> x) (<span class="name">lower-bound</span> y))))</span><br></pre></td></tr></table></figure>
<p><br/><br/><br />
읽어주셔서 감사합니다.</p>
]]></content>
      <categories>
        <category>컴퓨터 프로그램의 구조와 해석</category>
        <category>2장 연습문제 풀이</category>
      </categories>
      <tags>
        <tag>SICP</tag>
        <tag>컴퓨터 프로그램의 구조와 해석</tag>
      </tags>
  </entry>
</search>
